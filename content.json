{"meta":{"title":"YNCBearz","subtitle":"","description":"","author":"YNCBearz","url":"https://yncbearz.github.io","root":"/"},"pages":[{"title":"","date":"2025-04-29T16:33:57.939Z","updated":"2025-04-29T16:33:57.939Z","comments":true,"path":"manifest.json","permalink":"https://yncbearz.github.io/manifest.json","excerpt":"","text":"{\"name\":\"YNCBearz\",\"short_name\":\"YNCBearz\",\"theme_color\":\"#202124\",\"background_color\":\"#202124\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"/images/icons/512x512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"},{\"src\":\"/images/icons/192x192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"/images/icons/white-bg/180x180.png\",\"sizes\":\"180x180\",\"type\":\"image/png\"},{\"src\":\"/images/icons/white-bg/144x144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"/images/icons/white-bg/128x128.png\",\"sizes\":\"128x128\",\"type\":\"image/png\"},{\"src\":\"/images/icons/white-bg/96x96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"/images/icons/white-bg/48x48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"","date":"2025-04-29T16:33:57.939Z","updated":"2025-04-29T16:33:57.939Z","comments":true,"path":"sw.js","permalink":"https://yncbearz.github.io/sw.js","excerpt":"","text":"importScripts('https://g.alicdn.com/kg/workbox/3.3.0/workbox-sw.js'); if (workbox) { workbox.setConfig({ modulePathPrefix: 'https://g.alicdn.com/kg/workbox/3.3.0/' }); workbox.precaching.precache(['/', '/index.html']); workbox.routing.registerRoute(new RegExp('^https?://yncbearz.github.io/?$'), workbox.strategies.networkFirst()); workbox.routing.registerRoute(new RegExp('.*.html'), workbox.strategies.networkFirst()); workbox.routing.registerRoute(new RegExp('.*.(?:js|css|jpg|png|gif)'), workbox.strategies.staleWhileRevalidate()); }"},{"title":"","date":"2020-10-17T10:49:40.000Z","updated":"2025-05-30T08:07:59.557Z","comments":false,"path":"/404.html","permalink":"https://yncbearz.github.io/404.html","excerpt":"","text":"好幾年沒遇到不速之客了 先問你們，你們不是從海上漂流來的吧？光順著海潮，是不可能到達這座島的。 預計在 秒後返回首頁。 ʕ •ᴥ•ʔ：使用「排除」！ let countTime = 13; function countdown() { document.getElementById('timeout').textContent = countTime; countTime -= 1; if(countTime === 0){ location.href = 'https://yncbearz.github.io/'; } setTimeout(() => { countdown(); }, 1000); } countdown();"},{"title":"","date":"2025-05-31T09:33:15.535Z","updated":"2025-05-31T09:33:15.535Z","comments":true,"path":"about/index.html","permalink":"https://yncbearz.github.io/about/index.html","excerpt":"","text":"ʕ •ᴥ•ʔ：保持心情愉快 電影 x 咖啡 x 美食大家好，我是 Bear。 目前是 C# 工程師。喜歡討論程式碼的設計，包含 S.O.L.I.D 及 Design Pattern。 程式世界中最喜歡的技術是 git 和 Vim。 前 PHP 工程師，從 macOS 轉移到 windows 生態後，致力於同步兩者間 work flow 的一致性。 近期拿到 CKAD 的證照。 福爾摩斯迷。喜歡沉浸在電影院，每個月會跑兩次影廳。 ʕ •ᴥ•ʔ：歡迎大家來玩與各種合作邀約。"}],"posts":[{"title":"費茲法則","slug":"Fitts-Law","date":"2025-07-26T11:26:41.000Z","updated":"2025-07-30T02:58:29.082Z","comments":true,"path":"2025/07/26/Fitts-Law/","permalink":"https://yncbearz.github.io/2025/07/26/Fitts-Law/","excerpt":"Fitts-Law","text":"費茲法則 (Fitts’s Law)目標的選取時間取決於目標的距離與大小。 起源費茲法則是由心理學家 Paul Fitts 在 1954 年提出的， 描述人類移動到目標所需的時間與目標距離和大小之間的關係。 費茲法則公式ID &#x3D; log₂(2D&#x2F;W)其中： ID &#x3D; 輸入困難度 (index of difficulty) D &#x3D; 起始點到目標中心的距離 W &#x3D; 目標的寬度 核心概念 目標越大，移動時間越短 目標越近，移動時間越短 對數關係表示邊際效益遞減 人因因素：美國空軍失誤事件1950年代，美國空軍面臨嚴重的飛行事故問題。 飛行員在操作飛機控制桿時經常出現失誤，導致飛機墜毀。 費茲的研究他發現大多數的墜機是因為飛行員在高壓情況下混淆了外觀幾乎相同的按鈕。 解決方案重新設計按鈕：透過不同的形狀，讓飛行員僅透過觸感便能輕鬆識別。 影響與啟示更好的設計意味著要理解人在分析、困惑或壓力下，無法理性思考的行為模式，並確保在這些情況下仍能安全有效地運作。 設計啟示：目標大小與距離重要按鈕要夠大 觸控目標要有足夠的大小，讓使用者可以清楚辨識並點選 觸控目標間需要保持適當距離 觸控目標應放在使用者容易觸及的介面區域 實際應用：網頁設計 導航欄設計：主要導航項目要夠大且容易點擊 CTA 按鈕：行動呼籲按鈕要突出且易於點擊 表單設計：輸入框和提交按鈕的合理佈局 實際應用：行動應用 拇指友好設計：考慮單手操作時的觸控範圍 底部導航：重要功能放在拇指容易到達的區域 手勢設計：滑動、點擊等手勢的目標區域設計 實際應用：桌面應用 工具列設計：常用工具要容易找到和點擊 選單設計：下拉選單的項目大小和間距 快捷鍵：減少滑鼠移動的需求 常見錯誤：❌ 錯誤做法 過小的按鈕：用戶難以準確點擊 功能分散：相關功能距離太遠 忽略邊緣：沒有利用螢幕邊緣的優勢（到達邊界後，游標會自然停止） 不一致的目標大小：相同重要性的元素大小不一 正確做法：✅ 最佳實踐 適當的目標大小：確保易於點擊 合理的功能分組：相關功能放在一起 利用邊緣優勢：重要控制項放在邊緣 一致的設計語言：相似功能使用相似的目標大小 測試與驗證方法可用性測試 點擊測試：測量用戶點擊不同大小目標的時間 A&#x2F;B 測試：比較不同設計的效果 熱點圖分析：了解用戶的點擊模式 脈絡訪查：針對小規模樣本，進行深入觀察和訪談 質性驗證方式：脈絡訪查什麼是脈絡訪查？脈絡訪查是一種用戶研究方法，通過在用戶的自然環境中觀察和訪談，深入了解用戶的真實使用情境和需求。 優點 真實性：在用戶實際使用環境中進行，數據更真實 深度性：能夠發現用戶自己都未察覺的需求 情境性：了解不同環境對用戶行為的影響 即時性：能夠觀察到用戶的即時反應和問題 實施步驟 準備階段 確定研究目標和問題 選擇合適的參與者 準備觀察工具和記錄設備 執行階段 在用戶自然環境中進行觀察 記錄用戶的操作行為和時間 進行深度訪談了解動機 分析階段 整理觀察數據和訪談記錄 識別用戶痛點和需求 提出設計改進建議 量化驗證方式：指標 點擊準確率：目標是否容易被準確點擊 完成時間：完成任務所需的時間 錯誤率：點擊錯誤的頻率 用戶滿意度：主觀的使用體驗評價 總結費茲法則是 UX 設計中的基礎法則，它提醒我們： 目標要夠大：確保用戶能夠輕鬆點擊 距離要合理：減少不必要的移動 利用邊緣優勢：螢幕邊緣是「無限大」的目標 考慮用戶習慣：設計要符合用戶的使用模式 記住：好的設計應該是直覺的，用戶不需要思考就能完成操作。 References 簡介費茲定律 (Fitt’s Law) Fitts’s Law ʕ •ᴥ•ʔ：Thank you","categories":[{"name":"Other","slug":"Other","permalink":"https://yncbearz.github.io/categories/Other/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"部落格功能清單","slug":"Blog-Feature-List","date":"2025-06-19T02:17:52.000Z","updated":"2025-06-19T02:39:28.939Z","comments":true,"path":"2025/06/19/Blog-Feature-List/","permalink":"https://yncbearz.github.io/2025/06/19/Blog-Feature-List/","excerpt":"Blog-Feature-List","text":"前言雖然我在 2023 年曾經教學 如何使用 Hexo 來寫部落格但隨著文章的數量越來越多，Hexo 居然無法編譯文章了。 研究了很久，沒有看到錯誤訊息，google 很久也找不到可行的解決方案，索性決定要搬家了。 搬家地點選定 hugo，開始整理功能清單，也研究了一天需要調整的地方。(hexo 跟 hugo 設定不同、themes、plugins 等) 但 TM 表示：「好的工程師就是要解決問題，而不是逃避啊」 完全戳中我的心，但我沒有看到錯誤訊息啊啊啊啊 最後還是沒有搬家，詳情見後記。 下面記錄一下這個部落格有的功能，當作之後搬家的 check list。 功能整理要 migrate 老專案的一個重點是：我們得先知道原本的專案有什麼功能。 原本的技術棧是 Hexo + Hueman框架的本身還有在更新，不過當年使用的 theme 與 package 幾乎都停止維護了。 Features Description 在 Hexo 的實現方式 Copyboard 複製程式碼區塊 使用 clipboard.js 達成 Google Analytics 瞭解網站流量來源 Hueman 原生支持 Message Board 文章留言功能 Hueman 原生支持 (使用 gittalk) Plantuml 文章顯示 plantuml fork hexo-tag-plantuml 修改達成 Post Sharing 複製當前文章網址 PD 熊熊魔改 Hueman Post to Slide 將文章轉換成 Slide 模式 使用 reveal.js 達成 Private Post 文章加密功能 fork hexo-blog-encrypt 修改達成 PWA 將 blog 放到桌面&#x2F;手機，偽裝成應用程式 fork pwa 修改達成 Search 搜尋功能 Hueman 原生支持 後記沉澱了幾天，重新編譯 hexo 時，發現原來是 twitter 相關的程式碼壞掉，移除後就正常了，開心！ ʕ •ᴥ•ʔ：估計約 150 篇文章，搬起來其實也是相當累人的。既然部落格復活了，之後會頻繁更新文章，嗯..應該會吧。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"Kent Beck 的實作模式","slug":"Kent-Beck-Implementation-Patterns","date":"2025-04-26T14:05:09.000Z","updated":"2025-07-26T11:43:42.928Z","comments":true,"path":"2025/04/26/Kent-Beck-Implementation-Patterns/","permalink":"https://yncbearz.github.io/2025/04/26/Kent-Beck-Implementation-Patterns/","excerpt":"Kent-Beck-Implementation-Patterns","text":"Chapter 4 動機 軟體成本 &#x3D; 初始成本 + 維護成本 維護成本 &#x3D; 理解成本 + 修改成本+ 測試成本 + 部署成本 在初期的開發中投入更多精力，來減少維護的需要？ Kent Beck 的策略 注重程式設計師之間的溝通減少理解程式碼的代價 記錄自己的實作模式，並嚴格地遵守它 模式給人們和經濟的影響 Chapter 5 類別 類別 (Class)這些資料應該放在一起，還有這些邏輯也是。 資料會變，邏輯不變學會如何用類別來包裝邏輯和如何表達邏輯的變化。 繼承把多個類別放進繼承體系可以縮減程式碼的數量。 簡單的超類別名稱 (Simple Superclass Name)位於繼承體系上的根類別，應該有個簡單的名字，用以描繪它的隱喻。 命名在所有的命名中，類別的命名是最重要的。 簡短與表達力之間存在張力類別名稱應該簡單扼要，但有時候需要好幾個單字才能足夠精確。 隱喻替計算邏輯找個強有力的隱喻。 讓名稱變成一張張「關係、連接和暗示」的大綱。 交談當嘗試把物件的用途解釋給別人聽時，就得尋找具有表達力和感染力的名稱。 重要的類別盡量用一個單字來為它命名。 適當的子類別名稱 (Qualified Subclass Name)子類別的名稱應該表達出與超類別間的相似性和差異性。 子類別的命名要描述子類別像什麼，還要說明它們之間的區別是什麼。 簡短與表達力間的選擇由於子類別在交談中並不頻繁，所以可以「犧牲簡明」。 例外如果只是利用繼承來實作貢獻機制，則這樣的子類別也該用簡單的命名。 多層繼承體系的命名是個難題，一般來說要進行重構，改用委派。 若還是存在，則要思考閱讀者需要知道什麼資訊。 抽象介面 (Abstract Interface)界面與實作分離。 介面的成本需要學習它、理解它、替它寫文件、除錯、組織它，甚至替它命名。 經濟的考量只要一開始設計正確，軟體就不需要進行任何改動？ 軟體變更清單程式設計師沒有弄清需求、客戶改變了想法， 唯一沒有提到的是「正當的變更」。 Interface 多重繼承一個類別可以實作多個 interface。 介面的命名如果 interface 叫 File，那實作類別只好叫 ActualFile, ConcreteFile 或 FileImpl。 可以給 interface 加上 I 字首。例如：IFile。 抽象類別 (Abstract Class)用抽象類別來表現可能會產生變化的抽象界面。 Interface vs Abstract Class取捨的關鍵，介面會如何變化及實作類別是否需要同時支援多個介面。 使用 Interface 作抽象類別當修改時，所有的實作類別都必須進行修改。 容易導致現有的設計癱瘓，需借助有版本的 interface。 使用 Abstract Class 作抽象類別局限在「實作類別必須對其忠心不二」。 如果需要從另一個角度看待同一個實作類別，則只能讓它實作 interface。 兩者並非互斥可以提供介面，再提供超類別表達一種實作。 在這種情況下，變數宣告應使用介面類型的參考，這樣將來的維護者就可以根據需要替換。 有版本的 interface (Versioned Interface)引入 sub-interface，進而安全地對 interface 進行拓展。 123interface Command &#123; void run();&#125; 123interface ReversibleCommand extends Command &#123; void undo();&#125; 123456public void undoIfReversible(Command recent) &#123; if (recent instanceof ReversibleCommand) &#123; ReversibleCommand downcasted = (ReversibleCommand) recent; downcasted.undo(); &#125;&#125; 使用 instanceof會降低靈活性，也是個醜陋的解決方案。 但真的遇到這種尷尬局面時，知道該如何修改總是好的。 值物件 (Value Object)這種物件扮演的角色如同數值一樣。 函數式永遠不會改變任何狀態，只是建立新的值。 程序式如果面對的情景總在不斷變化，則狀態式比較適合。 123456789101112class Transaction &#123; int value; Transaction(int value, Account credit, Account debit) &#123; this.value = value; credit.addCredit(this); debit.addDebit(this); &#125; int getValue() &#123; return value; &#125;&#125; 效能使用值物件，最大的反對意見是建立臨時物件。 但考慮整條成本，大部分的情況，都不是效能瓶頸。 邊界對於「狀態需要變化」與「物件不能變化」的邊界難以劃清。 大部分是值物件，但又不純粹是值物件的風格是最糟糕的。 物件、函數式和程序式將「使用狀態的可變物件」與「像數值一樣不可變的物件」搭配一起，能讓程式表達地更好。 特殊化 (Specialization)描繪相關計算的相似性和差異性。 簡單的變化abc 與 def 是不同的。 但計算字串長度的演算法相同。 大部分的程式「相同的邏輯處理不同的資料」和「不同的邏輯處理相同的資料」。 複雜的變化邏輯完全不同。 例如符號積分程式與數學排版程式。 子類別 (Subclass)用一個子類別表現一個維度上的變化。 繼承有些人發現繼承做的就是共用實作的萬靈丹。 繼承的局限 這張牌只能打一次織。 要理解子類別，需先理解超類別。 對超類別的修改充滿風險。 平行的繼承「這個」繼承體系中的子類別都需要「那個」繼承體系的某個子類別。 這是特別糟糕的繼承用法。 關鍵把超類別的邏輯徹底劃分，直到每個方法只做一件事。 但當子類別修改超類別方法時，需檢查兩者隱晦的耦合。 子類別的局限沒辦法表現不斷變化的邏輯，因建立物件時已決定。 如果需要表達邏輯會隨時變化，則條件陳述式或委派更適合。 Chapter 7 行為（下) 邀請性訊息 (Inviting Message)透過發送可採用不同方式實作的訊息，邀請未來的實作變體。 實作如果邏輯存在預設實作，則令其成為訊息的實作。 如果不存在，則令其為抽象方法，以便表達出邀請。 解釋性訊息 (Explaining Message)發送訊息去解釋一段邏輯的意圖。 區別將「意圖」與「實作」區別很重要。 傳達意圖123void highlight(Rectangle area) &#123; reverse(area);&#125; 傳達意圖1flags|= LOADED_BIT; //Set the loaded bit 12345setLoadedFlag();void setLoadedFlag() &#123; flags|= LOADED_BIT;&#125; 溝通未來解釋性訊息有可能成為擴充點， 但主要目的還是更清晰地表達意圖。 例外流 (Exceptional Flow)清晰地表達非尋常的控制流，不干擾主體流的表達。 常見方式 防衛子句 例外 表達意圖當程式存在多條路徑，我們又以相同程度的方式表達，結果就會變得一團亂。 執行了哪些語句要回答這個問題，需要經過一番考古與邏輯學的練習時，我們可以考慮用「防衛子句」和「例外」。 防衛子句 (Guard Clause)透過 early return 來表達局部的例外流。 控制流與 if-then-else 相比，防衛子句表達的是「這裡的控制流比其他地方重要」。 變體在迴圈中的 continue 子句表達：「先別管這個元素，繼續下一個」 例外 (Exception)用例外來表達非局部的例外流。 使用當意識到呼叫堆疊中，有一層發生問題，在發現情況的點拋出例外並捕捉。 設計漏洞優先使用前述的循序、訊息、反覆和條件來表達控制流，當不使用例外會令主體流表達混亂，應使用例外。 已檢查例外 (Checked Exception)透過明確宣告來保證例外被捕獲。 例外的危險當拋出一個錯誤，卻沒有捕捉它時，程式會終止。 解法捕捉例外或者繼續傳播。 代價會讓方法變得複雜，難以閱讀及重構。 例外傳播 (Exception Propagation)根據需要來轉換例外，使其包含的資訊合乎捕獲者的要求。 不知所措捕捉及報告一個低層次的例外，會令沒有預期的人不知所措。 解法用高層次的例外來包裝低層次的例外，剩下的例外資訊輸出到日誌中。 ʕ •ᴥ•ʔ：Thank you","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"如何使用 Cursor 來寫程式","slug":"How-To-Write-Code-With-Cursor","date":"2025-02-22T12:28:53.000Z","updated":"2025-05-30T08:15:23.244Z","comments":true,"path":"2025/02/22/How-To-Write-Code-With-Cursor/","permalink":"https://yncbearz.github.io/2025/02/22/How-To-Write-Code-With-Cursor/","excerpt":"How-To-Write-Code-With-Cursor","text":"Difference between Cursor and other AI相較於以往使用 GitHub Copilot&#x2F;ChatGpt 來寫程式，我認為 Cursor 有以下三個優點： 更了解程式碼的上下文 直接寫出程式碼，甚至可以下 terminal 指令 base 在 vscode 之上，對 vscode 前愛好者來說，轉移的成本很低 兩者最大的不同：AI 是下一個時代的搜尋引擎，而 cursor 是一個 AI editor。 Cursor settings建議調校 cursor 相關設定時，從 vscode 出發，達到使用 vscode sync setting 的好處。 .cursorrules透過設定 cursorrules，可以 cursor 知道專案程式碼的使用情境，例如：使用情境、程式碼的架構、偏好的開發風格等。 可以使用 Cursor Rule Maker 來產生。 AI 傳接球象限 (Ping Quotient)好奇大家都會在下圖的哪一個位置使用 AI 寫程式呢？ 大家可以想看看對應的象限，可能會是什麼樣角色。 第一象限：senior 第四象限：junior 或 剛拿到需求的 senior，或者 PM, Designer 第三象限：新人 第二象限：AI 而這裡是我覺得使用 AI，最適合的傳接球象限： 你得想辦法讓兩個人，都在這個位置，才能夠好好傳接球。 Mindset為了能更好地掌握 cursor，我有三個心態想分享給大家： 盡可能的了解需求與可能要生成的程式碼（包含修改檔案的位置、架構等） 將 cursor 當作新來的同事，描述清楚要作的 task 搭配 ide 作 refactor 相關的工作 Practice - ATDD實作方面，有三個技巧可以分享給大家： 運用 AI Test-Driven Development 的方式開發，先請 cursor 寫測試 將實作的 step 切小，讓 review ai code 更容易 頻繁地 git commit (References) .cursorrules Cursor Rule Maker ʕ •ᴥ•ʔ： cursor + ide + vim 可能是下個極速開發的組合吧！","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"類別圖：動物園管理員（訪問者模式）","slug":"Class-Diagram-ZooKeeper-Visitor-Pattern","date":"2024-09-26T16:27:50.000Z","updated":"2025-07-30T11:30:13.364Z","comments":true,"path":"2024/09/27/Class-Diagram-ZooKeeper-Visitor-Pattern/","permalink":"https://yncbearz.github.io/2024/09/27/Class-Diagram-ZooKeeper-Visitor-Pattern/","excerpt":"Class-Diagram-ZooKeeper-Visitor-Pattern","text":"Example: 動物園管理員 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@startuml Example-ZooKeeper-Visitor-Patterninterface IFeeder &#123; +Feed(Monkey) +Feed(Cow) +Feed(Lion)&#125;class Feeder &#123; +Feed(Monkey) +Feed(Cow) +Feed(Lion)&#125;interface IFeedable &#123; +FeedBy(IFeeder)&#125;class Monkey &#123; +FeedBy(IFeeder)&#125;class Cow &#123; +FeedBy(IFeeder)&#125;class Lion &#123; +FeedBy(IFeeder)&#125;IFeeder &lt;|.. FeederIFeedable &lt;|.. MonkeyIFeedable &lt;|.. CowIFeedable &lt;|.. LionFeeder --&gt; MonkeyFeeder --&gt; CowFeeder --&gt; Lionclass Zoo &#123; +FeedAnimals()&#125;Zoo --&gt; FeederZoo --&gt; IFeedable@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：動物園管理員（訪問者模式）","slug":"Example-ZooKeeper-Visitor-Pattern","date":"2024-09-26T16:13:35.000Z","updated":"2025-05-30T08:15:23.242Z","comments":true,"path":"2024/09/27/Example-ZooKeeper-Visitor-Pattern/","permalink":"https://yncbearz.github.io/2024/09/27/Example-ZooKeeper-Visitor-Pattern/","excerpt":"Example-ZooKeeper-Visitor-Pattern","text":"Pattern: 訪問者模式 Class Diagram: 動物園管理員 這是一間動物園 定義餵食界面 123456namespace DotNetCoreKata.DomainModels.ZooKeeper;public interface IFeedable&#123; void Feed();&#125; 實作猴子 123456789namespace DotNetCoreKata.DomainModels.ZooKeeper;public class Monkey : IFeedable&#123; public void Feed() &#123; Console.WriteLine(&quot;Monkey eats banana&quot;); &#125;&#125; 實作乳牛 123456789namespace DotNetCoreKata.DomainModels.ZooKeeper;public class Cow: IFeedable&#123; public void Feed() &#123; Console.WriteLine(&quot;Cow eats grass&quot;); &#125;&#125; 實作獅子 123456789namespace DotNetCoreKata.DomainModels.ZooKeeper;public class Lion: IFeedable&#123; public void Feed() &#123; Console.WriteLine(&quot;Lion eats meat&quot;); &#125;&#125; 目前的餵食方式 123456789101112131415161718192021using DotNetCoreKata.DomainModels.ZooKeeper;namespace DotNetCoreKata.Services.ZooKeeper;public class Zoo&#123; public void FeedAnimals() &#123; List&lt;IFeedable&gt; animals = [ new Monkey(), new Cow(), new Lion() ]; foreach (var animal in animals) &#123; animal.Feed(); &#125; &#125;&#125; 目前是將要吃什麼的職責交由每個動物各自管理，隨著功能變多，動物類別也會越來越肥大。 讓我們嘗試用訪問者模式改造它，解耦餵食的邏輯。 首先是餵食者的邏輯 (Visitor) 定義餵食者界面 12345678namespace DotNetCoreKata.DomainModels.ZooKeeper;public interface IFeeder&#123; void Feed(Monkey monkey); void Feed(Cow cow); void Feed(Lion lion);&#125; 實作餵食者與動物互動的邏輯 12345678910111213141516171819namespace DotNetCoreKata.DomainModels.ZooKeeper;public class Feeder: IFeeder&#123; public void Feed(Monkey monkey) &#123; Console.WriteLine(&quot;Monkey eats banana&quot;); &#125; public void Feed(Cow cow) &#123; Console.WriteLine(&quot;Cow eats grass&quot;); &#125; public void Feed(Lion lion) &#123; Console.WriteLine(&quot;Lion eats meat&quot;); &#125;&#125; 接著改寫動物的邏輯 (Element) 定義被餵食界面 123456namespace DotNetCoreKata.DomainModels.ZooKeeper;public interface IFeedable&#123; void FeedBy(IFeeder feeder);&#125; 實作猴子 123456789namespace DotNetCoreKata.DomainModels.ZooKeeper;public class Monkey : IFeedable&#123; public void FeedBy(IFeeder feeder) &#123; feeder.Feed(this); &#125;&#125; 實作乳牛 123456789namespace DotNetCoreKata.DomainModels.ZooKeeper;public class Cow : IFeedable&#123; public void FeedBy(IFeeder feeder) &#123; feeder.Feed(this); &#125;&#125; 實作獅子 123456789namespace DotNetCoreKata.DomainModels.ZooKeeper;public class Lion : IFeedable&#123; public void FeedBy(IFeeder feeder) &#123; feeder.Feed(this); &#125;&#125; 註：這邊也可以將三個動物的餵食邏輯放在一起，不過要用到繼承跟調整餵食者的程式嗎。 最後改寫動物園的程式碼 1234567891011121314151617181920212223using DotNetCoreKata.DomainModels.ZooKeeper;namespace DotNetCoreKata.Services.ZooKeeper;public class Zoo&#123; public void FeedAnimals() &#123; List&lt;IFeedable&gt; animals = [ new Monkey(), new Cow(), new Lion() ]; var feeder = new Feeder(); foreach (var animal in animals) &#123; animal.FeedBy(feeder); &#125; &#125;&#125; 現在我們將不同動物的餵食邏輯收斂在餵食者身上，當新增新的動物時，可以修改餵食界面，並實作相關邏輯。 當有新的訪問需求（比如看診），我們也可以依樣畫葫蘆實作被看診界面與看診界面，並實作看診者的邏輯。 ʕ •ᴥ•ʔ：Weija 於讀書會分享這個範例，完全刷新了我之前用 PHP 寫範例的印象。 原來是在支援多型的語言，訪問者模式可以這麼漂亮。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"複雜度守恆定律","slug":"Law-Of-Conversation-Of-Code-Complexity","date":"2024-08-18T09:13:10.000Z","updated":"2025-05-30T08:15:23.248Z","comments":true,"path":"2024/08/18/Law-Of-Conversation-Of-Code-Complexity/","permalink":"https://yncbearz.github.io/2024/08/18/Law-Of-Conversation-Of-Code-Complexity/","excerpt":"Law-Of-Conservation-Of-Code-Complexity","text":"Law Of Conservation Of Code Complexity寫程式一段時間了，相信你一定多少碰過以下的幾種情境： 在重構套用了設計模式後，程式碼沒有變得比較簡單，架構反而變得更加複雜。 兩個軟體工程師討論程式碼時，有時會進入哪種寫法比較複雜的爭論，誰也不服自己的寫法有比較複雜。 前後端分工時，不確定該把某些邏輯放在哪。 以下跟各位分享一個自己領悟出來的定律，也就是複雜度守恆定律！ 還記得前段時間我們討論 S.O.L.I.D 時，有說過遵守單一職責原則時，仰賴的是你切分職責的方式。 當你認為這個檔案不該每次有需求變化時就必須修改（違反開放封閉原則），套用了狀態模式，此時程式碼會從原本單一檔案的複雜攤平成架構層面的複雜。 又或者你使用裝飾者模式、代理模式，來隔離記錄 Log、實作快取等與原本的主程式不相關的邏輯，其實並沒有讓程式碼變得比較簡單 （其他工程師可能還是看不懂）。 但這不表示我們就不該學這些內容，原因是當雙方都對這些概念有些許理解時，你們的大腦便可以快速的轉譯程式碼的內容，進而減少討論與修改的時間。 回到一開始的情境，我們又該如何處理呢？ 推薦幾個我用過的方法（概念來自 Problem Solving）： 傳教：組織讀書會，或適時分享設計模式的範例，讓團隊成員認識這些概念。 進行討論：討論不同寫法時，可以提出幾種需求變更的情境，來討論 Pros &amp; Cons。不要陷在哪種寫法比較複雜的爭論。 適度妥協：有時候並不需要完全偏向某邊，重點在討論的本身，只要事情有往好的方向發展，可以分階段進行。 每個選擇背後都有 trade-off。 ʕ •ᴥ•ʔ：google 後發現 Tesler 有提出另一個複雜度守恆定律，主要在描述交互界面設計的複雜度，該由軟體工程師寫更多的程式碼來降低，還是由客戶花費更多時間來學習，也是相當有趣的觀點。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"}]},{"title":"類別圖：光的三原色 （狀態模式）","slug":"Class-Diagram-RGB-Monitor-State-Pattern","date":"2024-08-18T00:55:57.000Z","updated":"2025-07-30T11:30:13.209Z","comments":true,"path":"2024/08/18/Class-Diagram-RGB-Monitor-State-Pattern/","permalink":"https://yncbearz.github.io/2024/08/18/Class-Diagram-RGB-Monitor-State-Pattern/","excerpt":"Class-Diagram-RGB-Monitor-State-Pattern","text":"Example: 光的三原色 1234567891011121314151617181920212223242526272829303132333435363738394041424344@startumlclass RgbMonitor &#123; -IColorState _state -BlackColorState _blackColorState -RedColorState _redColorState -GreenColorState _greenColorState -BlueColorState _blueColorState -YellowColorState _yellowColorState -MagentaColorState _magentaColorState -CyanColorState _cyanColorState -WhiteColorState _whiteColorState +Color Display() +void TurnOnLight(RgbColor rgbColor) +void TurnOffLight(RgbColor rgbColor) +void ToBlackColorState() +void ToRedColorState() +void ToGreenColorState() +void ToBlueColorState() +void ToYellowColorState() +void ToMagentaColorState() +void ToCyanColorState() +void ToWhiteColorState()&#125;interface IColorState &#123; +Color Display() +void TurnOnRedLight() +void TurnOnGreenLight() +void TurnOnBlueLight() +void TurnOffRedLight() +void TurnOffGreenLight() +void TurnOffBlueLight()&#125;RgbMonitor *-- IColorStateIColorState &lt;|-- BlackColorStateIColorState &lt;|-- RedColorStateIColorState &lt;|-- GreenColorStateIColorState &lt;|-- BlueColorStateIColorState &lt;|-- YellowColorStateIColorState &lt;|-- MagentaColorStateIColorState &lt;|-- CyanColorStateIColorState &lt;|-- WhiteColorState@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：光的三原色（狀態模式）","slug":"Example-RGB-Monitor-State-Pattern","date":"2024-08-16T10:33:01.000Z","updated":"2025-07-30T11:30:13.389Z","comments":true,"path":"2024/08/16/Example-RGB-Monitor-State-Pattern/","permalink":"https://yncbearz.github.io/2024/08/16/Example-RGB-Monitor-State-Pattern/","excerpt":"Example-RGB-Monitor-State-Pattern","text":"Pattern: 狀態模式 Class Diagram: 光的三原色 情境：透過開關紅綠藍三種不同類型的光，我們可以顯示出各種不同的顏色 定義光的三原色的 Enum 12345678namespace DotNetCoreKata.Enums;public enum RgbColor&#123; Red = 1, Green = 2, Blue = 3,&#125; 定義顯示顏色的 Enum 12345678910111213namespace DotNetCoreKata.Enums;public enum Color&#123; Black = 0, Red = 1, Green = 2, Blue = 3, Yellow = 4, Magenta = 5, Cyan = 6, White = 7,&#125; 實作光線組合的邏輯 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.Rgb;public class RgbMonitor&#123; private readonly HashSet&lt;RgbColor&gt; _lights = []; public Color Display() &#123; if (_lights.Count == 3) &#123; return Color.White; &#125; if (_lights.Count == 2) &#123; if (_lights.Contains(RgbColor.Red) &amp;&amp; _lights.Contains(RgbColor.Green)) &#123; return Color.Yellow; &#125; if (_lights.Contains(RgbColor.Red) &amp;&amp; _lights.Contains(RgbColor.Blue)) &#123; return Color.Magenta; &#125; return Color.Cyan; &#125; if (_lights.Count == 1) &#123; return _lights.First() switch &#123; RgbColor.Red =&gt; Color.Red, RgbColor.Green =&gt; Color.Green, RgbColor.Blue =&gt; Color.Blue, _ =&gt; throw new ArgumentOutOfRangeException() &#125;; &#125; return Color.Black; &#125; public void TurnOnLight(RgbColor rgbColor) &#123; _lights.Add(rgbColor); &#125; public void TurnOffLight(RgbColor rgbColor) &#123; _lights.Remove(rgbColor); &#125;&#125; 可以發現上述的程式碼有很多 if&#x2F;else 等的邏輯，讓我們用狀態模式改造它！ Finite-State Machine 首先讓我們畫出有限狀態機 (FSM) 1234567891011121314151617181920212223242526272829303132333435@startumlBlack --&gt; Red : TurnOnRedLightBlack --&gt; Green : TurnOnGreenLightBlack --&gt; Blue : TurnOnBlueLightRed --&gt; Black : TurnOffRedLightRed --&gt; Yellow : TurnOnGreenLightRed --&gt; Magenta : TurnOnBlueLightGreen --&gt; Black : TurnOffGreenLightGreen --&gt; Yellow : TurnOnRedLightGreen --&gt; Cyan : TurnOnBlueLightBlue --&gt; Black : TurnOffBlueLightBlue --&gt; Magenta : TurnOnRedLightBlue --&gt; Cyan : TurnOnGreenLightYellow --&gt; Red : TurnOffGreenLightYellow --&gt; Green : TurnOffRedLightYellow --&gt; White : TurnOnBlueLightMagenta --&gt; Red : TurnOffBlueLightMagenta --&gt; Blue : TurnOffRedLightMagenta --&gt; White : TurnOnGreenLightCyan --&gt; Green : TurnOffBlueLightCyan --&gt; Blue : TurnOffGreenLightCyan --&gt; White : TurnOnRedLightWhite --&gt; Yellow : TurnOffBlueLightWhite --&gt; Magenta : TurnOffGreenLightWhite --&gt; Cyan : TurnOffRedLight@enduml State 定義狀態類別 (State) 首先是顏色狀態的界面 1234567891011121314using DotNetCoreKata.Enums;namespace DotNetCoreKata.DomainModels.Rgb;public interface IColorState&#123; public Color Display(); public void TurnOnRedLight(); public void TurnOnGreenLight(); public void TurnOnBlueLight(); public void TurnOffRedLight(); public void TurnOffGreenLight(); public void TurnOffBlueLight();&#125; 我們將原本 RGB Monitor 開關不同類型的光線，職責切分的更明確，來簡化各個狀態的實作。 實作黑色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;public class BlackColorState(IRgbMonitor rgbMonitor) : IColorState&#123; public Color Display() &#123; return Color.Black; &#125; public void TurnOnRedLight() &#123; rgbMonitor.ToRedColorState(); &#125; public void TurnOnGreenLight() &#123; rgbMonitor.ToGreenColorState(); &#125; public void TurnOnBlueLight() &#123; rgbMonitor.ToBlueColorState(); &#125; public void TurnOffRedLight() &#123; // Do nothing &#125; public void TurnOffGreenLight() &#123; // Do nothing &#125; public void TurnOffBlueLight() &#123; // Do nothing &#125;&#125; 說明一下黑色狀態的實作： Display(): 顯示黑色。 TurnOnRedLight(): 會將當前狀態轉換成紅色狀態。 常見的實作有兩種： 第一種是透過 情境類別 轉換。 第二種是由 狀態類別 直接設置情境類別的當前狀態。差異在是否要讓狀態類別們彼此耦合，這裡選擇第一種。 TurnOnGreenLight()、TurnOnBlueLight() 同理。 TurnOffRedLight(): 因為不會改變當前狀態，所以就不做事。 TurnOffGreenLight()、TurnOffBlueLight() 同理。 實作紅色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;public class RedColorState(IRgbMonitor rgbMonitor) : IColorState&#123; public Color Display() &#123; return Color.Red; &#125; public void TurnOnRedLight() &#123; // Do nothing &#125; public void TurnOnGreenLight() &#123; rgbMonitor.ToYellowColorState(); &#125; public void TurnOnBlueLight() &#123; rgbMonitor.ToMagentaColorState(); &#125; public void TurnOffRedLight() &#123; rgbMonitor.ToBlackColorState(); &#125; public void TurnOffGreenLight() &#123; // Do nothing &#125; public void TurnOffBlueLight() &#123; // Do nothing &#125;&#125; 說明一下紅色狀態的實作： Display(): 顯示紅色。 TurnOnRedLight(): 因為不會改變當前狀態，所以就不做事。 TurnOffGreenLight()、TurnOffBlueLight() 同理。 TurnOnGreenLight(): 這邊很有趣的因為紅光加綠光會顯示黃色，所以要轉換成黃色狀態。 TurnOnBlueLight(): 同理紅光加藍光會顯示洋紅色，所以要轉換成洋紅色狀態。 TurnOffRedLight(): 會將當前狀態轉換成黑色狀態。 接下來就依樣畫葫蘆，將所有的顏色狀態實作出來吧！這邊也可以解釋當初為什麼要將開關不同類型的光線切分出來，狀態的實作會變得相對單純。 下面會依序實作各個狀態類別，如果我們都懂了，可以跳到定義情境類別 (Context)。 實作綠色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;internal class GreenColorState(IRgbMonitor rgbMonitor) : IColorState&#123; public Color Display() &#123; return Color.Green; &#125; public void TurnOnRedLight() &#123; rgbMonitor.ToYellowColorState(); &#125; public void TurnOnGreenLight() &#123; // Do nothing &#125; public void TurnOnBlueLight() &#123; rgbMonitor.ToCyanColorState(); &#125; public void TurnOffRedLight() &#123; // Do nothing &#125; public void TurnOffGreenLight() &#123; rgbMonitor.ToBlackColorState(); &#125; public void TurnOffBlueLight() &#123; // Do nothing &#125;&#125; 實作藍色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;public class BlueColorState(IRgbMonitor rgbMonitor): IColorState&#123; public Color Display() &#123; return Color.Blue; &#125; public void TurnOnRedLight() &#123; rgbMonitor.ToMagentaColorState(); &#125; public void TurnOnGreenLight() &#123; rgbMonitor.ToCyanColorState(); &#125; public void TurnOnBlueLight() &#123; // Do nothing &#125; public void TurnOffRedLight() &#123; // Do nothing &#125; public void TurnOffGreenLight() &#123; // Do nothing &#125; public void TurnOffBlueLight() &#123; rgbMonitor.ToBlackColorState(); &#125;&#125; 實作黃色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;public class YellowColorState(IRgbMonitor rgbMonitor): IColorState&#123; public Color Display() &#123; return Color.Yellow; &#125; public void TurnOnRedLight() &#123; // Do nothing &#125; public void TurnOnGreenLight() &#123; // Do nothing &#125; public void TurnOnBlueLight() &#123; rgbMonitor.ToWhiteColorState(); &#125; public void TurnOffRedLight() &#123; rgbMonitor.ToGreenColorState(); &#125; public void TurnOffGreenLight() &#123; rgbMonitor.ToRedColorState(); &#125; public void TurnOffBlueLight() &#123; // Do nothing &#125;&#125; 實作洋紅色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;public class MagentaColorState(IRgbMonitor rgbMonitor): IColorState&#123; public Color Display() &#123; return Color.Magenta; &#125; public void TurnOnRedLight() &#123; // Do nothing &#125; public void TurnOnGreenLight() &#123; rgbMonitor.ToWhiteColorState(); &#125; public void TurnOnBlueLight() &#123; // Do nothing &#125; public void TurnOffRedLight() &#123; rgbMonitor.ToBlueColorState(); &#125; public void TurnOffGreenLight() &#123; // Do nothing &#125; public void TurnOffBlueLight() &#123; rgbMonitor.ToRedColorState(); &#125;&#125; 實作青色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;public class CyanColorState(IRgbMonitor rgbMonitor): IColorState&#123; public Color Display() &#123; return Color.Cyan; &#125; public void TurnOnRedLight() &#123; rgbMonitor.ToWhiteColorState(); &#125; public void TurnOnGreenLight() &#123; // Do nothing &#125; public void TurnOnBlueLight() &#123; // Do nothing &#125; public void TurnOffRedLight() &#123; // Do nothing &#125; public void TurnOffGreenLight() &#123; rgbMonitor.ToBlueColorState(); &#125; public void TurnOffBlueLight() &#123; rgbMonitor.ToGreenColorState(); &#125;&#125; 實作白色狀態 123456789101112131415161718192021222324252627282930313233343536373839404142using DotNetCoreKata.Enums;using DotNetCoreKata.Services.Rgb;namespace DotNetCoreKata.DomainModels.Rgb;public class WhiteColorState(IRgbMonitor rgbMonitor): IColorState&#123; public Color Display() &#123; return Color.White; &#125; public void TurnOnRedLight() &#123; // Do nothing &#125; public void TurnOnGreenLight() &#123; // Do nothing &#125; public void TurnOnBlueLight() &#123; // Do nothing &#125; public void TurnOffRedLight() &#123; rgbMonitor.ToCyanColorState(); &#125; public void TurnOffGreenLight() &#123; rgbMonitor.ToMagentaColorState(); &#125; public void TurnOffBlueLight() &#123; rgbMonitor.ToYellowColorState(); &#125;&#125; Context 定義情境類別 (Context) 123456789101112131415161718using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.Rgb;public interface IRgbMonitor&#123; Color Display(); void TurnOnLight(RgbColor rgbColor); void TurnOffLight(RgbColor rgbColor); void ToBlackColorState(); void ToRedColorState(); void ToGreenColorState(); void ToBlueColorState(); void ToYellowColorState(); void ToMagentaColorState(); void ToCyanColorState(); void ToWhiteColorState();&#125; 實作 RGB Monitor 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100using DotNetCoreKata.DomainModels;using DotNetCoreKata.DomainModels.Rgb;using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.Rgb;public class RgbMonitor&#123; private IColorState _state; private readonly BlackColorState _blackColorState; private readonly RedColorState _redColorState; private readonly GreenColorState _greenColorState; private readonly BlueColorState _blueColorState; private readonly YellowColorState _yellowColorState; private readonly MagentaColorState _magentaColorState; private readonly CyanColorState _cyanColorState; private readonly WhiteColorState _whiteColorState; public RgbMonitor() &#123; _blackColorState = new BlackColorState(this); _redColorState = new RedColorState(this); _greenColorState = new GreenColorState(this); _blueColorState = new BlueColorState(this); _yellowColorState = new YellowColorState(this); _magentaColorState = new MagentaColorState(this); _cyanColorState = new CyanColorState(this); _whiteColorState = new WhiteColorState(this); _state = _blackColorState; &#125; public Color Display() &#123; return _state.Display(); &#125; public void TurnOnLight(RgbColor rgbColor) &#123; var turnOnColorLightMap = new Dictionary&lt;RgbColor, Action&gt; &#123; &#123;RgbColor.Red, () =&gt; _state.TurnOnRedLight()&#125;, &#123;RgbColor.Green, () =&gt; _state.TurnOnGreenLight()&#125;, &#123;RgbColor.Blue, () =&gt; _state.TurnOnBlueLight()&#125; &#125;; turnOnColorLightMap[rgbColor](); &#125; public void TurnOffLight(RgbColor rgbColor) &#123; var turnOffColorLightMap = new Dictionary&lt;RgbColor, Action&gt; &#123; &#123;RgbColor.Red, () =&gt; _state.TurnOffRedLight()&#125;, &#123;RgbColor.Green, () =&gt; _state.TurnOffGreenLight()&#125;, &#123;RgbColor.Blue, () =&gt; _state.TurnOffBlueLight()&#125; &#125;; turnOffColorLightMap[rgbColor](); &#125; public void ToBlackColorState() &#123; _state = _blackColorState; &#125; public void ToRedColorState() &#123; _state = _redColorState; &#125; public void ToGreenColorState() &#123; _state = _greenColorState; &#125; public void ToBlueColorState() &#123; _state = _blueColorState; &#125; public void ToYellowColorState() &#123; _state = _yellowColorState; &#125; public void ToMagentaColorState() &#123; _state = _magentaColorState; &#125; public void ToCyanColorState() &#123; _state = _cyanColorState; &#125; public void ToWhiteColorState() &#123; _state = _whiteColorState; &#125;&#125; 說明一下 RGB Monitor 的實作： RgbMonitor(): 透過將自身傳入顏色狀態的建構式來初始化各個顏色狀態，這樣之後顏色狀態才能改變到 RGB Monitor 的當前狀態。 設置當前狀態為黑色狀態。 Display(): 透過當前狀態來顯示對應的顏色。 TurnOnLight(): 使用策略模式來呼叫當前狀態對應的方法。 TurnOffLight() 同理。 ToBlackColorState(): 將當前狀態改為黑色狀態 ToRedColorState()、ToGreenColorState() 等同理。 透過使用狀態模式、策略模式等方法，我們讓原本的 if&#x2F;else 邏輯消失，卻也讓原本的結構變得相對複雜，這就是程式碼複雜度守恆定律。 ʕ •ᴥ•ʔ：重讀一次 Design Pattern，改用 C# 來寫範例。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"【摘要】簡報的技術","slug":"Presentation-Techniques","date":"2024-07-28T08:56:31.000Z","updated":"2025-05-30T08:15:23.252Z","comments":true,"path":"2024/07/28/Presentation-Techniques/","permalink":"https://yncbearz.github.io/2024/07/28/Presentation-Techniques/","excerpt":"Password-Protected-Content","text":" Please enter the password to view the content.","categories":[{"name":"Other","slug":"Other","permalink":"https://yncbearz.github.io/categories/Other/"}],"tags":[{"name":"Private Note","slug":"Private-Note","permalink":"https://yncbearz.github.io/tags/Private-Note/"}]},{"title":"類別圖：世紀帝國（抽象工廠模式)","slug":"Class-Diagram-Age-Of-Empires-Abstract-Factory-Pattern","date":"2024-07-08T21:51:25.000Z","updated":"2025-07-30T11:30:13.079Z","comments":true,"path":"2024/07/09/Class-Diagram-Age-Of-Empires-Abstract-Factory-Pattern/","permalink":"https://yncbearz.github.io/2024/07/09/Class-Diagram-Age-Of-Empires-Abstract-Factory-Pattern/","excerpt":"Class-Diagram-Age-Of-Empires-Abstract-Factory-Pattern","text":"Example: 世紀帝國 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980@startumlenum UnitCategory&#123; Unknown Military Archer Knight&#125;interface IWeapon&#123; + Name(): string&#125;interface ITransportation&#123; + Name(): string&#125;interface IUnit&#123; + Attack(): string + Move(): string&#125;class Unit&#123; + Unit(IWeapon weapon, ITransportation transportation) + Attack(): string + Move(): string&#125;IUnit &lt;|.. UnitUnit --&gt; IWeaponUnit --&gt; ITransportationclass Stickclass Bowclass SwordIWeapon &lt;|.. StickIWeapon &lt;|.. BowIWeapon &lt;|.. Swordclass Legsclass HorseITransportation &lt;|.. LegsITransportation &lt;|.. Horseinterface IClient&#123; + Train(UnitCategory unitCategory): IUnit&#125;interface IEquipmentFactory&#123; + CreateWeapon(): IWeapon + CreateTransportation(): ITransportation&#125;IEquipmentFactory --&gt; IWeaponIEquipmentFactory --&gt; ITransportationclass ClientIClient &lt;|.. ClientClient --&gt; MilitiaEquipmentFactoryClient --&gt; ArcherEquipmentFactoryClient --&gt; KnightEquipmentFactoryMilitiaEquipmentFactory ..|&gt; IEquipmentFactoryArcherEquipmentFactory ..|&gt; IEquipmentFactoryKnightEquipmentFactory ..|&gt; IEquipmentFactory@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：世紀帝國（抽象工廠模式)","slug":"Example-Age-Of-Empires-Abstract-Factory-Pattern","date":"2024-07-08T21:44:25.000Z","updated":"2025-05-30T08:15:23.231Z","comments":true,"path":"2024/07/09/Example-Age-Of-Empires-Abstract-Factory-Pattern/","permalink":"https://yncbearz.github.io/2024/07/09/Example-Age-Of-Empires-Abstract-Factory-Pattern/","excerpt":"Example-Age-Of-Empires-Abstract-Factory-Pattern","text":"Pattern: 抽象工廠模式 Class Diagram: 世紀帝國 情境：根據用戶端對兵種的需求，我們要生產對應的軍事單位 這邊我們省略軍事單位的定義。可參考範例：世紀帝國（簡單工廠模式)。 定義裝備工廠 12345678910using DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;using DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;namespace DotNetCoreKata.DomainModels;public interface IEquipmentFactory&#123; IWeapon CreateWeapon(); ITransportation CreateTransportation();&#125; 定義民兵裝備工廠 1234567891011121314151617using DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;using DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public class MilitiaEquipmentFactory : IEquipmentFactory&#123; public ITransportation CreateTransportation() &#123; return new Legs(); &#125; public IWeapon CreateWeapon() &#123; return new Stick(); &#125;&#125; 定義弓兵裝備工廠 12345678910111213141516using DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;using DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public class ArcherEquipmentFactory: IEquipmentFactory&#123; public IWeapon CreateWeapon() &#123; return new Bow(); &#125; public ITransportation CreateTransportation() &#123; return new Legs(); &#125;&#125; 定義騎士裝備工廠 1234567891011121314151617using DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;using DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public class KnightEquipmentFactory : IEquipmentFactory&#123; public ITransportation CreateTransportation() &#123; return new Horse(); &#125; public IWeapon CreateWeapon() &#123; return new Sword(); &#125;&#125; 客戶端 1234567891011121314151617181920212223using DotNetCoreKata.DomainModels;using DotNetCoreKata.DomainModels.AgeOfEmpires;using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.AgeOfEmpires;public class Client : IClient&#123; public IUnit Train(UnitCategory unitCategory) &#123; Console.Write($&quot;Ask resources to build unit: &#123;unitCategory&#125;.&quot;); IEquipmentFactory equipmentFactory = unitCategory switch &#123; UnitCategory.Military =&gt; new MilitiaEquipmentFactory(), UnitCategory.Archer =&gt; new ArcherEquipmentFactory(), UnitCategory.Knight =&gt; new KnightEquipmentFactory(), _ =&gt; new MilitiaEquipmentFactory() &#125;; return new Unit(equipmentFactory.CreateWeapon(), equipmentFactory.CreateTransportation()); &#125;&#125; ʕ •ᴥ•ʔ：重讀一次 Design Pattern，改用 C# 來寫範例。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"類別圖：世紀帝國（工廠方法模式)","slug":"Class-Diagram-Age-Of-Empires-Factory-Method-Pattern","date":"2024-07-08T20:15:25.000Z","updated":"2025-07-30T11:29:42.335Z","comments":true,"path":"2024/07/09/Class-Diagram-Age-Of-Empires-Factory-Method-Pattern/","permalink":"https://yncbearz.github.io/2024/07/09/Class-Diagram-Age-Of-Empires-Factory-Method-Pattern/","excerpt":"Class-Diagram-Age-Of-Empires-Factory-Method-Pattern","text":"Example: 世紀帝國 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384@startumlenum UnitCategory&#123; Unknown Military Archer Knight&#125;interface IWeapon&#123; + Name(): string&#125;interface ITransportation&#123; + Name(): string&#125;interface IUnit&#123; + Attack(): string + Move(): string&#125;class Unit&#123; + Unit(IWeapon weapon, ITransportation transportation) + Attack(): string + Move(): string&#125;IUnit &lt;|.. UnitUnit --&gt; IWeaponUnit --&gt; ITransportationclass Stickclass Bowclass SwordIWeapon &lt;|.. StickIWeapon &lt;|.. BowIWeapon &lt;|.. Swordclass Legsclass HorseITransportation &lt;|.. LegsITransportation &lt;|.. Horseinterface IClient&#123; + Train(UnitCategory unitCategory): IUnit&#125;class ClientIClient &lt;|.. ClientClient --&gt; BarracksClient --&gt; ArcheryRangeClient --&gt; Stableclass Barracks&#123; + Create(): IUnit&#125;class ArcheryRange&#123; + Create(): IUnit&#125;class Stable&#123; + Create(): IUnit&#125;Barracks --&gt; IUnitArcheryRange --&gt; IUnitStable --&gt; IUnit@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：世紀帝國（工廠方法模式)","slug":"Example-Age-Of-Empires-Factory-Method-Pattern","date":"2024-07-08T19:53:25.000Z","updated":"2025-05-30T08:15:23.231Z","comments":true,"path":"2024/07/09/Example-Age-Of-Empires-Factory-Method-Pattern/","permalink":"https://yncbearz.github.io/2024/07/09/Example-Age-Of-Empires-Factory-Method-Pattern/","excerpt":"Example-Age-Of-Empires-Factory-Method-Pattern","text":"Pattern: 工廠方法模式 Class Diagram: 世紀帝國 情境：根據用戶端對兵種的需求，我們要生產對應的軍事單位 這邊我們省略軍事單位的定義。可參考範例：世紀帝國（簡單工廠模式)。 定義軍營（用來生產民兵） 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public static class Barracks&#123; public static IUnit Create() &#123; return new Unit(new Stick(), new Legs()); &#125;&#125; 定義射箭場（用來生產弓兵） 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public static class ArcheryRange&#123; public static IUnit Create() &#123; return new Unit(new Bow(), new Legs()); &#125;&#125; 定義馬廄（用來生產騎士） 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public static class Stable&#123; public static IUnit Create() &#123; return new Unit(new Sword(), new Horse()); &#125;&#125; 客戶端 123456789101112131415161718192021using DotNetCoreKata.DomainModels.AgeOfEmpires;using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.AgeOfEmpires;public class Client&#123; public IUnit Train(UnitCategory unitCategory) &#123; Console.Write($&quot;Ask resources to build unit: &#123;unitCategory&#125;.&quot;); return unitCategory switch &#123; UnitCategory.Military =&gt; Barracks.Create(), UnitCategory.Archer =&gt; ArcheryRange.Create(), UnitCategory.Knight =&gt; Stable.Create(), _ =&gt; Barracks.Create() &#125;; &#125;&#125; ʕ •ᴥ•ʔ：重讀一次 Design Pattern，改用 C# 來寫範例。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"類別圖：世紀帝國（簡單工廠模式)","slug":"Class-Diagram-Age-Of-Empires-Simple-Factory-Pattern","date":"2024-06-18T15:43:25.000Z","updated":"2025-07-30T11:30:13.094Z","comments":true,"path":"2024/06/18/Class-Diagram-Age-Of-Empires-Simple-Factory-Pattern/","permalink":"https://yncbearz.github.io/2024/06/18/Class-Diagram-Age-Of-Empires-Simple-Factory-Pattern/","excerpt":"Class-Diagram-Age-Of-Empires-Simple-Factory-Pattern","text":"Example: 世紀帝國 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970@startumlenum UnitCategory&#123; Unknown Military Archer Knight&#125;interface IWeapon&#123; + Name(): string&#125;interface ITransportation&#123; + Name(): string&#125;interface IUnit&#123; + Attack(): string + Move(): string&#125;class Unit&#123; + Unit(IWeapon weapon, ITransportation transportation) + Attack(): string + Move(): string&#125;IUnit &lt;|.. UnitUnit --&gt; IWeaponUnit --&gt; ITransportationclass Stickclass Bowclass SwordIWeapon &lt;|.. StickIWeapon &lt;|.. BowIWeapon &lt;|.. Swordclass Legsclass HorseITransportation &lt;|.. LegsITransportation &lt;|.. Horseinterface IClient&#123; + Train(UnitCategory unitCategory): IUnit&#125;class ClientIClient &lt;|.. ClientClient --&gt; TrainingCenterclass TrainingCenter&#123; + Create(UnitCategory unitCategory): IUnit&#125;TrainingCenter --&gt; IUnit@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：世紀帝國（簡單工廠模式)","slug":"Example-Age-Of-Empires-Simple-Factory-Pattern","date":"2024-06-16T09:26:25.000Z","updated":"2025-05-30T08:15:23.232Z","comments":true,"path":"2024/06/16/Example-Age-Of-Empires-Simple-Factory-Pattern/","permalink":"https://yncbearz.github.io/2024/06/16/Example-Age-Of-Empires-Simple-Factory-Pattern/","excerpt":"Example-Age-Of-Empires-Simple-Factory-Pattern","text":"Pattern: 簡單工廠模式 Class Diagram: 世紀帝國 情境：根據用戶端對兵種的需求，我們要生產對應的軍事單位 定義兵種類型 123456789namespace DotNetCoreKata.Enums;public enum UnitCategory&#123; Unknown = 0, Military = 1, Archer = 2, Knight = 3,&#125; 兵種有民兵、弓兵及騎士三種類型。 定義軍事單位 1234567namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public interface IUnit&#123; string Attack(); string Move();&#125; 1234567891011121314151617using DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;using DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public class Unit(IWeapon weapon, ITransportation transportation) : IUnit&#123; public string Attack() &#123; return $&quot;attacks with &#123;weapon.Name()&#125;&quot;; &#125; public string Move() &#123; return $&quot;moves using &#123;transportation.Mode()&#125;&quot;; &#125;&#125; 軍事單位會使用武器進攻，用對應的移動方式移動。 定義武器 123456namespace DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;public interface IWeapon&#123; string Name();&#125; 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;public class Stick : IWeapon&#123; public string Name() &#123; return &quot;stick&quot;; &#125;&#125; 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;public class Bow : IWeapon&#123; public string Name() &#123; return &quot;bow&quot;; &#125;&#125; 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;public class Sword : IWeapon&#123; public string Name() &#123; return &quot;sword&quot;; &#125;&#125; 武器有木棒、弓箭及長劍。 定義移動方式 123456namespace DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;public interface ITransportation&#123; string Mode();&#125; 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;public class Legs : ITransportation&#123; public string Mode() &#123; return &quot;legs&quot;; &#125;&#125; 123456789namespace DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;public class Horse : ITransportation&#123; public string Mode() &#123; return &quot;horse&quot;; &#125;&#125; 客戶端 123456789using DotNetCoreKata.DomainModels.AgeOfEmpires;using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.AgeOfEmpires;public interface IClient&#123; IUnit Train(UnitCategory unitCategory);&#125; 123456789101112131415161718192021222324252627using DotNetCoreKata.DomainModels.AgeOfEmpires;using DotNetCoreKata.DomainModels.AgeOfEmpires.Transportation;using DotNetCoreKata.DomainModels.AgeOfEmpires.Weapon;using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.AgeOfEmpires;public class Client : IClient&#123; public IUnit Train(UnitCategory unitCategory) &#123; Console.Write($&quot;Ask resources to build unit: &#123;unitCategory&#125;.&quot;); if (unitCategory == UnitCategory.Military) &#123; return new Unit(new Stick(), new Legs()); &#125; else if (unitCategory == UnitCategory.Archer) &#123; return new Unit(new Bow(), new Legs()); &#125; else &#123; return new Unit(new Sword(), new Horse()); &#125; &#125;&#125; 使用簡單工廠模式改造 新增簡單工廠，將創建軍事單位的邏輯從客戶端抽離 1234567891011121314151617using DotNetCoreKata.Enums;namespace DotNetCoreKata.DomainModels.AgeOfEmpires;public static class TrainingCenter&#123; public static IUnit Create(UnitCategory unitCategory) &#123; return unitCategory switch &#123; UnitCategory.Military =&gt; new Unit(new Stick(), new Legs()), UnitCategory.Archer =&gt; new Unit(new Bow(), new Legs()), UnitCategory.Knight =&gt; new Unit(new Sword(), new Horse()), _ =&gt; new Unit(new Stick(), new Legs()) &#125;; &#125;&#125; 修改原本客戶端的程式 1234567891011121314using DotNetCoreKata.DomainModels.AgeOfEmpires;using DotNetCoreKata.Enums;namespace DotNetCoreKata.Services.AgeOfEmpires;public class Client&#123; public IUnit Train(UnitCategory unitCategory) &#123; Console.Write($&quot;Ask resources to build unit: &#123;unitCategory&#125;.&quot;); return TrainingCenter.Create(unitCategory); &#125;&#125; [單一職責原則]我們將 創建類別 (Creator) 與 產品類別 (Product) 視作兩種不同的職責。 [開放封閉原則] 當新增新的產品時，我們僅需新增產品類別及修改創建類別。 當修改既有產品時，我們僅需修改其產品類別及創建類別，不會影響到其他的產品類別。 無論是新增&#x2F;修改產品，我們都不用再去修改到客戶端 (Client) 。 [依賴反轉原則] 運輸類別依賴抽象的機型介面。 產品類別實作抽象的機型介面。 透過簡單工廠模式，客戶端減少了改變的機會，但創建類別依然常常需要變更。 ʕ •ᴥ•ʔ：重讀一次 Design Pattern，改用 C# 來寫範例。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"常見 MSSQL 語法","slug":"Common-MSSQL-Syntax","date":"2024-05-20T08:49:03.000Z","updated":"2025-05-30T08:15:23.227Z","comments":true,"path":"2024/05/20/Common-MSSQL-Syntax/","permalink":"https://yncbearz.github.io/2024/05/20/Common-MSSQL-Syntax/","excerpt":"Common-MSSQL-Syntax","text":"(參考MSSQL) Menu Type CRUD — — Index Read — — Schema Read — — Plan Read — — Rank Rank — — Read Index1234567891011121314151617SELECT i.name AS index_name ,i.type_desc ,is_unique ,ds.type_desc AS filegroup_or_partition_scheme ,ds.name AS filegroup_or_partition_scheme_name ,ignore_dup_key ,is_primary_key ,is_unique_constraint ,fill_factor ,is_padded ,is_disabled ,allow_row_locks ,allow_page_locksFROM sys.indexes AS i with (nolock)INNER JOIN sys.data_spaces AS ds ON i.data_space_id = ds.data_space_idWHERE is_hypothetical = 0 AND i.index_id &lt;&gt; 0AND i.object_id = OBJECT_ID(&#x27;tabel_name&#x27;); (Back to Menu) Read Schema123select *from INFORMATION_SCHEMA.COLUMNSwhere TABLE_NAME=&#x27;table_name&#x27; (Back to Menu) Read Plan12345678SELECT q.text AS QueryText, cp.usecounts, p.query_planFROM sys.dm_exec_cached_plans AS cp with (nolock)CROSS APPLY sys.dm_exec_sql_text(cp.plan_handle) AS qCROSS APPLY sys.dm_exec_query_plan(cp.plan_handle) AS pWHERE q.text LIKE &#x27;%stored_procedure_name%&#x27;; (Back to Menu) Rank Schema123456789101112131415161718192021WITH CurrencyTotal AS ( SELECT c.CurrencyId, tl.CustomerId, SUM(tl.Amount) AS TotalAmount FROM [Customer] c WITH (nolock) JOIN [TransLog] tl ON tl.CustomerId = c.CustomerId GROUP BY c.CurrencyId, tl.CustomerId)SELECT CurrencyId, CustomerId, TotalAmount, RANK() OVER (PARTITION BY CurrencyId ORDER BY TotalAmount DESC) AS RankingFROM CurrencyTotal; (Back to Menu) ʕ •ᴥ•ʔ：記錄一些常見語法，需要時方便查詢。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://yncbearz.github.io/tags/SQL/"}]},{"title":"CI/CD","slug":"Continuous-Integration-Continuous-Deployment","date":"2024-05-06T14:35:47.000Z","updated":"2025-05-30T08:15:23.229Z","comments":true,"path":"2024/05/06/Continuous-Integration-Continuous-Deployment/","permalink":"https://yncbearz.github.io/2024/05/06/Continuous-Integration-Continuous-Deployment/","excerpt":"Continuous-Integration-Continuous-Deployment","text":"DockerFileDockerFile 是用來建立 Docker image 的檔案。 GitLab CIGitLab CI 是 GitLab 的 CI&#x2F;CD 工具，允許定義和運行自動化測試和部署管道。 您可以在 repository 中配置 .gitlab-ci.yml 檔案來定義 CI&#x2F;CD 流程，並使用選定的 runner 來執行這些流程。 Argo CDArgo CD 是一個用於 Kubernetes 的持續部署 (CD) 工具，它能夠自動化應用程式部署到 Kubernetes 集群中。 Argo CD 通過監控 git repository 中的定義文件 (例如 YAML 檔案) 並將其同步到 Kubernetes 集群來實現部署。 Kubernetes YAMLKubernetes YAML 檔案包含了 Kubernetes 資源的定義，例如 Pod、Service、Deployment 等。 它們描述了應用程式在 Kubernetes 集群中的配置和部署方式。 Example利用 .gitlab-ci.yml 定義 build, test, deploy 等各個階段。 build: 利用 DockerFile 將 image 建立並推到 registry test: 執行 unit test &amp; integration tets deploy: 將 k8s yaml 推到 release repository 最後由 Argo CD 監聽 release repository 的變化，使用 k8s yaml 部署上去。 ʕ •ᴥ•ʔ：稍微整理一下相關的概念！感謝 Kyo 的解惑。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"C# 的非同步設計","slug":"Csharp-Async-Scenarios","date":"2024-04-09T14:18:00.000Z","updated":"2025-05-30T08:15:23.229Z","comments":true,"path":"2024/04/09/Csharp-Async-Scenarios/","permalink":"https://yncbearz.github.io/2024/04/09/Csharp-Async-Scenarios/","excerpt":"Csharp-Async-Scenarios","text":"前言從 PHP 轉到 C# 的世界一年多，對非同步設計不太理解，索性整理一下。 非同步觀念釐清 非同步不等於多執行緒（線程），只是減少等待時間。 非同步能增加 I&#x2F;O bound 的產能（等待時間作其他事），但對 CPU bound 沒有幫助。 在 CPU bound 的情況下可以使用 Task.Run 讓方法調用執行緒（線程）新的在背景執行。 在 I&#x2F;O bound 的情況下，則不該使用 Task.Run。 (Reference.) 非同步程式設計案例 [隨手記] 再談異步: C# 裡的協程與多線程 ASP.NET async 基本心法 ʕ •ᴥ•ʔ：整理一下 C# 的非同步案例。感謝 Tintin 分享關於 thread 的細節。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"越南之旅@2024","slug":"Vietnam-Trip-2024","date":"2024-03-29T08:45:05.000Z","updated":"2025-05-30T08:15:23.258Z","comments":true,"path":"2024/03/29/Vietnam-Trip-2024/","permalink":"https://yncbearz.github.io/2024/03/29/Vietnam-Trip-2024/","excerpt":"Password-Protected-Content","text":" Please enter the password to view the content.","categories":[{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"With TM","slug":"With-TM","permalink":"https://yncbearz.github.io/tags/With-TM/"}]},{"title":"Kubernetes","slug":"Kubernetes","date":"2023-11-28T15:08:03.000Z","updated":"2025-05-30T08:15:23.247Z","comments":true,"path":"2023/11/28/Kubernetes/","permalink":"https://yncbearz.github.io/2023/11/28/Kubernetes/","excerpt":"Kubernetes","text":"Instructions CKAD 1source &lt;(kubectl completion bash) 12alias k=kubectlcomplete -o default -F __start_kubectl k minikube start for wsl 1minikube start 設定 Windows Path 方便定位 1echo &#x27;export WINDOWS=/mnt/c/Users/$&#123;USER&#125;/&#x27; &gt;&gt; ~/.bashrc 1cd $WINDOWS Terminal Basic Ctrl + z: 讓前台指令移轉至後台並處於暫停的狀態 12# 顯示所有運行的程式jobs -l 12# 將後台所有暫停的指令執行bg 12# 將後台暫停的指令執行bg %$&#123;JOB_NUMBER&#125; 12# 將後台所有的指令移轉至前台fg 12# 將後台指令移轉至前台fg %$&#123;JOB_NUMBER&#125; 12# 移除特定指令kill %$&#123;JOB_NUMBER&#125; 於指令末端加入 &amp; ，便可以直接在背景執行 Namespace Create Namespace 1k create namespace practice-231216 Change Namespace for all subsequent commands 1k config set-context --current --namespace=practice-231216 確認有成功改變 Namespace 1k config view --minify | grep namespace: Pod pod.yaml via vim 123456789101112apiVersion: v1kind: Podmetadata: name: nginx-231204 labels: hour: 15spec: containers: - name: nginx image: nginx:1.14.2 ports: - containerPort: 80 pod.yaml via dry-run 1kubectl run nginx --image=nginx:1.14.2 --dry-run=client -o yaml &gt; pod.yaml Apply 1k apply -f pod.yaml Get Pods 1k get pods 1k get pods --show-labels 1k get pods -l hour=15 列出所有 Pods 的詳細訊息 1k get pods -o json 透過上面得到的 json 欄位來作 filter 1k get pods --field-selector=status.phase=Succeeded 透過 filter 出來的 json 配置文件來刪除對應的 pod 1k get pods --field-selector=status.phase=Succeeded -o json | k delete -f - 取出 traefik deployment 中 livenessProbe 內容 1k get deploy traefik -o jsonpath=&#x27;&#123;.spec.template.spec.containers[*].livenessProbe&#125;&#x27; 刪除某種類型的 Pods 1k delete pod --field-selector=status.phase=Succeeded 1k delete pods -l app=web-crawler 1k delete pod --field-selector=status.phase=Succeeded -l app=klikbca-crawler Debug Running Pods 1k describe pod $&#123;POD_NAME&#125; Event 1k get events 1k get events --sort-by=.lastTimestamp Port forward 1k port-forward pod/$&#123;POD_NAME&#125; &lt;local-port&gt;:&lt;container-port&gt; (Note.) nginx 跑在 80 port 在WSL中，某些低於 1024 的 port 可能需要 root(sudo) 權限 Execute in Pod 1k exec -it $&#123;POD_NAME&#125; -- bash 1echo &#x27;Hello Bear&#x27; &gt; /usr/share/nginx/html/index.html Pod log 1k logs -f $&#123;POD_NAME&#125; -c $&#123;CONTAINER_NAME&#125; --tail=5 --timestamps (Note.) -f, –follow : 即時跟蹤 log 的變化。 –tail : 顯示顯示數量的最後幾行。 –timestamps : 顯示 timestamp。 Delete Pod 1k delete pod $&#123;POD_NAME&#125; Label for Pod via CLI 1k label pod $&#123;POD_NAME&#125; $&#123;KEY&#125;=$&#123;VALUE&#125; Label for Pod via vim 1k edit pod $&#123;POD_NAME&#125; 確認有成功上 Label 1k get pods --show-labels Remove Label 1k label pod $&#123;POD_NAME&#125; $&#123;KEY&#125;- Debug skill (use bash) 1k run foobar --rm -it --image=busybox -- bash (Note.) –rm: 執行結束後刪除 Top 可以用來看 resource CPU&#x2F;memory 1k top node 1k top pod Volume Create nginx-volume.yaml 1k run nginx-volume --image=nginx:1.16 --dry-run=client -o yaml &gt; nginx-volume.yaml 123456789101112131415apiVersion: v2kind: Podmetadata: creationTimestamp: null labels: run: nginx-volume name: nginx-volumespec: containers: - image: nginx:1.16 name: nginx-volume resources: &#123;&#125; dnsPolicy: ClusterFirst restartPolicy: Alwaysstatus: &#123;&#125; Add volume settings 1 Service1k expose deployment nginx-deployment-15 --port=81 --target-port=80 --protocol=TCP --name=rover --type=NodePort -o yaml --dry-run=client &gt; rover.yaml (Note.) 若直接 create service，需手動寫好 label 來關聯 deployment!!! Secret Create secret.yaml 1k create secret generic --from-literal=key1=value2 -h --dry-run=client -o yaml &gt; another-secret.yaml Apply 1k apply -f another-secret.yaml Create nginx-secret.yaml 1k run nginx-secret --image=nginx:1.16 --dry-run=client -o yaml &gt; nginx-secret.yaml 123456789101112131415apiVersion: v1kind: Podmetadata: creationTimestamp: null labels: run: nginx-secret name: nginx-secretspec: containers: - image: nginx:1.16 name: nginx-secret resources: &#123;&#125; dnsPolicy: ClusterFirst restartPolicy: Alwaysstatus: &#123;&#125; Add secret settings (env &amp; secret KeyRef) 123456789101112131415161718192021apiVersion: v1kind: Podmetadata: creationTimestamp: null labels: run: nginx-secret name: nginx-secretspec: containers: - image: nginx:1.16 name: nginx-secret resources: &#123;&#125; env: - name: COOL_VARIABLE valueFrom: secretKeyRef: name: another-secret key: key1 dnsPolicy: ClusterFirst restartPolicy: Alwaysstatus: &#123;&#125; ConfigMap Create configmap.yaml 1k create configmap some-config --from-literal=key3=value4 --dry-run=client -o yaml &gt; some-config.yaml Apply 1k apply -f some-config.yaml Create nginx-configmap.yaml 1k run nginx-configmap --image=nginx:stable --dry-run=client -o yaml &gt; nginx-configmap.yaml 123456789101112131415apiVersion: v1kind: Podmetadata: creationTimestamp: null labels: run: nginx-configmap name: nginx-configmapspec: containers: - image: nginx:stable name: nginx-configmap resources: &#123;&#125; dnsPolicy: ClusterFirst restartPolicy: Alwaysstatus: &#123;&#125; Add configmap settings (volumeMounts &amp; volumes) 1234567891011121314151617181920212223apiVersion: v1kind: Podmetadata: creationTimestamp: null labels: run: nginx-configmap name: nginx-configmapspec: containers: - image: nginx:stable name: nginx-configmap resources: &#123;&#125; volumeMounts: - name: some-config mountPath: &quot;/some/path&quot; readOnly: true dnsPolicy: ClusterFirst restartPolicy: Always volumes: - name: some-config configMap: name: some-configstatus: &#123;&#125; Deployment DaemonSet StatefulSet 建立 redis cluster 為例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110apiVersion: v1kind: ConfigMapmetadata: name: mario-redis-cluster-config namespace: mariodata: redis.conf: | appendonly yes cluster-enabled yes cluster-config-file /var/lib/redis/nodes.conf dir /var/lib/redis port 6379---apiVersion: v1kind: Servicemetadata: name: mario-redis-headless-server namespace: mario labels: app: redis-cluster-appspec: ports: - name: redis-port port: 6379 clusterIP: None selector: app: redis-cluster-app---apiVersion: apps/v1kind: StatefulSetmetadata: name: mario-redis-app namespace: mariospec: selector: matchLabels: app: redis-cluster-app serviceName: &quot;mario-redis-headless-server&quot; replicas: 6 template: metadata: labels: app: redis-cluster-app spec: dnsConfig: options: - name: ndots value: &quot;1&quot; containers: - name: redis image: &quot;redis:6.0.9-alpine&quot; env: - name: MY_POD_IP valueFrom: fieldRef: fieldPath: status.podIP command: [ &quot;redis-server&quot; ] args: [ &quot;/etc/redis/redis.conf&quot;, &quot;--protected-mode&quot;, &quot;no&quot;, &quot;--cluster-announce-ip&quot;, &quot;$(MY_POD_IP)&quot; ] ports: - name: redis containerPort: 6379 protocol: &quot;TCP&quot; - name: cluster containerPort: 16379 protocol: &quot;TCP&quot; volumeMounts: - name: &quot;redis-conf&quot; mountPath: &quot;/etc/redis&quot; - name: &quot;redis-data&quot; mountPath: &quot;/var/lib/redis&quot; resources: limits: cpu: &quot;50m&quot; memory: &quot;100Mi&quot; requests: cpu: &quot;20m&quot; memory: &quot;50Mi&quot; volumes: - name: &quot;redis-data&quot; emptyDir: &#123;&#125; - name: &quot;redis-conf&quot; configMap: name: &quot;mario-redis-cluster-config&quot; items: - key: &quot;redis.conf&quot; path: &quot;redis.conf&quot; volumeClaimTemplates: - metadata: name: redis-data spec: accessModes: [ &quot;ReadWriteOnce&quot; ] resources: requests: storage: 1Gi---apiVersion: v1kind: Servicemetadata: name: mario-redis-service namespace: mario labels: app: redis-cluster-appspec: ports: - name: redis-port protocol: &quot;TCP&quot; port: 6379 targetPort: 6379 selector: app: redis-cluster-app 創建 redis cluster 關係 取得各個 redis pod 的 ip 1k get pods -l app=redis-cluster-app -o jsonpath=&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#123;end&#125;&#x27; 建立 redis cluster 1k exec -it mario-redis-app-0 -- redis-cli --cluster create --cluster-replicas 1 &#123;填上上面指令取得的 IP&#125; 解除 redis cluster 關係 解除所有節點的 Cluster 關係 12345for ($i=0; $i&lt;6; $i++)&#123; Write-Host &quot;Resetting mario-redis-app-$i&quot; kubectl exec -it &quot;mario-redis-app-$i&quot; -- redis-cli CLUSTER RESET&#125; 查看 redis cluster 關係1k exec -it mario-redis-app-0 -- redis-cli cluster nodes 1k exec -it mario-redis-app-0 -- redis-cli -c JobCronJob Rollout &amp; Rollback 指令都是 rollout 查看 history 1k rollout history deployment webapp 回滾前版本 1k rollout undo deployment webapp Pod Lifecycle Probe IngressClassIngress GatewayClassGateway Affinity &amp; Anti-Affinity RBACRole1k create role roleForList -o yaml --dry-run=client --verb=list --resource=pod -n default 12345678910111213apiVersion: rbac.authorization.k8s.io/v1kind: Rolemetadata: creationTimestamp: null name: pod-reader namespace: defaultrules:- apiGroups: - &quot;&quot; resources: - pods verbs: - list RoleBinding1k create rolebinding pod-reader-binding --role=pod-reader --dry-run=client -o yaml -n dev --serviceaccount=dev:sa 1234567891011121314apiVersion: rbac.authorization.k8s.io/v1kind: RoleBindingmetadata: creationTimestamp: null name: pod-reader-binding namespace: devroleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: pod-readersubjects:- kind: ServiceAccount name: sa namespace: dev Scale1k scale deployment webapp --replicas=2 Redeploy1k rollout restart deployment webapp OthersExplain Explain 來看 yaml 結構 1k explain job 1k explain job.spec 1k explain pod.spec.containers.resources.requests Kubernetes Local Install kubectl 1scoop install kubectl Download Kubernetes Cluster token from Rancher Put them to a separated folder and explore by command 1kubectl get pod -n b2c-payment --kubeconfig=&#x27;D:/k8s-certs/k8s-stg.yaml&#x27; Easy way to switch between different clusters via wsl bash 1wsl 1KUBECONFIG=./host-uat-gke.yaml:./host-prod-gke.yaml:./host-staging-gke.yaml:./k8s-prod-backup.yaml:./k8s-prod.yaml:./k8s-stg.yaml:./mt-host-prod.yaml:./mt-host-stag-gke.yaml kubectl config view --flatten &gt; config Put the outputed file config to ~&#x2F;.kube Restart your Powershell and type command 12kubectl config use-context k8s-stgkubectl get pod -n b2c-payment Install kubectx and fzf for fast switching 12scoop install kubectxscoop install fzf 1kubectx Switch between namespaces (by kubectl) 1kubectl config set-context k8s-stg --namespace=$&#123;NAMESPACE&#125; Switch between namespaces (by kubens) 1scoop install kubens 1kubens $&#123;NAMESPACE&#125; Set Alais 12Set-Alias k kubectlSet-Alias kx kubectx Auto Completion 12# Enable kubectl autocompletion with alias k(kubectl completion powershell) -replace &quot;&#x27;kubectl&#x27;&quot;, &quot;&#x27;k&#x27;&quot; | Out-String | Invoke-Expression (Reference.) Kubernetes Documentation Kubernetes Adoption Hands On CKAD 題庫詳解 ʕ •ᴥ•ʔ：上完 CKAD 的課程後，對相關的概念更熟悉了！","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"關山之旅@2023","slug":"GuanShan-Trip-2023","date":"2023-10-23T07:13:26.000Z","updated":"2025-05-30T08:15:23.243Z","comments":true,"path":"2023/10/23/GuanShan-Trip-2023/","permalink":"https://yncbearz.github.io/2023/10/23/GuanShan-Trip-2023/","excerpt":"Password-Protected-Content","text":" Please enter the password to view the content.","categories":[{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"With TM","slug":"With-TM","permalink":"https://yncbearz.github.io/tags/With-TM/"}]},{"title":"如何使用 Hexo 來寫部落格","slug":"How-To-Create-Blog-With-Hexo","date":"2023-08-15T02:28:53.000Z","updated":"2025-05-30T08:15:23.244Z","comments":true,"path":"2023/08/15/How-To-Create-Blog-With-Hexo/","permalink":"https://yncbearz.github.io/2023/08/15/How-To-Create-Blog-With-Hexo/","excerpt":"How-To-Create-Blog-With-Hexo","text":"Step 1: 環境準備 Installing Node.js (Should be at least Node.js 10.13, recommends 12.0 or higher) Git 如果使用的是 windows 系統，可參考之前寫的Windows 套件管理工具 Scoop來安裝。 Step 2: 安裝 Hexo 並建立資料夾 1npm install -g hexo-cli 123hexo init blogcd blognpm install Step 3: 試著啟動看看吧 1hexo server -o 你應該可以看到一個很簡單的部落格界面，讓我們簡單認識一下其中的結構。 _config.yml: 網站的配置檔案。 scaffolds: 鷹架資料夾，可以讓你快速產生文章的樣板。 source: 原始檔案的存放位置。 themes: 主題資料夾。 Step 4: 選擇一個自己喜歡的主題並安裝 讓我們開啟 _config.yml 找到 theme 的設定，可以發現剛剛套用的是名叫 landscape 的主題。 我們可以透過Hexo Themes來選擇自己喜歡的主題。 以下推薦幾個比較常見的主題： next: 本文示範用的主題，最多工程師使用的主題之一，也因此有最多的 plugin 可以安裝。 hueman: 筆者使用的主題，覺得相當好看。 fluid: 撰寫文章時，意外發現也不錯的主題。 icarus: 與 hueman 為同一名作者。 12git clone https://github.com/next-theme/hexo-theme-next themes/nextRemove-Item -Force -Recurse .\\themes\\next\\.git (Note.)這邊建議大家可能會看到兩種安裝方式：npm install &amp; git clone 到 themes。推薦使用 git clone，可以比較多的自由度。 於 _config.yml 的 theme 設定中 1theme: next 每個主題的安裝方式略有不同，可以參考他們的 github 。 再下一次指令，看看主題變更的如何吧！ 1hexo server -o Step 5: 該是將進度存檔了 123git initgit add .git commit -m &quot;feat: init blog&quot; Step 6: 將部落格部署到 github.io 首先在 github 新增一個 private repository 來將 source code 推上去。 12git remote add origin git@github.com:&#123;username&#125;/blog.gitgit push -u origin main git push error (optional) 如果有遇到上述錯誤的話，可參考以下流程。 先查看 git config 中的 email name 1git config user.email 用上述的 email name 產生 ssh key，其中 {your_name} 請替換成電腦的使用者名稱 12ssh-keygen -t rsa -b 4096 -C &quot;&#123;your_email&#125;@example.com&quot;Get-Content C:\\Users\\&#123;your_name&#125;\\.ssh\\id_rsa.pub | Set-Clipboard 之後到 GitHub &#x2F; Settings &#x2F; SH and GPG keys &#x2F; New SSH Key 接著新增另一個 username.github.io 的 repository 來作為靜態頁面。 1npm install hexo-deployer-git --save 設定 _config.yml 1234deploy: type: git repo: https://github.com/&#123;username&#125;/&#123;username&#125;.github.io branch: main 1hexo clean &amp; hexo deploy 最後設定 github page 即大功告成！ Step 7: 產生 sitemap，讓 Google 搜尋 安裝 hexo-generator-sitemap 1npm install hexo-generator-sitemap --save 設定 _config.yml 123456sitemap: path: - sitemap.txt rel: false tags: false categories: false 將 sitemap 推上去 1hexo clean &amp; hexo deploy 檢查 sitemap.txt 1https://&#123;username&#125;.github.io/sitemap.txt 設定 Google Search Console (Reference.) Hexo Adding a new SSH key to your GitHub account 輕鬆地提交 Hexo 部落格的 Sitemap.xml 到 Google Search Console ʕ •ᴥ•ʔ：希望大家都能 enjoy 寫部落格的過程。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"Unicode 與字元集","slug":"Unicode-And-Character-Sets","date":"2023-08-08T02:12:16.000Z","updated":"2025-05-30T08:15:23.257Z","comments":true,"path":"2023/08/08/Unicode-And-Character-Sets/","permalink":"https://yncbearz.github.io/2023/08/08/Unicode-And-Character-Sets/","excerpt":"Unicode-And-Character-Sets","text":"身為軟體開發者，你有搞懂字元集、字元編碼、Unicode 等神秘的東西嗎？ 作者表示連知名語言 PHP 都忽略字元編碼問題，非常歡樂地只支援8位元的字元集。 字元集讓我們看看 ASCII 的編碼方式。 ASCII (American Standard Code for Information Interchange，美國標準資訊交換碼)用一個位元組 (bite)，即8個位元 (bit)，來表示一個字元。位元組的最高位統一規定為0，剩餘7位用來存儲數據。 如果英文是你的母語，這一切都很好，沒什麼問題。 但由於一個 Byte 有8個位元，因此很多人開始思考利用 128-255 這段編碼範圍。IBM-PC 用了一種名為 OEM 字元集的東西，提供了某些歐洲語言用的重音字母和一堆線條繪圖字元：水平線、垂直線、右邊有個小吊釣的水平線等等。 當 PC 開始賣到美國以外時，各種不同的 OEM 字元就被憑空創造出來，大家都把上面這128個字元拿來自己用。在俄文地區對於上面的 128 個字元甚至有多種不同的想法。 後來這段 OEM 終於在 ANSI (American National Standards Institute，美國國家標準協會) 中被固定下來。大家都同意小於 128 的字元定義 (基本上和 ASCII 一致)，但由 128 開始就有很多不同的處理方法，這些不同的系統就被稱為頁碼。 在亞洲地區中有些字母甚至要用到兩個位元組。當 Internet 興起時，在電腦間移動字串原本會是一個大麻煩，幸虧這時已經發明了 Unicode。 UnicodeUnicode 是個勇敢的嘗試，想用單一個字元集去涵括地球上所有的書寫系統。有些人誤認為 Unicode 只是個 16 位元碼，裡頭每個字都要佔 16 位元，所以總共有 65536 個字元。事實上這並不正確。 到目前為止，我們通常假設一個字母會對應到某些字元：A -&gt; 0100 0001 在 Unicode 的世界中，一個字母會對應到一個 code point 中。即便在不同的語言中，A 的寫法可能會略有不同，但 Unicode 協會的人已經花了 10 年搞定這些政治爭論。 Unicode 協會把所有字母系統中每一個觀念上的字母都分配一個魔術數字，這個魔術數字就叫一個 code point 。U+ 的意思是 Unicode，數字則是用十六進位表示。例如 A 在 Unicode 中就是 U+0041 。 假設我們有個字串：Hello 用 Unicode 來表示的話，這個字串會對映到下面五個 code point： 1U+0048 U+0065 U+006C U+006C U+006F 實際上也就是數字。不過我們還沒有提過要如何儲存到記憶體或在電郵訊息中表示。 字元編碼這就是字元編碼上場的時刻了。 Unicode 編碼最初的想法導致了兩個位元組的迷思，簡單說就是把那些數字都存成兩個位元組。所以 Hello 變成 100 48 00 65 00 6C 00 6C 00 6F 這樣對嗎？等一下！也有可能會是： 148 00 65 00 6C 00 6C 00 6F 00 因此有存成 high-endian 或 low-endian 模式，可以依據 CPU 用哪一種最快來決定。 由於美國人，看到的都是很少用到 U+00FF 以上 code point 的英文文字。然後就有人發明了 UTF-8 這個絕佳的點子。這樣做有個很巧妙的副作用，就是英文文字用 UTF-8 和用 ASCII會完全一樣，所以美國人根本不會覺得有啥不對。只剩世界上其他地方的人得跳火圈。 因此上述的 Hello 可以寫成： 148 65 6C 6C 6F 關於字元編碼最重要的一個事實如果你完全不記得我剛說的東西，請至少記住一件超級重要的事實。光有字串卻不知道編碼方式是不行的。 假設你有一個字串，不管是在記憶體或在檔案還是在電郵訊息裡，你都必須知道字串用的編碼方式，才能正確解譯出來並呈現給使用者。 以電子郵件來說，郵件表頭應該會有一個字串： 1Content-Type: text/plain; charset=&quot;UTF-8&quot; 如果是網頁的話，最原始的想法是在網頁之外，再讓 web 伺服器傳回一個類似的 Content-Type http header。不是放在 HTML 裡面，而是在傳 HTML 網頁之前先送的 header。 然而這樣會有問題，因為 web 伺服器不一定知道各個檔案的編碼方式，所以也沒法傳出正確的 Content-Type header。 利用某些特別的 tag 把 HTML 檔案的 Content-Type 放在 HTML 檔案裡比較方便。(幾乎所有編碼方式由 32 到 127 的字元都是一樣的，所以不需用到怪字母就能在 HTML 網頁取到這些資訊) 123&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt; 當 http header 或 meta tag 都找不到 Content-Type 時，Internet Explorer 會做一件很有趣的事：它會依據各位元組在各種常見語言編碼中出現的頻率，猜測網頁所用的語言及編碼方式。 課後練習1.1 Is Unique (Reference.) The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) ʕ •ᴥ•ʔ：算是徹底理解 Unicode 了。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"台北之旅@2023","slug":"Taipei-Trip-2023","date":"2023-07-02T03:56:45.000Z","updated":"2025-05-30T08:15:23.255Z","comments":true,"path":"2023/07/02/Taipei-Trip-2023/","permalink":"https://yncbearz.github.io/2023/07/02/Taipei-Trip-2023/","excerpt":"Password-Protected-Content","text":" Please enter the password to view the content.","categories":[{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"With TM","slug":"With-TM","permalink":"https://yncbearz.github.io/tags/With-TM/"}]},{"title":"Problem Solving","slug":"Problem-Solving","date":"2023-04-27T01:35:42.000Z","updated":"2025-05-30T08:15:23.252Z","comments":true,"path":"2023/04/27/Problem-Solving/","permalink":"https://yncbearz.github.io/2023/04/27/Problem-Solving/","excerpt":"Problem-Solving","text":"What is a problem?Problem &#x3D; Gap between Expectation and Reality How to understand a problem? Name Size Guideline Fishbone (問題、大分類、小分類) Large, Normal Mind Map Medium, Normal 5 Why (逐步問出背後的深層原因) Small, Urgent 5W1H Small, Very Urgent How to generate countermeasures?Brain Storming Killing Words:Don’t, Can’t, Not Able To, Impossible, Ridicules, Stupid, Bad idea, No good Rephrase to:Yes …. And….. How to select countermeasures?Pros vs ConsDecision Making Models Authority Delegation Consensus (共識決策法，所有人都同意) Consent (共識決策法，沒有人強烈反對) Range Voting Majority Voting (絕對多數) Plurality Voting (相對多數) Random Advice Process Impact VS Effort Matrix (or Two Factor Matrix) How to write a problem statement?Vision Expectation What would world like if we solve problem Reality Current State How is the situation and what are the consequence Action What are the countermeasure and benefit to the user Keep SNT in the mindProcess Define Problem Understand Problem Generate Countermeasures Select Countermeasure Decide Problem Statement Check Progress (References) QBQ！問題背後的問題(30萬冊紀念版) 你想通了嗎？解決問題之前，你該思考的6件事 ʕ •ᴥ•ʔ：上完內訓後覺得很有用的課程，順手把它記錄下來！","categories":[{"name":"Other","slug":"Other","permalink":"https://yncbearz.github.io/categories/Other/"}],"tags":[]},{"title":"欸！你知道三層式架構嗎？","slug":"Three-Tier-Architecture","date":"2023-04-05T08:03:20.000Z","updated":"2025-05-30T08:15:23.256Z","comments":true,"path":"2023/04/05/Three-Tier-Architecture/","permalink":"https://yncbearz.github.io/2023/04/05/Three-Tier-Architecture/","excerpt":"Three-Tier-Architecture","text":"Three-Tier Architecture當你在瀏覽網頁時，其實是在跟三個不同層次組成的系統進行互動。這個系統就是 Web 的三層式架構： Presentation Layer (View, Middleware, Controller, …) Application Layer (Service, Domain Model, …) Data Access Layer (Repository, Proxy, Dao, Client…) 由於在討論這些架構時，大家使用的名稱常略有不同，下面列出其職責。 Controller職責： Routing 解析 (Http, gRPC, …) 驗證 Request (確保格式、權限等是正確的) 將 Request 轉成 DTO，交給 Service 處理 依據 Service 回傳的 Domain Model，準備 Response Exception 處理 Cache 管理 Middleware職責： Global Exception Handler Log Handler Validator Service職責： Transaction 處理 (begin, commit, rollback) 調用 Domain Model (包含從 Repository 取得、自己 Construct 等) 讓 Domain Model 彼此去互動 資料驗證 (確保其合法性、完整性等) Repository &#x2F; Proxy職責： 處理 DB Connection 處理外部 API 呼叫 (Signature, Url, …) 從資料來源檢索並轉換成 Domain Model 進或出會是 Domain Model 命名參照 Domain Model，跟 table name 只是剛好撞名 內含數個 Dao、Client，呼叫後將各個結果組合成 Domain Model Dao &#x2F; Client職責： Dao 命名通常 1-1 mapping table，處理與 DB 的互動，但要留意效能問題，適時使用 join 語法調校 Client 處理 api 的 request&#x2F;response，回傳原始值給 Repository &#x2F; Proxy 補充Simple Design Pass all tests Reveals intention No duplication Fewest elements ʕ •ᴥ•ʔ：這是目前與 Erwin 討論及請教 91 後的理解，未來有可能因開發經驗的增加或團隊組成而再發生改變。 [2024-08-30 更新]跟 James 討論後，新增了 Client 架構，角色類似於 Dao。跟 Kyo 討論時，有提到使用 Dao 的效能問題。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"Front End Design Note","slug":"Front-End-Design-Note","date":"2023-02-20T02:07:30.000Z","updated":"2025-05-30T08:15:23.243Z","comments":true,"path":"2023/02/20/Front-End-Design-Note/","permalink":"https://yncbearz.github.io/2023/02/20/Front-End-Design-Note/","excerpt":"Front-End-Design-Note","text":" Please enter the password to view the content.","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Private Note","slug":"Private-Note","permalink":"https://yncbearz.github.io/tags/Private-Note/"}]},{"title":"Windows 套件管理工具 Scoop","slug":"Windows-Command-Line-Installer","date":"2023-02-10T06:23:12.000Z","updated":"2025-05-30T08:15:23.259Z","comments":true,"path":"2023/02/10/Windows-Command-Line-Installer/","permalink":"https://yncbearz.github.io/2023/02/10/Windows-Command-Line-Installer/","excerpt":"Windows-Command-Line-Installer","text":"準備工作以下參考 Scoop官方文件 的流程安裝 Install Scoop 123Set-ExecutionPolicy RemoteSigned -Scope CurrentUseriwr -useb get.scoop.sh | iex Install git 1scoop install git Add bucket (增加 package 的倉庫) 1scoop bucket add extras Install aria2 (multi-connection download) 12scoop install aria2scoop config aria2-warning-enabled false Install sudo 1scoop install sudo 安裝套件 Install vim 1scoop install vim Install Vim-Plug 先了解 scoop 將 vim 安裝在哪裡 1cd ~\\scoop\\apps\\vim\\current\\autoload 參考 Vim-Plug官方文件 ，Download plug.vim 後放入 autoload 資料夾 其餘就視個人需求，安裝 wox, everything, vscode等等 移除套件 Uninstall Vim 1scoop uninstall vim (Reference.) 重裝系統後要幹的幾件事 (Scoop) ʕ •ᴥ•ʔ：跟 Chocolatey 比較的話，scoop 不需要系統管理者權限，安裝指令也比較簡單。可謂是 windows 版本的 homebrew！","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Settings","slug":"Settings","permalink":"https://yncbearz.github.io/tags/Settings/"}]},{"title":"【摘要】不詞窮的即興表達","slug":"Impromptu-Expression-Without-Lack-Of-Words","date":"2023-01-29T15:56:27.000Z","updated":"2025-05-30T08:15:23.245Z","comments":true,"path":"2023/01/29/Impromptu-Expression-Without-Lack-Of-Words/","permalink":"https://yncbearz.github.io/2023/01/29/Impromptu-Expression-Without-Lack-Of-Words/","excerpt":"Impromptu-Expression-Without-Lack-Of-Words","text":" Please enter the password to view the content.","categories":[{"name":"Other","slug":"Other","permalink":"https://yncbearz.github.io/categories/Other/"}],"tags":[{"name":"Private Note","slug":"Private-Note","permalink":"https://yncbearz.github.io/tags/Private-Note/"}]},{"title":"MSSQL 報表語法","slug":"MSSQL-Report-Syntax","date":"2023-01-15T06:58:48.000Z","updated":"2025-05-30T08:15:23.249Z","comments":true,"path":"2023/01/15/MSSQL-Report-Syntax/","permalink":"https://yncbearz.github.io/2023/01/15/MSSQL-Report-Syntax/","excerpt":"MSSQL-Report-Syntax","text":"(參考MSSQL) Context 我們是個中文教學的網絡平台，透過跟不同的課程提供者合作來盈利。擁有以下的資料表，來記錄平台的狀況。 為求簡化，我們不會列出所有的表跟欄位。其中有些表可能違反了正規化。 Table: SessionInfo Column Description Id 課程編號 Browser 使用的瀏覽器 (Chrome, Firefox, Safari, …) ServiceProvider 課程服務的提供者 (TutorChinese, ChineseTalker, ChineseCamp, …) Country 連線的國家 (Japan, Korea, Singapore, …) Cost 課程花費 (單位為連線國家的貨幣) TeachingFee 給提供者的教學費用 (單位為連線國家的貨幣) ConnectionTime 連線時間 (以秒記) UserId 使用者編號 Type 課程類型 (Listening, Speaking, Reading, Writing) Status 課程狀態 (Started, Cancelled, Done) Date 連線日期 (UTC 時間) Table: ExchangeRate Column Description Id 貨幣換算編號 Country 貨幣換算的國家 (Japan, Korea, Singapore, Thailand, US, …) MonthKey 貨幣換算的時間 (格式: 202301) Rate 匯率 Preparation Table: SessionInfo Create Table 1234567891011121314CREATE TABLE SessionInfo ( Id INT IDENTITY (1, 1) PRIMARY KEY, Browser nvarchar (50) NOT NULL, ServiceProvider nvarchar (20) NOT NULL, Country nvarchar (50) NOT NULL, Cost DECIMAL(18, 6) NOT NULL, TeachingFee DECIMAL(18, 6) NOT NULL, ConnectionTime INT NOT NULL, UserId INT NOT NULL, Type VARCHAR(20) NOT NULL, Status VARCHAR(20) NOT NULL, DATE datetime NOT NULL, ); Insert Data 利用 PHP，產生隨機資料的程式碼 12345678910111213141516171819202122232425262728&lt;?php$browsers = [&#x27;Chrome&#x27;, &#x27;Firefox&#x27;, &#x27;Safari&#x27;];$serviceProviders = [&#x27;TutorChinese&#x27;, &#x27;ChineseTalker&#x27;, &#x27;ChineseCamp&#x27;];$countries = [&#x27;Japan&#x27;, &#x27;Korea&#x27;, &#x27;Singapore&#x27;];$types = [&#x27;Listening&#x27;, &#x27;Speaking&#x27;, &#x27;Reading&#x27;, &#x27;Writing&#x27;];$statuses = [&#x27;Starting&#x27;, &#x27;Cancelled&#x27;, &#x27;Done&#x27;];$result = &#x27;INSERT INTO SessionInfo (Browser, ServiceProvider, Country, Cost, TeachingFee, ConnectionTime, UserId, Type, Status, DATE)VALUES &#x27;;for ($i = 1; $i &lt;= 1000; $i++) &#123; shuffle($browsers); shuffle($serviceProviders); shuffle($countries); $cost = rand(8443, 243427); $fee = (rand(300, 800)) * 0.001 * $cost; $connectionTime = rand(3550, 11000); $userId = rand(1,1000); shuffle($types); shuffle($statuses); $dateInt2022= mt_rand(1640995200 ,1672444800); $date = date(&quot;Y-m-d H:i:s&quot;,$dateInt2022); $result .= &quot;(&#x27;$browsers[0]&#x27;, &#x27;$serviceProviders[0]&#x27;, &#x27;$countries[0]&#x27;, $cost, $fee, $connectionTime, $userId, &#x27;$types[0]&#x27;, &#x27;$statuses[0]&#x27;, &#x27;$date&#x27;),\\n&quot;;&#125;$result = substr($result, 0, -2) . &#x27;;&#x27;;echo($result); 產生的範例 123INSERT INTO SessionInfo (Browser, ServiceProvider, Country, Cost, TeachingFee, ConnectionTime, UserId, Type, Status, DATE)VALUES (&#x27;Chrome&#x27;, &#x27;TutorChinese&#x27;, &#x27;Japan&#x27;, 8443, 6332, 3600, 1, &#x27;Speaking&#x27;, &#x27;Done&#x27;, &#x27;2022-01-15 09:00:00&#x27;),(&#x27;Chrome&#x27;, &#x27;TutorChinese&#x27;, &#x27;Korea&#x27;, 81709, 61283, 3610, 2, &#x27;Speaking&#x27;, &#x27;Done&#x27;, &#x27;2022-01-15 09:00:00&#x27;); (Note.) 利用上述程式碼產生的資料，主要盈利的分佈會是 Singapore &gt; Japan &gt;&gt;&gt; Korea Table: ExchangeRate Create Table 1234567CREATE TABLE ExchangeRate ( Id INT IDENTITY (1, 1) PRIMARY KEY, Country nvarchar (50) NOT NULL, Rate DECIMAL(10, 6) NOT NULL, MonthKey datetime NOT NULL, ); Insert Data 12345678910111213141516171819202122232425262728293031323334353637INSERT INTO ExchangeRate (Country, Rate, MonthKey)VALUES (&#x27;Japan&#x27;, 0.2408, CONVERT(DATETIME,&#x27;20220101&#x27;, 112)),(&#x27;Japan&#x27;, 0.242, CONVERT(DATETIME,&#x27;20220201&#x27;, 112)),(&#x27;Japan&#x27;, 0.2443, CONVERT(DATETIME,&#x27;20220301&#x27;, 112)),(&#x27;Japan&#x27;, 0.2341, CONVERT(DATETIME,&#x27;20220401&#x27;, 112)),(&#x27;Japan&#x27;, 0.2264, CONVERT(DATETIME,&#x27;20220501&#x27;, 112)),(&#x27;Japan&#x27;, 0.224, CONVERT(DATETIME,&#x27;20220601&#x27;, 112)),(&#x27;Japan&#x27;, 0.2205, CONVERT(DATETIME,&#x27;20220701&#x27;, 112)),(&#x27;Japan&#x27;, 0.2292, CONVERT(DATETIME,&#x27;20220801&#x27;, 112)),(&#x27;Japan&#x27;, 0.2181, CONVERT(DATETIME,&#x27;20220901&#x27;, 112)),(&#x27;Japan&#x27;, 0.2198, CONVERT(DATETIME,&#x27;20221001&#x27;, 112)),(&#x27;Japan&#x27;, 0.2173, CONVERT(DATETIME,&#x27;20221101&#x27;, 112)),(&#x27;Japan&#x27;, 0.2263, CONVERT(DATETIME,&#x27;20221201&#x27;, 112)),(&#x27;Korea&#x27;, 0.0233, CONVERT(DATETIME,&#x27;20220101&#x27;, 112)),(&#x27;Korea&#x27;, 0.0231, CONVERT(DATETIME,&#x27;20220201&#x27;, 112)),(&#x27;Korea&#x27;, 0.0233, CONVERT(DATETIME,&#x27;20220301&#x27;, 112)),(&#x27;Korea&#x27;, 0.0235, CONVERT(DATETIME,&#x27;20220401&#x27;, 112)),(&#x27;Korea&#x27;, 0.0233, CONVERT(DATETIME,&#x27;20220501&#x27;, 112)),(&#x27;Korea&#x27;, 0.0235, CONVERT(DATETIME,&#x27;20220601&#x27;, 112)),(&#x27;Korea&#x27;, 0.023, CONVERT(DATETIME,&#x27;20220701&#x27;, 112)),(&#x27;Korea&#x27;, 0.0231, CONVERT(DATETIME,&#x27;20220801&#x27;, 112)),(&#x27;Korea&#x27;, 0.0225, CONVERT(DATETIME,&#x27;20220901&#x27;, 112)),(&#x27;Korea&#x27;, 0.0221, CONVERT(DATETIME,&#x27;20221001&#x27;, 112)),(&#x27;Korea&#x27;, 0.0227, CONVERT(DATETIME,&#x27;20221101&#x27;, 112)),(&#x27;Korea&#x27;, 0.0235, CONVERT(DATETIME,&#x27;20221201&#x27;, 112)),(&#x27;Singapore&#x27;, 20.552, CONVERT(DATETIME,&#x27;20220101&#x27;, 112)),(&#x27;Singapore&#x27;, 20.5859, CONVERT(DATETIME,&#x27;20220201&#x27;, 112)),(&#x27;Singapore&#x27;, 20.6607, CONVERT(DATETIME,&#x27;20220301&#x27;, 112)),(&#x27;Singapore&#x27;, 21.1392, CONVERT(DATETIME,&#x27;20220401&#x27;, 112)),(&#x27;Singapore&#x27;, 21.2932, CONVERT(DATETIME,&#x27;20220501&#x27;, 112)),(&#x27;Singapore&#x27;, 21.2106, CONVERT(DATETIME,&#x27;20220601&#x27;, 112)),(&#x27;Singapore&#x27;, 21.3519, CONVERT(DATETIME,&#x27;20220701&#x27;, 112)),(&#x27;Singapore&#x27;, 21.9154, CONVERT(DATETIME,&#x27;20220801&#x27;, 112)),(&#x27;Singapore&#x27;, 21.8025, CONVERT(DATETIME,&#x27;20220901&#x27;, 112)),(&#x27;Singapore&#x27;, 22.1604, CONVERT(DATETIME,&#x27;20221001&#x27;, 112)),(&#x27;Singapore&#x27;, 22.711, CONVERT(DATETIME,&#x27;20221101&#x27;, 112)),(&#x27;Singapore&#x27;, 22.5993, CONVERT(DATETIME,&#x27;20221201&#x27;, 112)); Menu Annual Report By Country Quarter Type Country Count QAU Volume(TWD) Fee(TWD) FeePercentage(TWD) Q1 Listening Japan 30 12 73000 51100 70% … Volume Over 50k Users By Country Quarter Country Count Q1 Japan 112 … Connection Time Over 2 Hours Percentage By Type Quarter Type Percentage Q1 Speaking 24% … Favorite Service Provider By Browser Browser ServiceProvider MaxCount Chrome TutorChinese 30 … Done Rate By Country Type Country DoneRate Speaking Japan 75% … Japan Consumption Quartile 25th 50th 75th Volume 2353 6794 8443 250 … Annual Report By Country12345678910111213141516171819202122232425262728293031323334353637383940414243;WITH SessionInfoV2 AS (SELECT si.Browser , si.ServiceProvider , si.Country , si.ConnectionTime , si.UserId , si.[Type] , si.Status , CONCAT(&#x27;Q&#x27;, DATEPART(QUARTER, si.[DATE])) AS Quarter, DATEADD(MONTH, DATEDIFF(MONTH, 0, si.[DATE]), 0) AS Monthkey, si.Cost , si.TeachingFeeFROM SessionInfo si WITH (nolock))SELECT siv2.Quarter, siv2.[Type] , siv2.Country, Count(1) AS Count, Count(DISTINCT(siv2.UserId)) AS QAU, Sum(siv2.Cost * er.Rate) AS &#x27;Volume(TWD)&#x27;, Sum(siv2.TeachingFee * er.Rate) AS &#x27;Fee(TWD)&#x27;, CONCAT( CONVERT (Decimal(10, 2), Round( Sum(siv2.TeachingFee * er.Rate)/ Sum(siv2.Cost * er.Rate), 4 )* 100), &#x27;%&#x27;) AS &#x27;FeePercentage(TWD)&#x27;FROM SessionInfoV2 AS siv2 WITH (nolock)JOIN ExchangeRate AS er ON siv2.MonthKey = er.MonthKey AND siv2.Country = er.CountryWHERE siv2.Status = &#x27;Done&#x27;GROUP BY siv2.Quarter, siv2.[Type], siv2.Country; Volume Over 50k Users By Country1234567891011121314151617181920212223242526272829303132333435363738394041424344454647;WITH SessionInfoV2 AS (SELECT si.Browser , si.ServiceProvider , si.Country , si.ConnectionTime , si.UserId , si.[Type] , si.Status , CONCAT(&#x27;Q&#x27;, DATEPART(QUARTER, si.[DATE])) AS Quarter, DATEADD(MONTH, DATEDIFF(MONTH, 0, si.[DATE]), 0) AS Monthkey, si.Cost , si.TeachingFeeFROM SessionInfo si WITH (nolock)),SessionInfoV3 AS (SELECT siv2.Quarter, siv2.Country, siv2.UserId, Sum(siv2.Cost * er.Rate) AS &#x27;Volume&#x27;FROM SessionInfoV2 siv2 WITH (nolock)JOIN ExchangeRate AS er ON siv2.MonthKey = er.MonthKey AND siv2.Country = er.CountryWHERE siv2.Status = &#x27;Done&#x27;GROUP BY siv2.Quarter, siv2.Country, siv2.UserId)SELECT siv3.Quarter, siv3.Country, Count(DISTINCT(siv3.UserId)) AS CountFROM SessionInfoV3 AS siv3 WITH (nolock)WHERE siv3.Volume &gt; 50000GROUP BY siv3.Quarter, siv3.Country; (Back to Menu) Connection Time Over 2 Hours Percentage By Type1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859;WITH SessionInfoV2 AS (SELECT si.ConnectionTime , si.[Type] , si.Status , CONCAT(&#x27;Q&#x27;, DATEPART(QUARTER, si.[DATE])) AS QuarterFROM SessionInfo si WITH (nolock)),Summary AS (SELECT siv2.Quarter, siv2.[Type], Count(1) AS CountFROM SessionInfoV2 AS siv2 WITH (nolock)WHERE siv2.Status = &#x27;Done&#x27;GROUP BY siv2.Quarter, siv2.[Type]),Over2Hour AS (SELECT siv2.Quarter, siv2.[Type], Count(1) AS CountFROM SessionInfoV2 AS siv2 WITH (nolock)WHERE siv2.ConnectionTime &gt;= 7200 AND siv2.Status = &#x27;Done&#x27;GROUP BY siv2.Quarter, siv2.[Type])SELECT sm.Quarter, sm.[Type], CONCAT ( CONVERT( DECIMAL(10, 2), ( CONVERT(DECIMAL(10, 2), ISNULL (o2.Count, 0)) / CONVERT(DECIMAL(10, 2), sm.Count) ) * 100 ), &#x27;%&#x27; ) AS PercentageFROM Summary AS smLEFT JOIN Over2Hour AS o2 WITH (nolock)ON sm.Quarter = o2.Quarter AND sm.[Type] = o2.[Type]ORDER BY sm.Quarter, sm.[Type]; (Back to Menu) Favorite Service Provider By Browser1234567891011121314151617181920212223242526272829303132;WITH Summary AS (SELECT si.ServiceProvider , si.Browser, Count(DISTINCT (si.UserId)) AS CountFROM SessionInfo si WITH (nolock)WHERE si.Status = &#x27;Done&#x27;GROUP BY si.ServiceProvider , si.Browser)SELECT s.ServiceProvider, s.Browser, s2.MaxCountFROM Summary AS s WITH (nolock)INNER JOIN ( SELECT s1.ServiceProvider, Max(s1.Count) AS MaxCount FROM Summary AS s1 WITH (nolock) GROUP BY s1.ServiceProvider) s2ON s.ServiceProvider = s2.ServiceProvider AND s.Count = s2.MaxCount; (Back to Menu) Done Rate By Country123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354;WITH SessionInfoV2 AS (SELECT si.[Type] , si.Country , si.Status, Count(si.Id) AS CountFROM SessionInfo si WITH (nolock)GROUP BY si.[Type], si.Country, si.Status),Summary AS (SELECT siv2.[Type] , siv2.Country , Sum(siv2.Count) AS CountFROM SessionInfoV2 siv2 WITH (nolock)GROUP BY siv2.[Type], siv2.Country),Done AS (SELECT siv2.[Type] , siv2.Country , siv2.CountFROM SessionInfoV2 siv2 WITH (nolock)WHERE siv2.Status = &#x27;Done&#x27;)SELECT s.[Type], s.Country, CONCAT( CONVERT( DECIMAL(10,2), ( CONVERT(DECIMAL(10,2),ISNULL (d.Count,0)) / CONVERT(DECIMAL(10,2),s.Count) ) * 100 ), &#x27;%&#x27;) AS DoneRateFROM Summary AS s WITH (nolock)LEFT JOIN Done AS d ON s.[Type] = d.[Type] AND s.Country = d.CountryORDER BY s.[Type], s.[Country]; (Back to Menu) Japan-Consumption-Quartile1234567891011121314151617181920212223;DECLARE @StartTime DATETIME = &#x27;2022-01-15 09:00:00&#x27;;DECLARE @EndTime DATETIME = &#x27;2022-01-15 10:00:00&#x27;;WITH JapanConsumption as ( SELECT Cost FROM SessionInfo WITH (nolock) WHERE Country = &#x27;Japan&#x27; AND [Date] &gt;= @StartTime AND [Date] &lt;= @EndTime)SELECT top 1 PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY Cost) over() AS &#x27;25th&#x27;, PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY Cost) over() AS &#x27;50th&#x27;, PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY Cost) over()AS &#x27;75th&#x27;, (select count(1) FROM JapanConsumption WITH (nolock)) as VolumeFROM JapanConsumption; (Back to Menu) ʕ •ᴥ•ʔ：整理好久的範例啊","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://yncbearz.github.io/tags/SQL/"}]},{"title":"元素耦合性","slug":"Component-Coupling","date":"2022-09-16T06:22:27.000Z","updated":"2025-05-30T08:15:23.228Z","comments":true,"path":"2022/09/16/Component-Coupling/","permalink":"https://yncbearz.github.io/2022/09/16/Component-Coupling/","excerpt":"Component-Coupling","text":"The Acyclic Dependencies Principle (ADP)Allow no cycles in the component dependency graph. 元素依賴關係中不允許出現環。 Example Solution 利用依賴反轉原則。 建立新元件，改變依賴結構。 Summary 隔離易變性。 提高可建置性 (buildability) 和可維護性 (maintainability)。 The Stable Dependencies Principle (SDP)Depend in the direction of stability. 朝著穩定的方向抽象。 Definition Fan-in: 輸入依賴度。元件外部，依賴於該元件的類別個數。 Fan-out: 輸出依賴度。元件內部，依賴於元件外的類別個數。 Instability: 不穩定性。 $$I&#x3D;\\frac{Fan-out}{(Fan-in + Fan-out)}，I∈[0,1]$$ Example 計算I值 違反SDP的例子 Solution 利用依賴反轉原則。 Summary 當高階&#x2F;低階模組角色錯置問題時，考慮依賴反轉原則。 無環依賴原則 (ADP) 及 穩定依賴原則 (SDP) 是依賴反轉原則的延伸。 The Stable Abstractions Principle (SAP)A component should be as abstract as it is stable. 元件的抽象程度應該與穩定程度一致。 一個穩定的元件應該是抽象的。 一個不穩定的元件應該是具體的。 依賴應該朝著抽象的方向。 Definition $N_c$ 一元件中類別中的總數。 $N_a$ 一元件中抽象類別及界面的總數。 $A$ 表示抽象性。$A&#x3D;N_a \\div N_c$ 。 $A∈[0,1]$。 Example Summary藉由定義出計算抽象性的度量方式，我們便可以監控依賴關係在不同版本間的變化，進而對設計作出調整。 ʕ •ᴥ•ʔ：順手整理一下以前寫過的筆記。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"}]},{"title":"不！","slug":"Nope","date":"2022-09-08T15:29:03.000Z","updated":"2025-05-30T08:15:23.251Z","comments":true,"path":"2022/09/08/Nope/","permalink":"https://yncbearz.github.io/2022/09/08/Nope/","excerpt":"Nope!","text":"短評不！ 85分 「如果你要訴說一個你無法描述的神秘現象，你會說什麼？」「不！」 這是由拍攝「逃出絕命鎮」及「我們」的導演，喬登·皮爾在2022年的最新作品。一如既往地使用黑人作為主角，搭配上恐怖元素。 上個週末，朋友推薦時，強烈建議不要事先看預告跟劇情。但其實我每部電影都是這樣做啊。 查了下電影app，發覺這部電影放映時間意外的少。全高雄只有四場。索性去了沒去過的岡山秀泰。 撇除捷運來回比較貴之外，當天的觀影體驗很棒。只有一位陌生觀眾，整個影廳幾乎被我們包場了。 回到電影，個人覺得勢必會列入影評社的研究中。 其中的譬喻與象徵很多，彼此前後呼應，我特別特別喜歡結局前的五分鐘。 唯獨劇情方面不夠優秀，Google影評只給出75分。如果文本能再貼近大眾一些，這部電影應該可以得到更好的評價。 如果有打算觀賞這部電影的朋友，這邊提供一個問題，讓你能更投入其中。 Q:「電影男主角與女主角，對於神秘現象態度轉變的原因是什麼？」 以下涉及劇情，建議觀影後再閱讀。 下方為主要人物名稱對照表: 演員 角色 丹尼爾·卡盧亞 歐傑·海沃（OJ Haywood） 琪琪·帕瑪 莫洛·「安」·海沃（Emerald “Em” Haywood） 布蘭登·皮雷亞 安傑·托雷斯，3C家電的店員（Angel Torres） 史蒂芬·連 瑞奇·「朱佩」·帕克（Ricky “Jupe” Park） 個人心得 開頭 透過哥哥歐傑與父親的聊天片段，勾勒出馬場的生意已經不如以往。 妹妹安，則不太想被綁在家族企業之下，試圖發展其他副業。 發現神秘現象 隨著父親因意外去世，我們知道馬場附近有了神秘現象。 歐傑對此沒有很積極，反倒是安認為在網路時代，只要拍攝出神秘現象的原貌，是一個致富翻轉，拯救家族的機會！ 準備工作，試圖開始拍攝 安找到了3C家電的店員，幫忙架設監視器。也試圖聯絡大導演前來幫忙拍攝。但被一口回絕。 導演對安說：「你還沒準備好在世界頂級的舞台。」算是對後面劇情的一點暗示。 與鄰居朱佩家族的衝突 安跑去偷隔壁馬場的假馬裝飾，導致對方回來報復。 有個恐怖的橋段很有趣，是毆傑想把燈關掉，但燈一直亮起來。跟常見的情況相反。 而朱佩提到當年攝影棚，黑猩猩在聽到「叢林」兩字後會暴走的細節。 或許是偷偷在說明，神秘現象是因為「地盤」被入侵，才會導致失控。 瞭解到神秘現象的真面目 經歷過幾天的拍攝，神秘現象的真相也越來越清晰。不是什麼外星人，而是會吃人的巨大飛碟怪！ 安與店員，此時已經打退堂鼓，決定搬離家中。儘管拍攝後可能會改變人生，也不願為此賠上生命。 此時歐傑的回話很有意思：「你走吧！我明天還得早起餵馬！」 與先前以為是外星人時的態度判若兩人。 在瞭解到神秘現象的本體是巨大生物後，歐傑顯露出職人精神，打算將其馴服。 導演的加入 導演聽聞新聞報導，也趕來馬場加入拍攝。 作戰會議期間，店員有句精彩台詞：「我們做這件事，除了錢和名譽，還對人類有幫助吧？」 像是征戰沙場，前往第一線的士兵。最終還是需要一個堅持下去的理由與信念。 而拍攝工作的過程不算相當順利。 導演也說了一句台詞：「我們不配拍到我們不該擁有的畫面。」 導演脫離團隊，獨自一人走上山丘。為了拍出最好的畫面，逐漸拉近與飛碟怪的距離，最終為藝術獻上了生命。 結局 哥哥歐傑憑藉馴馬的經驗，找出了飛碟怪的弱點，並與其展開纏鬥。 妹妹安透過井口的相機，一張一張地拍出哥哥馴服飛碟怪的過程。 致敬了當年高祖父馴服野馬的兩秒影片，同樣透過照片逐格迭代出來的方式。 馴馬人的精神得以在現代重新呈現出來。 ʕ •ᴥ•ʔ：最後結局的呼應真的太棒了！","categories":[{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"Movie","slug":"Movie","permalink":"https://yncbearz.github.io/tags/Movie/"}]},{"title":"元件内聚性","slug":"Component-Cohesion","date":"2022-09-03T09:17:14.000Z","updated":"2025-05-30T08:15:23.228Z","comments":true,"path":"2022/09/03/Component-Cohesion/","permalink":"https://yncbearz.github.io/2022/09/03/Component-Cohesion/","excerpt":"Component-Cohesion","text":"再使用性&#x2F;發佈等價原則The Reuse&#x2F;Release Equivalence Principle, REPThe granule of reuse is the granule of release. 重複使用的粒度就是發佈的粒度。 那些被拿來重複使用的程式碼，需透過發佈程序並賦予版本編號。便於我們追蹤、確保重用的元件是彼此兼容的。 開發人員很常收到新版本的提醒。會根據該版本所作的修改，來決定是否繼續使用舊版本。 組合到元件中的類別和模組應該一起被發佈。它們共享了相同的版本編號與版本追蹤，並被包含到同一版本的文件中。 共同封閉原則The Common Closure Principle, CCPGather into components those classes that change for the same reasons and at the same times. Seperate into different components those classes that change at different times and for different reasons. 收集那些在相同時間、因相同理由改變的類別到元件之中。分離那些在不同時間、因不同理由改變的類別到不同的元件之中。 元件版本的單一職責原則。也與開放封閉原則密切相關。 共同重複使用原則The Common Reuse Principle, CRPDon’t force users of a component to depend on things they don’t need. 不要强迫使用者去依賴他們不需要的元件。 元件版本的介面隔離原則。 The Tension Diagram For Component Cohesion三個内聚性原則彼此的關係像是互相拉鋸。 再使用性&#x2F;發佈等價原則 (REP) 和 共同封閉原則 (CCP)是包容性的原則，兩者都傾向把元件變得更大。 而 共同重複使用原則 (CRP) 則是排除性的原則，它會使得元件變得比較小。 隨著專案的生命周期，位在元件内聚性張力圖的位置也會有所改變。 一般來説，初期時較傾向在三角形的右邊，此時犧牲的是重用。隨著專案成熟度的提升，會開始向左滑動。 Conclusion過去我們對於内聚性的觀點可能只是「一個模組只能執行一個功能」。 但元件内聚性的原則描述了一個更爲複雜的關係。 在選擇類別組合成元件時，必須考慮可重用性與可發展性的相對力量。隨著專案的發展，這些組成是可能隨著時間推移而產生演變的。 ʕ •ᴥ•ʔ：重看無瑕程式碼架構篇，有了些與第一次看不一樣的感受。最後的結論，就像是Shortie哥常說的：「任何事都有其trade-off」吧！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"}]},{"title":"Windows設置","slug":"Windows-Settings","date":"2022-08-27T07:38:04.000Z","updated":"2025-05-30T08:15:23.259Z","comments":true,"path":"2022/08/27/Windows-Settings/","permalink":"https://yncbearz.github.io/2022/08/27/Windows-Settings/","excerpt":"Windows-Settings","text":"緣起最近遇到需要轉換開發環境 (Mac OS -&gt; Windows OS)的情況。會在以下整理出，如何讓兩者操作上盡量接近的方法。 PowerToys首先來介紹這次回到 Windows OS 認識的神兵利器—PowerToys。 可以設定大部分的情境下，需要的快捷鍵。甚至交換按鍵的行爲。 下面列出目前有用到的設定： Remapping Before After Reason Alt (Left) Ctrl (Left) 對調 Alt、Ctrl，使其貼近 Mac OS Ctrl (Left) Alt (Left) 對調 Alt、Ctrl，使其貼近 Mac OS Caps Lock Shift 拔掉 CapsLock 是因爲很少需要，但誤觸時有點煩。 這邊曾經想過對調 Ctrl、Win、Alt，不過遇到的問題會變得比較多。 幾經取捨，最後只對調 Ctrl &amp; Alt。 Before After Reason Alt (Left) + [ Esc 類似 Mac OS vim 中的 ctrl + [ Ctrl (Left) + Tab Alt (Left) + Tab 類似 Mac OS 中的切換應用程式 Ctrl (Left) + Q Alt (Left) + F4 類似 Mac OS 中的關閉應用程式 Ctrl (Left) + F4 Alt (Left) + F4 類似 Windows OS 中的關閉應用程式 Ctrl (Left) + Shift (Left) + 5 F1 類似 Mac OS 中的截圖功能 (使用 Snipaste) Win + Alt + R - Windows OS 中的螢幕錄影功能 Ctrl + Alt + F F11 類似 Mac OS 中的全螢幕功能 Ctrl + P Ctrl + T 類似 IDE 中的開啟檔案功能 (slack.exe) (Note.)查看當前執行的應用程式名稱 1tasklist Searching 最近知道個更厲害的 Searching 工具是Wox。可以關閉 PowerToysRun，改用 Wox。 綁定 Ctrl + Space 後，類似於 Mac 中的 Spotlight 搜尋。 這時候可以用傳統的 Win 開啓内建搜尋。 Wox Plugin Settings 透過儲存 VSCode 工作區，便可以利用 code xxx 開啓。 Wox Browser Bookmarks Wox Web Searches Disabled Features 有些功能目前沒有使用，但會影響我們日常的操作。這邊先把它們關閉。 關閉點兩下 Ctrl，會亮出鼠標位置的功能。 關閉大量重新命名的功能。 輸入法調整因爲使用的是拼音輸入法，這邊推薦使用搜狗輸入法。 切換輸入法一律使用 Win + Space。 (Note.)如果使用的是微軟注音，可以於慣用語言新增 English 的輸入法。之後輸入英文時，使用轉換輸入法的方式，可以解放編輯器内跟 Ctrl 有關的快捷鍵設定。 如何輸入直角引號「」 修改對應的檔案 (Wox punctures.ini) 1%USERPROFILE%\\AppData\\LocalLow\\SogouPY\\punctures.ini 直接找到這兩個設定 123456789[flaafl]Name=flaaaaaaflChHalf=badaaaaacaChFull=badaaaaaca[fnaafn]Name=fnaaaaaafnChHalf=bbdaaaaacbChFull=bbdaaaaacb 修改兩項中的 ChHalf 的內容 123456789[flaafl]Name=flaaaaaaflChHalf=amdaaaaadmChFull=badaaaaaca[fnaafn]Name=fnaaaaaafnChHalf=andaaaaadnChFull=bbdaaaaacb 存檔後，設定檔案為唯讀，重啟電腦即生效。 觸控板 個人習慣的一般設定。 目前的三指設定。 目前沒有任何四指設定。 DB GUI推薦DBeaver 固定成英文界面 安裝好，修改 dbeaver.ini新增以下設定。 1cd C:\\Users\\bear\\AppData\\Local\\DBeaver\\ 1vim .\\dbeaver.ini 新增這行到最下方 1-Duser.language=en Terminal 調整安裝Powershell (不是內建的Windows Powershell哦)1winget install --id Microsoft.Powershell --source winget 搭配Windows Terminal使用，透過設定將Powershell調成預設，加上 - nologo 的後綴就不會顯示更新的訊息。 安裝OhMyPosh1winget install JanDeDobbeleer.OhMyPosh -s winget 安裝font (官方推薦: Meslo) 1sudo oh-my-posh font install (Note.) 如果這邊沒有sudo指令，可參考[Windows 套件管理工具 Scoop] 開始套用OhMyPosh主題 1code $PROFILE 1oh-my-posh init pwsh --config &quot;$env:POSH_THEMES_PATH\\powerlevel10k_lean.omp.json&quot; | Invoke-Expression (Note.) 因為Jetbrains terminal與OhMyPosh有一些相容問題，所以有使用Jetbrains terminal的話，建議選用emoji較少的主題。 調整字型 ShareX可以用來截圖成gif 1scoop install sharex (Reference.) Mac to Windows 在 Windows 11 上透過 Windows Terminal 華麗地執行 Powershell 如何輸入直角引號「」 ʕ •ᴥ•ʔ：在捷運上與Mobius分享同步 OS 心得時，被吐槽之前從 Windows OS 轉 Mac OS，也曾經想同步兩者設定 (對調 Command &amp; Ctrl)。但後來還是把 Mac OS 改回來了。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Settings","slug":"Settings","permalink":"https://yncbearz.github.io/tags/Settings/"}]},{"title":"子彈列車","slug":"Bullet-Train","date":"2022-08-07T11:51:23.000Z","updated":"2025-05-30T08:15:23.216Z","comments":true,"path":"2022/08/07/Bullet-Train/","permalink":"https://yncbearz.github.io/2022/08/07/Bullet-Train/","excerpt":"Bullet-Train","text":"短評子彈列車 87分 觀影完才知道劇本，是改編自伊坂幸太郎的瓢蟲🐞。 對伊坂幸太郎小說的印象是，推理成分不多、故事線比較紛亂一些。 文本不是這部電影的強項，但剪輯與武打畫面非常優秀！ 可以看到劇組鏡頭的設計，與對打戲上的用心。 同行朋友覺得風格類似「金牌特務」，推薦給喜歡胡鬧劇情與畫面感的朋友。 以下涉及劇情，建議觀影後再閱讀。 個人心得本片在胡鬧的氣氛下，音樂的主題也變得很多元。時而西洋老歌、時而日文歌曲，好像什麼歌在這部電影中都能搭配畫面。 但是這些都不是電影的看點。 我認為這部電影最最優秀的地方是，畫面上的剪輯與武術指導。 以下列舉一些看完後，印象深刻的橋段： 只用幾分鐘簡單的畫面與少許的台詞，就交代完惡狼的背景。 瓢蟲與惡狼用手提箱對打的戲。原來用手提箱打架可以這麼帥。 檸檬與瓢蟲合作詐騙白死神，後來出包的橋段很有趣。 終點站白死神站在日出中，發號施令的畫面。 從馬桶內拍攝瓢蟲通話的鏡頭。 ʕ •ᴥ•ʔ：最近發現劇情優秀的推理小說，翻拍成電影通常不好看，因為已經知道小說的爆點；反倒是那些劇情沒有特別突出的小說，往往能在電影有出乎意料的表現。","categories":[{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"Movie","slug":"Movie","permalink":"https://yncbearz.github.io/tags/Movie/"}]},{"title":"名偵探柯南：萬聖節的新娘","slug":"Detective-Conan-The-Bride-of-Halloween","date":"2022-07-04T14:50:57.000Z","updated":"2025-05-30T08:15:23.230Z","comments":true,"path":"2022/07/04/Detective-Conan-The-Bride-of-Halloween/","permalink":"https://yncbearz.github.io/2022/07/04/Detective-Conan-The-Bride-of-Halloween/","excerpt":"Detective-Conan-The-Bride-of-Halloween","text":"短評名偵探柯南: 萬聖節的新娘 80分 如果在國小左右的觀眾，應該會覺得很好看的電影。 大人的話嘛，不好說。 這邊引用觀影前看到的網友評價。：「推理成分多」：「想去影廳二刷」 以下涉及劇情，建議觀影後再閱讀。 下方為主要人物名稱對照表: 角色 簡介 江戶川柯南 變小的工藤新一。 安室透 本名降谷零，一名公安警察。 村中努 前警視廳搜查一課的警視正，目暮同期同事，有著「魔鬼村中」的稱號。 克里斯汀·理察 村中警官的未婚妻，父母均為法國人。 艾蓮妮卡·拉夫連季耶娃 29歲，發誓要向炸彈犯「火焰」復仇的神秘俄羅斯組織「趕盡殺絕」首領。 個人心得開場還蠻不錯的，藉由高木及佐藤的演習，揭露了這部電影的主線，有人要破壞一場在萬聖節的婚禮。 直到警視廳前出現可疑的俄國男子，留下求救紙條後，被兇手炸歪。劇情也算中規中矩。 安室透與柯南隨後搭上線，為本作提供辦案方向與線索。 讓我開始期待柯南會用什麼樣的方式，來推理出那張被燒毀一半的求救紙條。 接下來的劇情走向就開始越來越奇怪，這邊不贅述細節，直接寫出我滿滿的吐槽。 在接下克里斯汀的委託後，少年偵探團欲前往指定地點，取得朋友送的新婚禮物。 該地點看起來像是廢棄大樓，連小孩都看得出來可怕及危險。但柯南還是義務反顧地走入房間。 ʕ •ᴥ•ʔ：有人說，不入虎穴焉得虎子，這樣才有可能取得跟兇手有關線索啊？ 沒關係，讓我們繼續看下去。 好不容易逃離爆炸，九死一生的柯南，回到醫院探視毛利叔叔。 意外發現完整的求救紙條。 經訊問才知道是，當初灰原在歸還紙條給俄國男子時，小蘭曾瞄到紙條內容後，之後在醫院回憶畫出來的！？ ʕ •ᴥ•ʔ：這不是推理漫畫嗎？不是要透過縝密的推理、一步一步將線索思索出來嗎？ 而且小蘭，你還不是本作的偵探欸。記憶力也太好了吧！ 柯南無視了我的吐槽，繼續解譯這份有圖畫及俄語的紙條。 解救千葉刑警，「趕盡殺絕」首領艾蓮妮卡與柯南的對話 在知道對方是俄國集團後，柯南直接說起了流利的俄語。 艾蓮妮卡：「你會說俄語？」柯南：「嗯啊」 ʕ •ᴥ•ʔ：不是啊，我說柯南，姑且不談你的俄語原本有沒有這麼溜。 你好歹假裝一下，這是老爸在夏威夷的時候教你的吧。 兇手揭露為克里斯汀，在一陣混亂的婚禮現場 柯南正在追捕犯人！ (槍戰進行中) 高木刑警中彈了！ … 原本是段緊湊刺激的劇情。 槍戰的正中央卻有一個心碎的未婚夫，讓其他人的外傷都顯得微不足道。 ʕ •ᴥ•ʔ：「魔鬼村中」 因為愛情，而變成寵妻好丈夫的形象。身為前警視正，卻看不穿枕邊人，其實就是真正的幕後黑手… 安室透，設計兇手自行引爆，在直升機上的炸彈。 ʕ •ᴥ•ʔ：正當我在佩服，安室透，不塊是公安警察aka零的最高負責人，智商就是不一樣的時候… 就看著他帶著聰明的頭腦，從大樓的邊緣，跳上了即將墜毀的直升機… 現在是嫌演出時間不夠，自己加戲了嗎？ 試圖阻止藍色液體與紅色液體接觸的眾人 不知道兇手，到底花了多久的時間，替換了多少的萬聖節燈籠，導致液體流到街道後，像是世界末日一般，水位甚至淹到了孩子們的小腿。 ʕ •ᴥ•ʔ：藍色液體與紅色液體接觸就會爆炸。 雖然沒有明講是什麼。不過應該是毒性很強的化學藥品吧？ 你們這樣浸泡著，真的沒問題嗎？ 爾後眾人像是拔河一般的，拉起足球的逗趣場面。沒進入故事氣氛的我，也只能荒唐地大笑了。 最後我想說 因為柯南不像進擊的巨人那樣，會讓主角群掛掉，使得許多緊張的劇情，最終還是失去了張力。 雖然很早就猜到兇手是誰，不過仍與最後一排同場的女生，過程中笑到不能自己，得到不錯的觀影體驗。 算是一部在家看，我可能不會看完，但在影廳的話，娛樂效果不錯的電影吧！ ʕ •ᴥ•ʔ：在我心中，爛片分為兩種，一種是電影無聊，在時間不多的情況下，我會建議略過這部電影。 另一種則是荒謬。 也許是劇情莫名其妙、畫面不搭聲音，說著角色不該講的台詞，導致氣氛無法烘托。 電影不停地前進，觀眾卻進入不了故事，最後只能用抽離電影的方式欣賞。 而這部柯南屬於後者。會建議如果近期評價最好的電影都看完，再到影廳觀賞。","categories":[{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"Movie","slug":"Movie","permalink":"https://yncbearz.github.io/tags/Movie/"}]},{"title":"捍衛戰士：獨行俠","slug":"Top-Gun-Maverick","date":"2022-06-26T13:00:47.000Z","updated":"2025-05-30T08:15:23.256Z","comments":true,"path":"2022/06/26/Top-Gun-Maverick/","permalink":"https://yncbearz.github.io/2022/06/26/Top-Gun-Maverick/","excerpt":"Top-Gun-Maverick","text":"短評捍衛戰士: 獨行俠 96分 個人非常喜歡的一部電影。可以先補看捍衛戰士第一集，來獲得更好的觀影體驗。 以下涉及劇情，建議觀影後再閱讀。 下方為主要人物名稱對照表: 演員 角色 湯姆·克魯斯 彼得·「獨行俠」·米契爾上校 (Captain Pete “Maverick” Mitchell) 麥爾斯·泰勒 布雷德利·「公雞」·布雷德蕭上尉 (Lieutenant Bradley “Rooster” Bradshaw) 珍妮佛·康納莉 潘妮·班傑明 (Penny Benjamin) 方·基墨 湯姆·「冰人」·卡贊斯基 (Admiral Tom “Iceman” Kazansky) 安東尼·愛德華 尼克·「呆頭鵝」·布雷德蕭 (LTJG Nick ‘Goose’ Bradshaw) 個人心得開場 (致敬第一集) 在還未完全拂曉的天，穿著制服的機組人員，走動在由鋼鐵打造的抹香鯨，航空母艦上。 像是不敢吵醒仍在睡眠中的居民般，輕輕敲打的鼓與沙鈴聲。搭配戰鬥機在跑道上，緩慢移動，齒輪與地面摩擦發出的聲響。 突然間，太陽射出如裝了奶黃包內餡的強光。一架戰鬥機騰空刺入雲霄。音樂同時進入快節奏的「Danger Zone」。 感動再次回來了。 首先我們先來看獨行俠 獨行俠的車庫 車庫掛著人生高光時刻得到的黃金勳章與獎狀，一角的照片僅有各地出身入死的戰友們。 就像是宣誓著: 「就用軍旅生涯填充生活的全部吧！」 沒有家人的獨行俠，依舊獨行。 「暗星」計畫飛行中心 在得知「無人機」計畫，要來排擠「暗星」計畫的經費時，飛行中心的人員，雙手抱胸、嘴唇緊閉，眼神失去了對工作的火球，心中已不再炙熱。 失去薪水樑柱的經濟壓力，結婚基金、孩子的養育費、還沒繳完的房貸，全都在腦海中撲向了胸口。 獨行俠看出了團隊的低氣壓，決定搶先挑戰原本兩個月後目標————10馬赫。 雖然外表不再如年輕時稚嫩，但獨行俠還是，那個敢於衝撞體制的俠。 這36年來都不曾改變。 以下讓我們來讀一下台詞及架構 北島海軍航空站 (致敬第一集) 前期有些酒館與第一天上課的戲，算是復刻第一集的劇情。 最重要的是登場了一個很重要的角色，已逝戰友呆頭鵝的兒子————公雞。 掛著歷屆學員照片的房間 這裡公雞與獨行俠為了當初入學的事情吵了起來。 公雞說: “My dad believed in you. I’m not going to make the same mistake.” 潘妮的家 獨行俠與潘妮約會時，詢問是如何跟修正與女兒的關係的。 潘妮答:「你有時就是得相信他們，讓他們犯點錯。」 後因女兒突然返家，獨行俠離開窗口時說：「我不會再離開你了。」 冰人的辦公室 因公雞與獨行俠還是處不好。冰人告訴他: “It’s time to let go.” 獨行俠回: “If I send him on this mission he might never come home.If I don’t send him he will never forgive me.” 過幾天，冰人辭世。 獨行俠偷開戰鬥機後，出任務前的航空母艦 獨行俠最後選擇公雞出任務，並告訴他: “Don’t Think. Just Do.” 公雞欲言又止，但要出發了。 任務成功，要返回航空母艦時 公雞因誘導彈用完，獨行俠壯烈犧牲。 公雞不顧軍令，返回拯救獨行俠。墜機後被獨行俠推倒問: “What Were You Thinking?!” 公雞答: “You Told Me Not To Think!” 兩人成功竊取F-14，卻被敵軍拆穿時 公雞:「如果我不在，你早就與他們開戰了。」獨行俠:「但是你在啊！」 公雞: “It’s Not The Plane, It’s The Pilot.” 成功回到航母 獨行俠: “Thank you for saving my life.”公雞: “It’s what my dad would’ve done.” 獨行俠的車庫 獨行俠與公雞整理車庫後，便帶著潘妮坐上P-51戰鬥機，翱翔天空。 總結 獨行俠，從獨自一人的車庫，到與大家同在。年紀增加，卻依舊英姿颯爽。 想守護公雞，到信任他能獨當一面，甚至最後還因此被拯救。 這些的變與不變，或許就是這部電影最吸引人的地方吧！ ʕ •ᴥ•ʔ：「你覺得捍衛戰士第一集跟第二集，誰才是更好的電影？」「拜託，現在氣氛正好，別破壞氣氛了。」","categories":[{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"Movie","slug":"Movie","permalink":"https://yncbearz.github.io/tags/Movie/"}]},{"title":"Sorting and Searching","slug":"Sorting-and-Searching","date":"2022-06-12T02:58:37.000Z","updated":"2025-05-30T08:15:23.254Z","comments":true,"path":"2022/06/12/Sorting-and-Searching/","permalink":"https://yncbearz.github.io/2022/06/12/Sorting-and-Searching/","excerpt":"Sorting-and-Searching","text":"排序與堆疊 (Sorting and Searching)常見的排序演算法泡泡排序法 (Bubble Sort) Bubble Sort Implementation 12345678910111213141516171819202122232425262728293031323334&lt;?phpnamespace App\\BubbleSort;class Program&#123; public function sort(array $unsortedItems): array &#123; $firstIndex = 0; $lastIndex = count($unsortedItems) - 1; for ($j = $lastIndex; $j &gt; $firstIndex; $j--) &#123; for ($i = $lastIndex; $i &gt; $firstIndex; $i--) &#123; if ($unsortedItems[$i] &lt; $unsortedItems[$i - 1]) &#123; $unsortedItems = $this-&gt;swap($unsortedItems, $i, $i - 1); &#125; &#125; &#125; $result = $unsortedItems; return $result; &#125; private function swap(array $unsortedItems, int $i, int $j): array &#123; $itemA = $unsortedItems[$i]; $itemB = $unsortedItems[$j]; $unsortedItems[$j] = $itemA; $unsortedItems[$i] = $itemB; return $unsortedItems; &#125;&#125; Time Complexity: $O(n^2)$ 選擇排序法 (Selection Sort) Selection Sort Implementation 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?phpnamespace App\\SelectionSort;class Program&#123; public function sort(array $unsortedItems): array &#123; $itemCount = count($unsortedItems); for ($i = 0; $i &lt; $itemCount - 1; $i++) &#123; $minInfo = $this-&gt;findMin($unsortedItems, $i); $unsortedItems = $this-&gt;swap($unsortedItems, $i, $minInfo); &#125; return $unsortedItems; &#125; private function findMin(array $unsortedItems, int $currentIndex): array &#123; $sliceItems = array_slice($unsortedItems, $currentIndex); $min = min($sliceItems); $minKey = array_keys($unsortedItems, min($sliceItems))[0]; return [ &#x27;value&#x27; =&gt; $min, &#x27;key&#x27; =&gt; $minKey, ]; &#125; private function swap(array $unsortedItems, int $currentIndex, array $minInfo): array &#123; $itemA = $unsortedItems[$currentIndex]; $itemB = $minInfo[&#x27;value&#x27;]; $unsortedItems[$currentIndex] = $itemB; $unsortedItems[$minInfo[&#x27;key&#x27;]] = $itemA; return $unsortedItems; &#125;&#125; Time Complexity: $O(n^2)$ 合併排序法 (Merge Sort) Time Complexity: $O(nlog(n))$ Merge Sort Implementation 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?phpnamespace App\\MergeSort;class Program&#123; public function sort(array $unsortedItems): array &#123; $container = $this-&gt;initContainer($unsortedItems); while (count($container) &gt; 1) &#123; $firstArray = array_shift($container); $secondArray = array_shift($container); $merged = $this-&gt;mergeToOne($firstArray, $secondArray); $container[] = $merged; &#125; $result = $container[0]; return $result; &#125; private function mergeToOne(array $firstArray, array $secondArray = []): array &#123; $result = []; $firstArrayItem = null; $secondArrayItem = null; while (count($firstArray) &gt; 0 &amp;&amp; count($secondArray) &gt; 0) &#123; if (is_null($firstArrayItem)) &#123; $firstArrayItem = $firstArray[0]; &#125; if (is_null($secondArrayItem)) &#123; $secondArrayItem = $secondArray[0]; &#125; if ($firstArrayItem &lt;= $secondArrayItem) &#123; $result[] = $firstArrayItem; array_shift($firstArray); $firstArrayItem = null; &#125; else &#123; $result[] = $secondArrayItem; array_shift($secondArray); $secondArrayItem = null; &#125; continue; &#125; if (count($firstArray) &gt; 0) &#123; $result = array_merge($result, $firstArray); &#125; if (count($secondArray) &gt; 0) &#123; $result = array_merge($result, $secondArray); &#125; return $result; &#125; private function initContainer(array $unsortedItems): array &#123; $result = []; foreach ($unsortedItems as $unsortedItem) &#123; $result[] = [$unsortedItem]; &#125; return $result; &#125;&#125; 快速排序法 (Quick Sort) Time Complexity: $O(nlog(n))$ Worst Time Complexity: $O(n^2)$ 使用分治法(Divide and Conquer)的概念。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 原始資料40 60 50 20 10 30// 選擇最左邊的資料為基準點[40] 60 50 20 10 30// 60 &gt; 40，要移到40的右邊[40] 60 50 20 10 30 ^// 50 &gt; 40，要移到40的右邊[40] 60 50 20 10 30 ^// 20 &lt; 40，要移到40的左邊[40] 60 50 20 10 30 ^20 [40] 60 50 10 30// 10 &lt; 40，要移到40的左邊20 [40] 60 50 10 30 ^20 10 [40] 60 50 30// 同理30 &lt; 40，要移到40的左邊20 10 [40] 60 50 30 ^20 10 30 [40] 60 50// 第一次排序完成20 10 30 40 60 50// 接著排序40左右兩側的資料// 先排左側資料，同樣選擇最左邊的資料為基準點// 左側基準點為20[20] 10 30 40 60 50// 左側資料排序完成10 [20] 30 40 60 50// 接著排序右側資料，一樣選擇最左邊的資料為基準點// 右側基準點為6010 20 30 40 [60] 50//右側排序完成10 20 30 40 50 [60]//排序結果10 20 30 40 50 60 Quick Sort Implementation (version 1) 12345678910111213141516171819202122232425262728&lt;?phpnamespace App\\QuickSort;class Program&#123; public function sort(array $unsortedSortItems): array &#123; if (count($unsortedSortItems) &lt;= 1) &#123; return $unsortedSortItems; &#125; $pivot = array_shift($unsortedSortItems); $left = []; $right = []; foreach ($unsortedSortItems as $unsortedSortItem) &#123; if ($unsortedSortItem &lt;= $pivot) &#123; $left[] = $unsortedSortItem; &#125; else &#123; $right[] = $unsortedSortItem; &#125; &#125; return array_merge($this-&gt;sort($left), [$pivot], $this-&gt;sort($right)); &#125;&#125; 基數排序 (Radix Sort) Time Complexity: $O(nk)$ 基數排序利用整數有限位元這個條件，迭代數字的每一位數，對每一位數分群。 1234567891011121314151617181920212223242526272829// 原始資料101 20 50 1 37// 先對個位數來分群| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9| 20|101| | | | | | 37| || 50| 1 | | | | | | | |//得到照個位數的排序20 50 101 1 37// 接著對十位數來分群| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9|101| | 20| 37| | 50| | | || 1 | | | | | | | | |//得到照十位數的排序101 1 20 37 50//最後照百位數分群| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9| 1 |101| | | | | | | || 20 | | | | | | | | || 37 | | | | | | | | || 50 | | | | | | | | |//排序結果1 20 37 50 101 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;?phpnamespace App\\RadixSort;class Program&#123; public function sort(array $unsortedItems): array &#123; if (count($unsortedItems) &lt;= 1) &#123; return $unsortedItems; &#125; $max = max($unsortedItems); $numberOfDigits = count(str_split($max, 1)); $unsortedItems = $this-&gt;convertToStringWithZero($unsortedItems, $numberOfDigits); $grouped = $this-&gt;emptyGroup(); foreach ($unsortedItems as $unsortedItem) &#123; $number = $unsortedItem % 10; $grouped[$number][] = $unsortedItem; &#125; if ($numberOfDigits == 1) &#123; return $this-&gt;flatten($grouped); &#125; for ($digit = 2; $digit &lt;= $numberOfDigits; $digit++) &#123; $grouped = $this-&gt;sortByDigitNumber($grouped, $digit); &#125; return $this-&gt;flatten($grouped); &#125; /** * @param array $unsortedItems * @param int $numberOfDigits * @return array */ private function convertToStringWithZero(array $unsortedItems, int $numberOfDigits): array &#123; $result = []; foreach ($unsortedItems as $unsortedItem) &#123; $unsortedItemsWithZero = str_pad($unsortedItem, $numberOfDigits, &#x27;0&#x27;, STR_PAD_LEFT); $result[] = $unsortedItemsWithZero; &#125; return $result; &#125; private function emptyGroup(): array &#123; return [ 0 =&gt; [], 1 =&gt; [], 2 =&gt; [], 3 =&gt; [], 4 =&gt; [], 5 =&gt; [], 6 =&gt; [], 7 =&gt; [], 8 =&gt; [], 9 =&gt; [], ]; &#125; private function flatten(array $grouped): array &#123; $result = []; foreach ($grouped as $number =&gt; $items) &#123; foreach ($items as $item) &#123; $result[] = (int)$item; &#125; &#125; return $result; &#125; private function sortByDigitNumber(array $grouped, int $digit): array &#123; $result = $this-&gt;emptyGroup(); $flatten = $this-&gt;flatten($grouped); foreach ($flatten as $item) &#123; $number = $this-&gt;getCurrentDigitNumber($item, $digit); $result[$number][] = $item; &#125; return $result; &#125; public function getCurrentDigitNumber(int $item, int $digit): int &#123; $digitNumber = $item % 10; if ($digit == 1) &#123; return $digitNumber; &#125; for ($i = 2; $i &lt;= $digit; $i++) &#123; $item = ($item - ($item % 10)) / 10; $digitNumber = $item % 10; &#125; return $digitNumber; &#125;&#125; 搜尋演算法二元搜尋法 (Binary Search) 面試題目10.1 Sorted MergeYou are given two sorted arrays, A and B, where A has a large enough buffer at the end to hold B. Write a method to merge B into A in sorted order.(Hints.)由陣列後面插入比較好，因為有空位。 123456789101112131415161718192021222324252627282930313233343536&lt;?phpclass SortedMerge&#123; public static function merge(array &amp;$a, array &amp;$b) &#123; $indexA = self::getLastElementIndex($a); $indexB = self::getLastElementIndex($b); $indexMerged = count($a) - 1; while ($indexB &gt;= 0) &#123; if ($indexA &gt;= 0 &amp;&amp; $a[$indexA] &gt; $b[$indexB]) &#123; $a[$indexMerged] = $a[$indexA]; $indexA--; &#125; else &#123; $a[$indexMerged] = $b[$indexB]; $indexB--; &#125; $indexMerged--; &#125; &#125; public static function getLastElementIndex(array $array): int &#123; $result = -1; foreach ($array as $value) &#123; if (is_null($value)) &#123; break; &#125; $result++; &#125; return $result; &#125;&#125; 10.2 Group AnagramsWrite a method to sort an array of strings so that all the anagrams are next to each other.anagrams (易位構詞遊戲): 是將組成一個詞或短句的字母重新排列順序，所有字母的都被使用一次，構造出一些新的詞或短句。 example: “earth” &lt;—&gt; “heart” “eleven plus two” &lt;—&gt; “twelve plus one” 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?phpclass AnagramGrouper&#123; public function groupAnagrams(array $words) &#123; $result = []; foreach ($words as $index =&gt; $word) &#123; if (!isset($words[$index])) &#123; continue; &#125; $divides = self::divideIntoGroups($words, $index); $sameGroupwords = $divides[&#x27;same_group_words&#x27;]; $result = array_merge($result, $sameGroupwords); $sameGroupwordIndexes = $divides[&#x27;same_group_word_indexes&#x27;]; foreach ($sameGroupwordIndexes as $sameGroupwordIndex) &#123; unset($words[$sameGroupwordIndex]); &#125; &#125; return $result; &#125; private function divideIntoGroups(array $words, int $targetIndex): array &#123; $sameGroupwords = []; $sameGroupwordIndexes = []; $targetWord = $words[$targetIndex]; $targetCharacterCounts = $this-&gt;getCharacterCounts($targetWord); foreach ($words as $index =&gt; $currentWord) &#123; if ($index == $targetIndex) &#123; $sameGroupwords[] = $targetWord; $sameGroupwordIndexes[] = $index; continue; &#125; $currentCharacterCounts = $this-&gt;getCharacterCounts($currentWord); if ($currentCharacterCounts == $targetCharacterCounts) &#123; $sameGroupwords[] = $currentWord; $sameGroupwordIndexes[] = $index; &#125; &#125; return [ &#x27;same_group_words&#x27; =&gt; $sameGroupwords, &#x27;same_group_word_indexes&#x27; =&gt; $sameGroupwordIndexes, ]; &#125; private function initCharcterCounts(): array &#123; return [ &#x27;a&#x27; =&gt; 0, &#x27;b&#x27; =&gt; 0, &#x27;c&#x27; =&gt; 0, &#x27;d&#x27; =&gt; 0, &#x27;e&#x27; =&gt; 0, &#x27;f&#x27; =&gt; 0, &#x27;g&#x27; =&gt; 0, &#x27;h&#x27; =&gt; 0, &#x27;i&#x27; =&gt; 0, &#x27;j&#x27; =&gt; 0, &#x27;k&#x27; =&gt; 0, &#x27;l&#x27; =&gt; 0, &#x27;m&#x27; =&gt; 0, &#x27;n&#x27; =&gt; 0, &#x27;o&#x27; =&gt; 0, &#x27;p&#x27; =&gt; 0, &#x27;q&#x27; =&gt; 0, &#x27;r&#x27; =&gt; 0, &#x27;s&#x27; =&gt; 0, &#x27;t&#x27; =&gt; 0, &#x27;u&#x27; =&gt; 0, &#x27;v&#x27; =&gt; 0, &#x27;w&#x27; =&gt; 0, &#x27;x&#x27; =&gt; 0, &#x27;y&#x27; =&gt; 0, &#x27;z&#x27; =&gt; 0 ]; &#125; private function getCharacterCounts(string $word): array &#123; $charcterCounts = $this-&gt;initCharcterCounts(); $characters = str_split($word); foreach ($characters as $character) &#123; $charcterCounts[$character]++; &#125; return $charcterCounts; &#125;&#125; 10.3 Search in Rotated ArrayGiven a sorted array of n integers that has been rotated an unknown number of times, write code to find an element in the array. You may assume that the array was originally sorted in increasing order.123456[1,2,3,4,5,6][6,1,2,3,4,5][5,6,1,2,3,4][4,5,6,1,2,3][3,4,5,6,1,2][2,3,4,5,6,1] 思路: 從小至大排列的旋轉，至少有一側排序是對的。 若目標在排序正確的一側，則binary search。若目標在另一側，則繼續從另一側搜尋。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117&lt;?phpclass SearchedInRotatedArray&#123; const ITEM_NOT_FOUND = -1; public function search(array $items, int $target, ?int $left = null, ?int $right = null): int &#123; $originalItemsCount = count($items); if ($originalItemsCount == 0) &#123; return self::ITEM_NOT_FOUND; &#125; if ($originalItemsCount == 1) &#123; return ($items[0] == $target) ? 0 : self::ITEM_NOT_FOUND; &#125; if (is_null($left)) &#123; $left = 0; &#125; if (is_null($right)) &#123; $right = $originalItemsCount - 1; &#125; $mid = (int)floor(($left + $right) / 2); if ($mid &lt; 0) &#123; return self::ITEM_NOT_FOUND; &#125; if ($items[$mid] == $target) &#123; return $mid; &#125; if ($items[$left] == $target) &#123; return $left; &#125; if ($items[$right] == $target) &#123; return $right; &#125; $isLeftSorted = ($items[$left] &lt;= $items[$mid]) ? true : false; $isRightSorted = ($items[$mid] &lt;= $items[$right]) ? true : false; if ( ($items[$left] &lt; $target) &amp;&amp; ($target &lt; $items[$mid]) &amp;&amp; $isLeftSorted ) &#123; return $this-&gt;binarySearch($items, $target, $left, $mid); &#125; if ( ($items[$mid] &lt; $target) &amp;&amp; ($target &lt; $items[$right]) &amp;&amp; $isRightSorted ) &#123; return $this-&gt;binarySearch($items, $target, $mid, $right); &#125; if ($isLeftSorted) &#123; return $this-&gt;search($items, $target, $mid, $right - 1); &#125; if ($isRightSorted) &#123; return $this-&gt;search($items, $target, $left, $mid - 1); &#125; return self::ITEM_NOT_FOUND; &#125; private function binarySearch(array $items, int $target, int $left, int $right): int &#123; $originalItemsCount = count($items); if ($originalItemsCount == 0) &#123; return self::ITEM_NOT_FOUND; &#125; if ($originalItemsCount == 1) &#123; return ($items[0] == $target) ? 0 : self::ITEM_NOT_FOUND; &#125; $mid = (int)floor(($left + $right) / 2); if ($items[$mid] == $target) &#123; return $mid; &#125; if ($items[$left] == $target) &#123; return $left; &#125; if ($items[$right] == $target) &#123; return $right; &#125; if ($items[$mid] &gt; $target) &#123; return $this-&gt;binarySearch($items, $target, $left, $mid); &#125; else &#123; return $this-&gt;binarySearch($items, $target, $mid, $right); &#125; &#125;&#125; 10.4 Sorted Search, No SizeYou are given an array like data structure Listy which lacks a size method. It does, however, have an elementAt(i) method that returns the element at index i in 0(1) time. If i is beyond the bounds of the data structure, it returns -1. (For this reason, the data structure only supports positive integers.) Given a Listy which contains sorted, positive integers, find the index at which an element x occurs. If x occurs multiple times, you may return any index.思路: 先找出Listy大概的長度 (利用指數加大的方式)。 接著使用二元搜尋。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?phpclass Listy&#123; protected array $items; const ITEM_NOT_FOUND = -1; public function __construct(array $items) &#123; $this-&gt;items = $items; &#125; public function elementAt(int $index): int &#123; $result = self::ITEM_NOT_FOUND; if (isset($this-&gt;items[$index])) &#123; return $this-&gt;items[$index]; &#125; return $result; &#125;&#125;class SortedSearchNoSize&#123; protected Listy $listy; const ITEM_NOT_FOUND = -1; public function __construct(Listy $listy) &#123; $this-&gt;listy = $listy; &#125; public function search(int $target): int &#123; $firstItem = $this-&gt;listy-&gt;elementAt(0); if ($firstItem == self::ITEM_NOT_FOUND) &#123; return self::ITEM_NOT_FOUND; &#125; if ($firstItem == $target) &#123; return 0; &#125; $index = 1; while ($this-&gt;listy-&gt;elementAt($index) != self::ITEM_NOT_FOUND) &#123; $index = $index * 2; &#125; return $this-&gt;binarySearch($target, 0, $index); &#125; private function binarySearch(int $target, int $left, int $right): int &#123; while ($left &lt;= $right) &#123; $mid = (int)floor(($left + $right) / 2); $midValue = $this-&gt;listy-&gt;elementAt($mid); if ($midValue &gt; $target || $midValue == -1) &#123; $right = $mid - 1; &#125; else if ($midValue &lt; $target) &#123; $left = $mid + 1; &#125; else &#123; return $mid; &#125; &#125; return self::ITEM_NOT_FOUND; &#125;&#125; 10.5 Sparse SearchGiven a sorted array of strings that is interspersed with empty strings, write a method to find the location of a given string.思路:先找中點附近，不為空的字串。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&lt;?phpclass SparseSearch&#123; protected array $items; const ITEM_NOT_FOUND = -1; public function __construct(array $items) &#123; $this-&gt;items = $items; &#125; public function search(string $target, ?int $left = null, ?int $right = null): int &#123; $items = $this-&gt;items; if (count($items) == 0) &#123; return self::ITEM_NOT_FOUND; &#125; if (count($items) == 1) &#123; return ($items[0] == $target) ? 0 : self::ITEM_NOT_FOUND; &#125; if (is_null($left)) &#123; $left = 0; &#125; if (is_null($right)) &#123; $right = count($items) - 1; &#125; if ($left &gt; $right) &#123; return self::ITEM_NOT_FOUND; &#125; $mid = floor(($left + $right) / 2); $currentIndex = $mid; $currentValue = $items[$mid]; if ($currentValue == &#x27;&#x27;) &#123; $closestNotEmptyPointInfo = $this-&gt;findClosestNotEmptyPoint($currentIndex); $currentIndex = $closestNotEmptyPointInfo[&#x27;index&#x27;]; $currentValue = $closestNotEmptyPointInfo[&#x27;value&#x27;]; if ($currentIndex == self::ITEM_NOT_FOUND) &#123; return self::ITEM_NOT_FOUND; &#125; &#125; if ($currentValue == $target) &#123; return $currentIndex; &#125; if ($items[$left] == $target) &#123; return $left; &#125; if ($items[$right] == $target) &#123; return $right; &#125; if (strnatcmp($currentValue, $target) &gt; 0) &#123; return $this-&gt;search($target, $left, $currentIndex - 1); &#125; if (strnatcmp($currentValue, $target) &lt; 0) &#123; return $this-&gt;search($target, $currentIndex, $right - 1); &#125; return self::ITEM_NOT_FOUND; &#125; private function findClosestNotEmptyPoint(int $midPointIndex) &#123; $closestNotEmptyPointIndex = self::ITEM_NOT_FOUND; $closestNotEmptyPointValue = &#x27;&#x27;; $left = $midPointIndex - 1; $right = $midPointIndex + 1; while ( isset($this-&gt;items[$left]) || isset($this-&gt;items[$right]) ) &#123; if ( isset($this-&gt;items[$right]) &amp;&amp; $this-&gt;items[$right] != &#x27;&#x27; ) &#123; $closestNotEmptyPointIndex = $right; $closestNotEmptyPointValue = $this-&gt;items[$closestNotEmptyPointIndex]; break; &#125; if ( isset($this-&gt;items[$left]) &amp;&amp; $this-&gt;items[$left] != &#x27;&#x27; ) &#123; $closestNotEmptyPointIndex = $left; $closestNotEmptyPointValue = $this-&gt;items[$closestNotEmptyPointIndex]; break; &#125; $right++; $left--; if ($left &gt; $right) &#123; break; &#125; &#125; return [ &#x27;index&#x27; =&gt; $closestNotEmptyPointIndex, &#x27;value&#x27; =&gt; $closestNotEmptyPointValue ]; &#125;&#125; 10.6 Sort Big FileImagine you have a 20 GB file with one string per line. Explain how you would sort the file.因限制了20GB的大小，表示不能單純把全部資料帶進記憶體處理。 我們可以將檔案分塊，每一塊獨立排序，存進檔案。 待所有區塊排序後，再將區塊一塊一塊合併(可透過每次存取第一行的合併排序)，最終產生完全排序的檔案。 此演算法稱為外排序 (external sort)。 (Reference.) Quick Sort Implementation In PHP 易位構詞遊戲 ʕ •ᴥ•ʔ：排序演算法還有很多，之後有時間再來補充吧！","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"460.lfu-cache","slug":"460-lfu-cache","date":"2022-05-28T08:44:58.000Z","updated":"2025-05-30T08:15:23.213Z","comments":true,"path":"2022/05/28/460-lfu-cache/","permalink":"https://yncbearz.github.io/2022/05/28/460-lfu-cache/","excerpt":"460.lfu-cache","text":"Description:Design and implement a data structure for a Least Frequently Used (LFU) cache.Implement the LFUCache class: LFUCache(int capacity) Initializes the object with the capacity of the data structure. int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1. void put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated. To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key. When a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it. The functions get and put must each run in O(1) average time complexity. Example 1: 1234567891011121314151617181920212223242526Input[&quot;LFUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;][[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]Output[null, null, null, 1, null, -1, 3, null, -1, 3, 4]Explanation// cnt(x) = the use counter for key x// cache=[] will show the last used order for tiebreakers (leftmost element is most recent)LFUCache lfu = new LFUCache(2);lfu.put(1, 1); // cache=[1,_], cnt(1)=1lfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1lfu.get(1); // return 1 // cache=[1,2], cnt(2)=1, cnt(1)=2lfu.put(3, 3); // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2. // cache=[3,1], cnt(3)=1, cnt(1)=2lfu.get(2); // return -1 (not found)lfu.get(3); // return 3 // cache=[3,1], cnt(3)=2, cnt(1)=2lfu.put(4, 4); // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1. // cache=[4,3], cnt(4)=1, cnt(3)=2lfu.get(1); // return -1 (not found)lfu.get(3); // return 3 // cache=[3,4], cnt(4)=1, cnt(3)=3lfu.get(4); // return 4 // cache=[4,3], cnt(4)=2, cnt(3)=3 Constraints: 0 &lt;&#x3D; capacity &lt;&#x3D; $10^4$ 0 &lt;&#x3D; key &lt;&#x3D; $10^5$ 0 &lt;&#x3D; value &lt;&#x3D; $10^9$ At most $2 * 10^5$ calls will be made to get and put. Double Linked List (with sentinel node) 優點：透過設置sentinel，可以快速取得第一個節點和最後一個節點。 Appropriate Answer (Double Linked List): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189&lt;?phpnamespace LeetCode\\LFUCache;class Node&#123; public ?int $key; public ?int $value; public int $frequence; public ?Node $prev; public ?Node $next; public function __construct( ?int $key, ?int $value ) &#123; $this-&gt;key = $key; $this-&gt;value = $value; $this-&gt;frequence = 1; $this-&gt;prev = null; $this-&gt;next = null; &#125;&#125;class DoubleLinkedList&#123; public Node $sentinel; public int $size; public function __construct() &#123; $this-&gt;sentinel = new Node(null, null); $this-&gt;sentinel-&gt;next = $this-&gt;sentinel; $this-&gt;sentinel-&gt;prev = $this-&gt;sentinel; $this-&gt;size = 0; &#125; public function append(Node $node) &#123; $node-&gt;prev = $this-&gt;sentinel; $node-&gt;next = $this-&gt;sentinel-&gt;next; $this-&gt;sentinel-&gt;next-&gt;prev = $node; $this-&gt;sentinel-&gt;next = $node; $this-&gt;size++; &#125; public function pop(?Node $node = null): ?Node &#123; if ($this-&gt;size == 0) &#123; return null; &#125; //good thinking if (is_null($node)) &#123; $node = $this-&gt;sentinel-&gt;prev; &#125; $node-&gt;prev-&gt;next = $node-&gt;next; $node-&gt;next-&gt;prev = $node-&gt;prev; $this-&gt;size--; return $node; &#125;&#125;class LFUCache&#123; public int $capacity; public int $size; public array $nodeDictionary; public array $doubleLinkedListCollection; public int $minFrequence; const NODE_NOT_EXISTS = -1; /** * @param int $capacity */ public function __construct($capacity) &#123; $this-&gt;capacity = $capacity; $this-&gt;size = 0; $this-&gt;nodeDictionary = []; $this-&gt;doubleLinkedListCollection = []; $this-&gt;minFrequence = 0; &#125; /** * @param int $key * @return int */ public function get($key) &#123; if (!isset($this-&gt;nodeDictionary[$key])) &#123; return self::NODE_NOT_EXISTS; &#125; $node = $this-&gt;nodeDictionary[$key]; $frequence = $node-&gt;frequence; $doubleLinkedList = $this-&gt;doubleLinkedListCollection[$frequence]; $doubleLinkedList-&gt;pop($node); if ($doubleLinkedList-&gt;size == 0 &amp;&amp; $frequence == $this-&gt;minFrequence) &#123; $this-&gt;minFrequence++; &#125; $node-&gt;frequence++; $frequence = $node-&gt;frequence; if (!isset($this-&gt;doubleLinkedListCollection[$frequence])) &#123; $this-&gt;doubleLinkedListCollection[$frequence] = new DoubleLinkedList(); &#125; $doubleLinkedList = $this-&gt;doubleLinkedListCollection[$frequence]; $doubleLinkedList-&gt;append($node); return $node-&gt;value; &#125; /** * @param int $key * @param int $value * @return void */ public function put($key, $value): void &#123; if ($this-&gt;capacity == 0) &#123; return; &#125; if (isset($this-&gt;nodeDictionary[$key])) &#123; $node = $this-&gt;nodeDictionary[$key]; $node-&gt;value = $value; $frequence = $node-&gt;frequence; $doubleLinkedList = $this-&gt;doubleLinkedListCollection[$frequence]; $doubleLinkedList-&gt;pop($node); if ($doubleLinkedList-&gt;size == 0 &amp;&amp; $frequence == $this-&gt;minFrequence) &#123; $this-&gt;minFrequence++; &#125; $node-&gt;frequence++; $frequence = $node-&gt;frequence; if (!isset($this-&gt;doubleLinkedListCollection[$frequence])) &#123; $this-&gt;doubleLinkedListCollection[$frequence] = new DoubleLinkedList(); &#125; $doubleLinkedList = $this-&gt;doubleLinkedListCollection[$frequence]; $doubleLinkedList-&gt;append($node); return; &#125; if ($this-&gt;size == $this-&gt;capacity) &#123; $doubleLinkedList = $this-&gt;doubleLinkedListCollection[$this-&gt;minFrequence]; $unsetNode = $doubleLinkedList-&gt;pop(); $unsetNodeKey = $unsetNode-&gt;key; unset($this-&gt;nodeDictionary[$unsetNodeKey]); $this-&gt;size--; if ($doubleLinkedList-&gt;size == 0 &amp;&amp; $this-&gt;minFrequence &gt; 0) &#123; $this-&gt;minFrequence--; &#125; &#125; $node = new Node($key, $value); $this-&gt;nodeDictionary[$key] = $node; if (!isset($this-&gt;doubleLinkedListCollection[1])) &#123; $this-&gt;doubleLinkedListCollection[1] = new DoubleLinkedList(); &#125; $doubleLinkedList = $this-&gt;doubleLinkedListCollection[1]; $doubleLinkedList-&gt;append($node); $this-&gt;minFrequence = 1; $this-&gt;size++; &#125;&#125; Time Complexity: $O(1)$ (Reference.) Python concise solution detailed explanation: Two dict + Doubly linked list ʕ •ᴥ•ʔ：這題難度hard，看完討論還是弄了好久好久。有小瑕疵時，第21個test case不好debug。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"15.3-sum","slug":"15-3-sum","date":"2022-05-23T14:43:56.000Z","updated":"2025-05-30T08:15:23.212Z","comments":true,"path":"2022/05/23/15-3-sum/","permalink":"https://yncbearz.github.io/2022/05/23/15-3-sum/","excerpt":"15.3-sum","text":"Description:Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i !&#x3D; j, i !&#x3D; k, and j !&#x3D; k, and nums[i] + nums[j] + nums[k] &#x3D;&#x3D; 0.Notice that the solution set must not contain duplicate triplets. Example 1: 12Input: nums = [-1,0,1,2,-1,-4]Output: [[-1,-1,2],[-1,0,1]] Example 2: 12Input: nums = []Output: [] Example 3: 12Input: nums = [0]Output: [] Constraints: 0 &lt;&#x3D; nums.length &lt;&#x3D; 3000 $-10^5$ &lt;&#x3D; nums[i] &lt;&#x3D; $10^5$ Appropriate Answer (Sliding Window): 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283&lt;?phpnamespace LeetCode\\ThreeSum;class Solution&#123; /** * @param int[] $nums * @return int[][] */ public function threeSum($nums) &#123; $answer = []; $length = count($nums); if ($length &lt; 3) &#123; return $answer; &#125; sort($nums); for ($i = 0; $i &lt; $length - 2; $i++) &#123; if ($i != 0 &amp;&amp; $nums[$i - 1] == $nums[$i]) &#123; continue; &#125; $windowLeft = $i + 1; $windowRight = $length - 1; while ($windowLeft &lt; $windowRight) &#123; if ($nums[$i] + $nums[$windowLeft] + $nums[$windowRight] == 0) &#123; $answer[] = [$nums[$i], $nums[$windowLeft], $nums[$windowRight]]; $windowLeft++; while ( $windowLeft &lt; $windowRight &amp;&amp; $nums[$windowLeft - 1] == $nums[$windowLeft] ) &#123; $windowLeft++; &#125; $windowRight--; while ( $windowLeft &lt; $windowRight &amp;&amp; $nums[$windowRight + 1] == $nums[$windowRight] ) &#123; $windowRight--; &#125; &#125; if ($nums[$i] + $nums[$windowLeft] + $nums[$windowRight] &lt; 0) &#123; $windowLeft++; while ( $windowLeft &lt; $windowRight &amp;&amp; $nums[$windowLeft] == $nums[$windowLeft - 1] ) &#123; $windowLeft++; continue; &#125; continue; &#125; if ($nums[$i] + $nums[$windowLeft] + $nums[$windowRight] &gt; 0) &#123; $windowRight--; while ( $windowLeft &lt; $windowRight &amp;&amp; $nums[$windowRight] == $nums[$windowRight + 1] ) &#123; $windowRight--; continue; &#125; continue; &#125; &#125; &#125; return $answer; &#125;&#125; Time Complexity: $O(n^2)$ ʕ •ᴥ•ʔ：排序+選定第一個數字後，創造出使用反向Sliding Window的情境。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"3.longest-substring-without-repeating-characters","slug":"3-longest-substring-without-repeating-characters","date":"2022-04-27T16:16:08.000Z","updated":"2025-05-30T08:15:23.213Z","comments":true,"path":"2022/04/28/3-longest-substring-without-repeating-characters/","permalink":"https://yncbearz.github.io/2022/04/28/3-longest-substring-without-repeating-characters/","excerpt":"3.longest-substring-without-repeating-characters","text":"Description:Given a string s, find the length of the longest substring without repeating characters.Constraints: 0 &lt;&#x3D; s.length &lt;&#x3D; $5*10^4$ s consists of English letters, digits, symbols and spaces Sliding Window Appropriate Answer (Sliding Window): 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpnamespace LeetCode\\LongestSubstringWithoutRepeatintCharacters;class Solution&#123; /** * @param string $string * @return int */ public function lengthOfLongestSubstring($string) &#123; $answer = 0; $length = strlen($string); if ($length == 0) &#123; return $answer; &#125; $windowLeft = 0; $windowRight = 0; $usedCharacters = []; while ($windowRight &lt; $length) &#123; $character = $string[$windowRight]; while ( isset($usedCharacters[$character]) &amp;&amp; $windowLeft &lt;= $usedCharacters[$character] ) &#123; $windowLeft++; &#125; $usedCharacters[$character] = $windowRight; $windowRight++; $answer = max($answer, $windowRight - $windowLeft); &#125; return $answer; &#125;&#125; Time Complexity: $O(n)$ ʕ •ᴥ•ʔ：一開始有嘗試暴力解，但最後一個test case跑不過。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"從輸入網址到渲染畫面，發生了什麼事？","slug":"How-Does-The-Internet-Work","date":"2022-04-21T06:12:55.000Z","updated":"2025-05-30T08:15:23.244Z","comments":true,"path":"2022/04/21/How-Does-The-Internet-Work/","permalink":"https://yncbearz.github.io/2022/04/21/How-Does-The-Internet-Work/","excerpt":"How-Does-The-Internet-Work","text":"解析URL (Uniform Resource Locator)https://yncbearz.github.io/ 通訊協定類型 (Protocol): https, http, ftp, etc. 伺服器位址 (Domain): 可放域名或IP address 埠號 (Port): http預設為80、https預設為443 (Note.)Socket &#x3D; IP address + Port 解析DNS (Domain Name Server) 檢查本地的 DNS 快取 檢查電腦中的 .host 檔 向DNS伺服器發送詢問 Name Description Example DNS 將域名轉換為 IP 地址的分散式資訊系統。 將 example.com 轉換為 192.0.2.1 A record 將域名映射到 IPv4 地址的 DNS 記錄類型。 將 example.com 映射到 192.0.2.1 CNAME 將一個域名指向另一個域名的 DNS 記錄類型。 將 www.example.com 指向 example.com AAAA 將域名映射到 IPv6 地址的 DNS 記錄類型。 將 example.com 映射到 2001:0db8:85a3:0000:0000:8a2e:0370:7334 建立TCP&#x2F;IP (Transmission Control Protocol&#x2F;Internet Protocol)HTTPS是指將HTTP使用SSL加密後再利用TCP發送，加強安全性。TCP&#x2F;IP會經由三次握手建立連線，再經由四次揮手斷開連線。 Get vs Post Get: 瀏覽器將headers與data同時送出，因此只會產生1個TCP封包，最後伺服器端回應200與資料。 Post: 瀏覽器先將headers送出，等到伺服器端回應100 continue後再傳送data，因此會產生2個TCP封包，最後伺服器端回應 200與資料。 伺服器處理請求並返回HTTP回應通用標頭 (General Header) Request URL: 請求位置。 Request Method: 請求方式。 Status Code: 狀態碼。 Remote Address: 請求遠端伺服器位址，會轉為IP。 狀態碼 (Status Code) 1XX: 資訊回應 (Informational responses) 2XX: 成功回應 (Successful responses) 3XX: 重定向 (Redirects) 4XX: 用戶端錯誤 (Client errors) 5XX: 伺服器端錯誤 (Server errors) 更詳盡的資訊在這裡。 請求與回應標頭 (Request &amp; Response Headers) :authority: 要連接的遠端主機和接口訊息。 :method: 連接方法。 :path: 請求網址的檔案路徑和查詢字串。 :scheme: 請求網址的協議規範。(ex: https) 以上為HTTP&#x2F;2的偽請求標頭(pseudo-header field)，並不屬於 HTTP 正規的欄位，因此必須出現在正規欄位之前。 accept: 能夠接受的回應內容類型(content-types)。(ex: text&#x2F;plain) accept-encoding: 能夠接受的編碼方式。(ex: gzip) accept-language: 能夠接受的回應內容的自然語言。(ex: en) cache-control: 用來指定在這次的請求或回應中的所有快取機制都必須遵守的指令。(ex: no-cache) cookie: 由伺服器透過set-cookie所代入的文字串。 upgrade-insecure-requests: 指示伺服器若遇到http時要改為https。 user-agent: 瀏覽器的瀏覽器身分標識字串。 (Reference.) 30. [WEB] 從輸入網址列到渲染畫面，過程經歷了什麼事情？ 在瀏覽器輸入網址並送出後，到底發生了什麼事？ HTTP狀態碼 ʕ •ᴥ•ʔ：面試熱門問題，想藉此整理知識。會隨著時間成長而有更多的Reference。謝謝網路上許多願意分享的前輩。","categories":[],"tags":[{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"}]},{"title":"Math And Logic Puzzles","slug":"Math-And-Logic-Puzzles","date":"2022-04-02T03:10:27.000Z","updated":"2025-05-30T08:15:23.249Z","comments":true,"path":"2022/04/02/Math-And-Logic-Puzzles/","permalink":"https://yncbearz.github.io/2022/04/02/Math-And-Logic-Puzzles/","excerpt":"Math-And-Logic-Puzzles","text":"質數 (Prime Numbers)每個正整數可以分解成質數的乘積。 例如：$$84 &#x3D; 2^2 * 3^1 * 5^0 * 7^1 * 11^0 * 13^0 * 17^0 * … $$ 注意其中有很多質數的指數為0。 整除 (Divisibility)若數字$x$整除數字$y$ ( 寫成 $x|y$ 或 $mod(y, x) &#x3D; 0$ 或 $y≡0 (mod x)$ )，則$x$所有的質因數必須在$y$的質因數中。 更精確的表示：Let $x &#x3D; 2^{j_0} * 3^{j_1} * 5^{j_2} * 7^{j_3} * 11^{j_4} * … $Let $y &#x3D; 2^{k_0} * 3^{k_1} * 5^{k_2} * 7^{k_3} * 11^{k_4} * … $If $x|y,$ then $j_i &lt;&#x3D; k_i, ∀i∈N$ $x$與$y$的最大公因數是：$$gcd(x, y) &#x3D; 2^{min(j_0, k_0)} * 3^{min(j_1, k_1)} * 5^{min(j_2, k_2)} * …$$ $x$與$y$的最小公倍數是：$$lcm(x, y) &#x3D; 2^{max(j_0, k_0)} * 3^{max(j_1, k_1)} * 5^{max(j_2, k_2)} * …$$ 思考一下$gcd * lcm$會得到什麼？ $gcd * lcm$$&#x3D; 2^{min(j_0, k_0)} * 2^{max(j_0, k_0)} * 3^{min(j_1, k_1)} * 3^{max(j_1, k_1)} * …$$&#x3D; 2^{min(j_0, k_0) + max(j_0, k_0)} * 3^{min(j_1, k_1) + max(j_1, k_1)} * …$$&#x3D; 2^{j_0 + k_0} * 3^{j_1 + k_1} * …$$&#x3D; 2^{j_0} * 2^{k_0} * 3^{j_1} * 3^{k_1}…$$&#x3D; xy$ 檢查質數 (Checking for Primality) 從2迭代到$n-1$ 12345678910111213141516&lt;?phpfunction primeNaive(int $n)&#123; if ($n &lt; 2) &#123; return false; &#125; for ($i = 2; $i &lt; $n; $i++) &#123; if ($n % $i == 0) &#123; return false; &#125; &#125; return true;&#125; 從2迭代到$n^{1&#x2F;2}$ 123456789101112131415161718&lt;?phpfunction primeNaive(int $n)&#123; if ($n &lt; 2) &#123; return false; &#125; $sqrt = sqrt($n); for ($i = 2; $i &lt; $sqrt; $i++) &#123; if ($n % $i == 0) &#123; return false; &#125; &#125; return true;&#125; 產生質數清單：埃拉托斯特尼篩法 (Generating a List of Primes: The Sieve of Eratosthenes)利用所有非質數可被質數整除的概念來產生質數清單。 我們從最大值$max$的所有數字清單開始。 首先去掉可被2整除的數字，然後找出下個質數 (下個沒有被去掉的數字)，並去掉可以被它整除的數字。最終可以得到一個從2到$max$的質數清單。 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpfunction sieveOfEratosthenes(int $maxNumber): array&#123; $numbers = range(2, $maxNumber); $prime = 2; while ($prime &lt;= sqrt($maxNumber)) &#123; $numbers = crossOff($numbers, $prime); $prime = getNextPrime($numbers, $prime); &#125; return $numbers;&#125;function crossOff(array $numbers, int $prime): array&#123; foreach ($numbers as $key =&gt; $number) &#123; if ($number &gt; $prime &amp;&amp; $number % $prime == 0) &#123; unset($numbers[$key]); &#125; &#125; return array_values($numbers);&#125;function getNextPrime(array $numbers, int $prime): int&#123; foreach ($numbers as $key =&gt; $number) &#123; if ($number &gt; $prime) &#123; return $number; &#125; &#125; return PHP_INT_MAX;&#125; 面試題目6.1 The Heavy PillYou have 20 bottles of pills. 19 bottles have 1.0 gram pills, but one has pills of weight 1.1 grams. Given a scale that provides an exact measurement, how would you find the heavy bottle? You can only use the scale once.由於我們只能稱一次。因此我們必須一次稱所有藥丸。 透過將瓶子編號，從編號#1的瓶子取出1顆藥丸、編號#2的瓶子取出2顆藥丸、… 我們會取出$$1+2+3+…+20 &#x3D; \\frac{21*20}{2} &#x3D; 210顆藥丸$$ 若全為1克時，為210克。超出的重量則來自1.1克的藥丸。 可透過以下公式找出瓶子編號：$$\\frac{weight - 210}{0.1}$$ 6.2 BasketballYou have a basketball hoop and someone says that you can play one of two games. Game 1: You get one shot to make the hoop. Game 2: You get three shots and you have to make two of three shots. If p is the probability of making a particular shot, for which values of p should you pick one game or the other?賭法一的勝率：p。 賭法二的勝率： $P(賭法二)$$&#x3D; P(投三中三) + P(投三中二)$$&#x3D; p * p * p + p * p * (1-p) * 3$$&#x3D; p^3 + 3p^2(1-p)$ 要選哪一種玩法? 考慮$p &gt; p^3 + 3p^2(1-p)$$2p^3 - 3p^2 + p &gt; 0$$2p^2 - 3p + 1 &gt; 0$$(2p-1)(p-1) &gt; 0$ 得$0 &lt; p &lt; \\frac{1}{2}$ 故(i) 當$0 &lt; p &lt; \\frac{1}{2}$選賭法一。(ii) 當$0.5 &lt; p &lt; 1$選賭法二。(iii) 當$p &#x3D; 0$、$p &#x3D; 0.5$、$p &#x3D; 1$時則都可以。 6.3 DominosThere is an 8x8 chessboard in which two diagonally opposite corners have been cut off. You are given 31 dominos, and a single domino can cover exactly two squares. Can you use the 31 dominos to cover the entire board? Prove your answer (by providing an example or showing why it’s impossible). 6.4 Ants on a TriangleThere are three ants on different vertices of a triangle. What is the probability of collision (between any two or all of them) if they start walking on the sides of the triangle? Assume that each ant randomly picks a direction, with either direction being equally likely to be chosen, and that they walk at the same speed. Similarly, find the probability of collision with n ants on an n-vertex polygon.不碰撞的情況比較單純。 情況一：全部都走順時針的機率 $\\frac{1}{2} * \\frac{1}{2} * \\frac{1}{2} &#x3D; \\frac{1}{8}$ 情況二：全部都走逆時針的機率 $\\frac{1}{2} * \\frac{1}{2} * \\frac{1}{2} &#x3D; \\frac{1}{8}$ 則碰撞機率$1 - \\frac{1}{8} * 2 &#x3D; \\frac{6}{8} &#x3D; \\frac{3}{4}$ 通用情況：$n$隻螞蟻在$n$邊形的碰撞機率 $1 - (\\frac{1}{2})^n * 2$ 6.5 Jugs of WaterYou have a five-quart jug, a three-quart jug, and an unlimited supply of water (but no measuring cups). How would you come up with exactly four quarts of water? Note that the jugs are oddly shaped, such that filling up exactly “half” of the jug would be impossible. 透過五夸脫與三夸脫的容積差。 6.6 Blue-Eyed IslandA bunch of people are living on an island, when a visitor comes with a strange order: all blue-eyed people must leave the island as soon as possible. There will be a flight out at 8:00 pm every evening. Each person can see everyone else’s eye color, but they do not know their own (nor is anyone allowed to tell them). Additionally, they do not know how many people have blue eyes, although they do know that at least one person does. How many days will it take the blue-eyed people to leave? 情況一：假設一個藍眼人在他眼中沒有其他藍眼人，他就會知道自己是唯一的藍眼人。 費時一天。 情況二：假設兩個藍眼人 在他們眼中有一個藍眼人，過了一晚，發現該藍眼人沒有離開。 這表示那個藍眼人中還有藍眼人，即自己也是藍眼人。 費時兩天。 依次推類 若有$n$個聰明的藍眼人，則費時$n$天。 ʕ •ᴥ•ʔ：程式碼可參考：CtCI-6th-php。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"Trees And Graphs","slug":"Trees-And-Graphs","date":"2022-02-26T02:33:00.000Z","updated":"2025-05-30T08:15:23.257Z","comments":true,"path":"2022/02/26/Trees-And-Graphs/","permalink":"https://yncbearz.github.io/2022/02/26/Trees-And-Graphs/","excerpt":"Trees-And-Graphs","text":"樹的類型 (Types of Trees)樹與二元樹 (Trees vs. Binary Trees)指每個節點最多兩個子節點的樹。並非所有的樹是二元樹。 無子節點的節點稱為葉 (leaf)。 二元樹與二元搜尋樹 (Binary Tree vs. Binary Search Tree)二元搜尋樹指每個節點都有特定排序的二元樹：所有左邊 &lt;&#x3D; n &lt; 所有右邊。此條件對每個節點n都成立。 平衡與非平衡 (Balanced vs. Unbalanced)注意平衡樹並不表示左右子樹大小完全相同。 實際意義是類似「未到糟糕等級的不平衡」。它的平衡程度足以確保insert與find在$O(logn)$時間內。(不一定要最佳平衡) 常見的平衡樹是紅黑樹(Red Black Tree)和AVL樹。 完全二元樹 (Complete Binary Trees)指的是除了最後一層外，每層都填滿的二元樹。最後一層從左至右填入。 滿二元樹 (Full Binary Trees)指的是每個節點有零或兩個子節點的二元樹。也就是說沒有節點只有一個子節點。 完美二元樹 (Perfect Binary Trees)指的是所有葉節點均在同一層且葉具有最大節點數量。剛好有$2^k-1$個節點。($k$為層數) 二元樹遍歷 (Binary Tree Traversal)12345 4 / \\ 2 6 / \\ / \\1 3 5 7 遍歷方式 輸出結果 Pre-Order Traversal 4213657 In-Order Traversal 1234567 Post-Order Traversal 1325764 Pre-, In-, Post- 是指parent node相對於child node的順序。 123456789101112131415&lt;?phpclass BinaryTreeNode&#123; public mixed $data; public ?BinaryTreeNode $left; public ?BinaryTreeNode $right; public function __construct($data) &#123; $this-&gt;data = $data; $this-&gt;left = null; $this-&gt;right = null; &#125;&#125; 前序遍歷 (Pre-Order Traversal)12345678910111213141516171819202122232425262728&lt;?phpclass PreOrder&#123; protected string $result = &#x27;&#x27;; public function run(BinaryTreeNode $node): string &#123; $this-&gt;preOrderTraversal($node); return $this-&gt;result; &#125; public function preOrderTraversal(?BinaryTreeNode $node) &#123; if ($node != null) &#123; $this-&gt;visit($node); $this-&gt;preOrderTraversal($node-&gt;left); $this-&gt;preOrderTraversal($node-&gt;right); &#125; &#125; private function visit(BinaryTreeNode $node) &#123; $this-&gt;result = $this-&gt;result . $node-&gt;data; &#125;&#125; 中序遍歷 (In-Order Traversal)123456789101112131415161718192021222324252627&lt;?phpclass InOrder&#123; protected string $result = &#x27;&#x27;; public function run(BinaryTreeNode $node): string &#123; $this-&gt;InOrderTraversal($node); return $this-&gt;result; &#125; public function InOrderTraversal(?BinaryTreeNode $node) &#123; if ($node != null) &#123; $this-&gt;InOrderTraversal($node-&gt;left); $this-&gt;visit($node); $this-&gt;InOrderTraversal($node-&gt;right); &#125; &#125; private function visit(BinaryTreeNode $node) &#123; $this-&gt;result = $this-&gt;result . $node-&gt;data; &#125;&#125; 後序遍歷 (Post-Order Traversal)123456789101112131415161718192021222324252627&lt;?phpclass PostOrder&#123; protected string $result = &#x27;&#x27;; public function run(BinaryTreeNode $node): string &#123; $this-&gt;PostOrderTraversal($node); return $this-&gt;result; &#125; public function PostOrderTraversal(?BinaryTreeNode $node) &#123; if ($node != null) &#123; $this-&gt;PostOrderTraversal($node-&gt;left); $this-&gt;PostOrderTraversal($node-&gt;right); $this-&gt;visit($node); &#125; &#125; private function visit(BinaryTreeNode $node) &#123; $this-&gt;result = $this-&gt;result . $node-&gt;data; &#125;&#125; 二元堆積 - 最小堆積與最大堆積 (Binary Heaps - Min-Heaps and Max-Heaps)最小堆積是個完全二元樹，其每個節點都小於子節點，因此根是樹中的最小元素。 有兩個關鍵操作：insert與extract_min。 Insert 插入到最小堆積時，我們總是從底最右插入元素以維持完全樹。 然後我們改正樹，交換新元素與父元素直到新元素落在正確位置。基本上就是將最小元素浮上去。 需要$O(logn)$時間，$n$為堆積的節點數量。 Extract Minimum Element 首先我們刪除最小元素並與堆積中最後一個元素(最下最右的元素)交換。然後與子元素交換直到恢復成最小堆積。 與左或右的子元素交換？視其值而定。左右元素間沒有自然的順序，但你必須取用較小者以維持最小堆積的順序。 (註: pdf版本的80並不符合最小堆積，書上的圖給的值是96) 此演算法也需要$O(logn)$時間。 前綴樹 (Tries - Prefix Trees) 前綴樹常用於儲存供前綴查詢的語言(英文)。 雖然雜湊表可以快速查詢某個字是否為合法的詞，但無法告訴我們字串是否為前綴。這點前綴樹可以做到。 圖 (Graphs)樹為圖的一種，但並非所有圖都是樹。 圖是群有邊 (edge) 的節點。 圖可分有向 (directed) 或無向。 圖可能由多個獨立的子圖組成。若每個點之間都有路徑連接則稱為「連通圖」(connected graph)。 圖也可以有環。沒有環的圖稱為「無環圖」(acyclic graph)。 通常有兩種常見的表示方式。 相鄰清單 (Adjacency List)這是最常見的表示圖方式。每個頂點 (vertex)(或稱為節點)儲存相鄰頂點的清單。在無向圖中，(a, b)的邊會儲存兩次：一次是a的相鄰頂點，一次是b的相鄰頂點。 1234567891011&lt;?phpclass Graph&#123; public Node[] $nodes;&#125;class Node&#123; public string $name; public Node[] $children;&#125; 此Graph類別是必要的，因為不像樹可從一個節點找到使用節點。 你不一定要額外的類別來表示圖。上面的圖可表示為：0: 11: 22: 0, 33: 24: 65: 46: 5 相鄰矩陣 (Adjacency Matrices)相鄰矩陣是N*N布林矩陣 (N為節點數量)。**matrix[i][j]**的true值表示節點i與節點j有邊。 在無向圖中，相鄰矩陣是對稱的。在有向圖不一定對稱。 圖搜尋 (Graph Search)深度優先搜尋 (Depth-First Search, DFS)在DFS中，我們造訪節點a然後迭代a的每個鄰居。造訪a的鄰居b節點時，我們在進入a的其他鄰居前造訪b的所有鄰居。也就是進入其他鄰居前完整搜尋b的分支。 注意前序與其他形式的樹遍歷也是一種DFS。關鍵在於對圖實作時，我們必須檢查節點是否已經造訪過。 廣度優先搜尋 (Breadth-First Search, BFS)在BFS中，節點a在造訪鄰居的鄰居前會造訪每一個鄰居。你可以想像從a開始一層一層搜尋。使用佇列的迭代方案通常最好。 雙向搜尋 (Bidirectional Search)用於找出來源與目標節點間的最短路徑。基本上是同時從兩個節點執行兩個廣度搜尋。 以每個節點最多有k個相鄰節點的圖來說，從節點s到節點t的最短路徑長度為d。 在廣度優先搜尋中，我們會在第一層搜尋最多$k$個節點。第二層對$k$個節點各搜尋$k$個節點，共有$k^2$個節點。會執行$d$次，因此有$O(k^d)$個節點。 在雙向搜尋中，兩個搜尋約在$d&#x2F;2$層後碰撞(路徑中點)。從s開始搜尋造訪約$O(k^{d&#x2F;2})$次，從t開始也是。總共是$2*k^{d&#x2F;2}$，或$O(k^{d&#x2F;2})$個節點。 面試題目 Binary Tree Node 123456789101112131415&lt;?phpclass BinaryTreeNode&#123; public mixed $data; public ?BinaryTreeNode $left; public ?BinaryTreeNode $right; public function __construct($data) &#123; $this-&gt;data = $data; $this-&gt;left = null; $this-&gt;right = null; &#125;&#125; 4.4 Check BalancedImplement a function to check if a binary tree is balanced. For the purposes of this question, a balanced tree is defined to be a tree such that the heights of the two subtrees of any node never differ by more than one. First Answer 123456789101112131415161718192021222324252627282930&lt;?phpclass BalancedTreeChecker&#123; public static function isBalanced(?BinaryTreeNode $node): bool &#123; if (is_null($node)) &#123; return true; &#125; $heightDiff = abs(self::getHeight($node-&gt;left) - self::getHeight($node-&gt;right)); if ($heightDiff &gt; 1) &#123; return false; &#125; else &#123; return self::isBalanced($node-&gt;left) &amp;&amp; self::isBalanced($node-&gt;right); &#125; &#125; public static function getHeight(?BinaryTreeNode $node): int &#123; if (is_null($node)) &#123; return -1; &#125; return max(self::getHeight($node-&gt;left), self::getHeight($node-&gt;right)) + 1; &#125;&#125; Second Answer 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?phpclass BalancedTreeChecker&#123; public static function isBalanced(?BinaryTreeNode $node): bool &#123; if (is_null($node)) &#123; return true; &#125; return self::getHeight($node) != PHP_INT_MIN; &#125; public static function getHeight(?BinaryTreeNode $node): int &#123; if (is_null($node)) &#123; return -1; &#125; $leftHeight = self::getHeight($node-&gt;left); if ($leftHeight == PHP_INT_MIN) &#123; return PHP_INT_MIN; &#125; $rightHeight = self::getHeight($node-&gt;right); if ($rightHeight == PHP_INT_MIN) &#123; return PHP_INT_MIN; &#125; $heightDiff = abs($leftHeight - $rightHeight); if ($heightDiff &gt; 1) &#123; return PHP_INT_MIN; &#125; else &#123; return max($leftHeight, $rightHeight) + 1; &#125; &#125;&#125; 4.5 Validate BSTImplement a function to check if a binary tree is a binary search tree. First Answer (In-Order Traversal) 1234567891011121314151617181920212223242526272829303132333435363738&lt;?phpclass BinarySearchTreeChecker&#123; protected static ?int $lastPrinted = null; public static function isBinarySearchTree(?BinaryTreeNode $node, $min = null, $max = null) &#123; $result = self::checkBST($node); self::$lastPrinted = null; return $result; &#125; public static function checkBST(?BinaryTreeNode $node) &#123; if (is_null($node)) &#123; return true; &#125; if (!self::checkBST($node-&gt;left)) &#123; return false; &#125; if (!is_null(self::$lastPrinted) &amp;&amp; $node-&gt;data &lt; self::$lastPrinted) &#123; return false; &#125; self::$lastPrinted = $node-&gt;data; if (!self::checkBST($node-&gt;right)) &#123; return false; &#125; return true; &#125;&#125; 4.6 SuccessorWrite an algorithm to find the “next” node (i.e., in-order successor) of a given node in a binary search tree. You may assume that each node has a link to its parent. Ideas: 若有右子樹，則是右子樹上最左邊的節點。 若沒有右子樹，則要看節點與父節點的相對位置 若節點在父節點的左邊，則下一個節點是父節點。 若節點在父節點的右邊，則下一個節點是父節點往上還沒遍歷的節點。即是下一個從左邊回去的節點。 要小心若一路向上的過程中，沒有從左邊回去的節點。 1234567891011inorderSuccessor(Node n) &#123; if (n has a right subtree) &#123; return leftmost child of right subtree; &#125; else &#123; while (n.parent != null &amp;&amp; n is a right child of n.parent) &#123; n = n.parent; &#125; return n.parent; &#125;&#125; Binary Tree Node With Parent 123456789class BinaryTreeNodeWithParent extends BinaryTreeNode&#123; public $parent; public function __construct($data) &#123; parent::__construct($data); &#125;&#125; First Answer 123456789101112131415161718192021222324252627282930313233343536&lt;?phpclass SuccessorNodeFinder&#123; private static function inorderSuccessor(?BinaryTreeNodeWithParent $node): ?BinaryTreeNode &#123; if (is_null($node)) &#123; return null; &#125; if (!is_null($node-&gt;right)) &#123; return self::leftMostChild($node-&gt;right); &#125; else &#123; $parent = $node-&gt;parent; while (!is_null($parent) &amp;&amp; ($parent-&gt;left != $node)) &#123; $node = $parent; $parent = $parent-&gt;parent; &#125; return $parent; &#125; &#125; private static function leftMostChild(BinaryTreeNode $node): BinaryTreeNode &#123; while (!is_null($node-&gt;left)) &#123; $node = $node-&gt;left; &#125; return $node; &#125;&#125; ʕ •ᴥ•ʔ：程式碼可參考：CtCI-6th-php。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"Stacks And Queues","slug":"Stacks-And-Queues","date":"2022-02-21T14:39:34.000Z","updated":"2025-05-30T08:15:23.254Z","comments":true,"path":"2022/02/21/Stacks-And-Queues/","permalink":"https://yncbearz.github.io/2022/02/21/Stacks-And-Queues/","excerpt":"Stacks-And-Queues","text":"堆疊 (Stack)實作 LIFO (last-in first-out) 順序，如同一疊鬆餅，最後疊上去的鬆餅會最先被吃掉。 It uses the following operations: pop(): Remove the top item from the stack. push(item): Add an item to the top of the stack. peek(): Return the top of the stack. isEmpty(): Return true if and only if the stack is empty. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?phpclass Stack&#123; protected ?StackNode $top; public function pop() &#123; if (is_null($this-&gt;top)) &#123; throw new Exception(&#x27;Empty Stack&#x27;); &#125; $item = $this-&gt;top-&gt;data; $this-&gt;top = $this-&gt;top-&gt;next; return $item; &#125; public function push($item) &#123; $stackNode = new StackNode($item); $stackNode-&gt;next = $this-&gt;top; $this-&gt;top = $stackNode; &#125; public function peek() &#123; if (is_null($this-&gt;top)) &#123; throw new Exception(&#x27;Empty Stack&#x27;); &#125; return $this-&gt;top-&gt;data; &#125; public function isEmpty() &#123; return is_null($this-&gt;top); &#125;&#125;class StackNode&#123; public mixed $data; public ?StackNode $next; public function __construct($data) &#123; $this-&gt;data = $data; $this-&gt;next = null; &#125;&#125; 佇列 (Queue)實作 FIFO (first-in first-out) 順序，如同售票亭前排隊，最先排隊的人最早拿到票。 It uses the following operations: add(item): Add an item to the end of the queue. remove(): Remove the first item of the queue. peek(): Return the first of the queue. isEmpty(): Return true if and only if the queue is empty. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?phpclass Queue&#123; protected ?QueueNode $first; protected ?QueueNode $last; public function add($item) &#123; $queueNode = new QueueNode($item); if (!is_null($this-&gt;last)) &#123; $this-&gt;last-&gt;next = $queueNode; &#125; $this-&gt;last = $queueNode; if (is_null($this-&gt;first)) &#123; $this-&gt;first = $queueNode; &#125; &#125; public function remove() &#123; if (is_null($this-&gt;first)) &#123; throw new Exception(&#x27;No Such Element&#x27;); &#125; $item = $this-&gt;first-&gt;data; $this-&gt;first = $this-&gt;first-&gt;next; if (is_null($this-&gt;first)) &#123; $this-&gt;last = null; &#125; return $item; &#125; public function peek() &#123; if (is_null($this-&gt;first)) &#123; throw new Exception(&#x27;No Such Element&#x27;); &#125; return $this-&gt;first-&gt;data; &#125; public function isEmpty() &#123; return is_null($this-&gt;first); &#125;&#125;class QueueNode&#123; public mixed $data; public ?QueueNode $next; public function __construct($data) &#123; $this-&gt;data = $data; $this-&gt;next = null; &#125;&#125; ʕ •ᴥ•ʔ：程式碼可參考：CtCI-6th-php。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"Linked Lists","slug":"Linked-Lists","date":"2022-02-14T15:57:06.000Z","updated":"2025-05-30T08:15:23.248Z","comments":true,"path":"2022/02/14/Linked-Lists/","permalink":"https://yncbearz.github.io/2022/02/14/Linked-Lists/","excerpt":"Linked-Lists","text":"鏈接清單 (Linked List)鏈接清單是表示一系列節點(node)的資料結構。 與陣列不同，在鏈接清單中存取特定索引並非常數(constant)時間。若要找到清單中的第K個元素，需要迭代K個元素。 建構鏈接清單12345678910111213141516171819202122class Node&#123; public ?Node $next = null; public int $data; public function __construct(int $data) &#123; $this-&gt;int = $data; &#125; public function appendToTail(int $data) &#123; $end = new Node($data); $n = $this; while ($n-&gt;next != null) &#123; $n = $n-&gt;next; &#125; $n-&gt;next = $end; &#125;&#125; 此實作中沒有LinkedList資料結構。我們透過第一個節點參考(reference)存取此鏈接清單。 以這種方式實作鏈接清單必須小心。若有多個物件需要此鏈接清單的參考，而第一個節點改變了呢？ 我們可以選擇實作包裝Node類別的LinkedList類別。它只有一個成員變數：第一個Node。這會大幅解決前述問題。 記得討論鏈接清單要知道是單向或雙向的。 從單向鏈接清單中刪除節點對節點n找出前一個節點prev並將prev.next設定為n.next值。 若為雙向鏈接，還有將n.next.prev設定為n.prev值。 重點是檢查空指標與更新頭尾指標。 runner技巧“runner” (或說是第二個指標) 技巧用於鏈接清單問題。意思是同時以兩個指標迭代鏈接清單，其中一個領先另一個 (節點領先固定數量)。 遞迴問題許多鏈接清單依靠遞迴解決。但你應該要記住遞迴演算法至少需要$O(n)$空間，$n$是遞迴呼叫的深度。 所有遞迴演算法都可以用迭代實作，但會比較複雜。 面試問題2.1 Remove DupsWrite code to remove duplicates from an unsorted linked list. First Answer (hash table) 1234567891011121314151617181920public static function removeDuplicated(Node $node)&#123; $hashTable = []; /** * @var ?Node $previousNode */ $previousNode = null; while (!is_null($node)) &#123; if (in_array($node-&gt;data, $hashTable)) &#123; $previousNode-&gt;next = $node-&gt;next; &#125; else &#123; $hashTable[] = $node-&gt;data; $previousNode = $node; &#125; $node = $node-&gt;getNext(); &#125;&#125; Best Answer (two point) 123456789101112131415161718public static function removeDuplicated(Node $node)&#123; $pointer1 = $node; while (!is_null($pointer1)) &#123; $pointer2 = $pointer1; while (!is_null($pointer2-&gt;next)) &#123; if ($pointer2-&gt;next-&gt;data == $pointer1-&gt;data) &#123; $pointer2-&gt;next = $pointer2-&gt;next-&gt;next; &#125; else &#123; $pointer2 = $pointer2-&gt;next; &#125; &#125; $pointer1 = $pointer1-&gt;next; &#125;&#125; 2.2 Return Kth to LastImplement an algorithm to find the kth to last element of a singly linked list.123456789101112131415161718192021public static function find(Node $node, $k): ?Node&#123; $pointer1 = $node; $pointer2 = $node; for ($i = 0; $i &lt; $k; $i++) &#123; if (is_null($pointer1)) &#123; return null; &#125; $pointer1 = $pointer1-&gt;next; &#125; while ($pointer1 != null) &#123; $pointer1 = $pointer1-&gt;next; $pointer2 = $pointer2-&gt;next; &#125; return $pointer2;&#125; 2.4 PartitionWrite code to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x. If x is contained within the list, the values of x only need to be after the elements less than x (see below). The partition element x can appear anywhere in the “right partition”; it does not need to appear between the left and right partitions.[Example] Input:Output:3 -&gt; 5 -&gt; 8 -&gt; 5 -&gt; 10 -&gt; 2 -&gt; 1 [partition&#x3D; 5]3 -&gt; 1 -&gt; 2 -&gt; 10 -&gt; 5 -&gt; 5 -&gt; 8 1234567891011121314151617181920212223242526public static function partition(Node $node, $x)&#123; $head = new Node(); $headStart = $head; $tail = new Node(); $tailStart = $tail; while (!is_null($node)) &#123; $data = $node-&gt;data; if ($data &lt; $x) &#123; $head-&gt;next = new Node($data); $head = $head-&gt;next; &#125; else &#123; $tail-&gt;next = new Node($data); $tail = $tail-&gt;next; &#125; $node = $node-&gt;next; &#125; $head-&gt;next = $tailStart-&gt;next; return $headStart-&gt;next;&#125; 2.6 PalindromeImplement a function to check if a linked list is a palindrome. Solution #1 (Reverse and Compare) 12345678910111213141516171819202122232425262728293031323334public static function isPalindrome(?Node $node): bool&#123; $reversed = self::reverseAndClone($node); return self::isEqual($node, $reversed);&#125;private static function reverseAndClone(Node $node): ?Node&#123; $head = null; while (!is_null($node)) &#123; $n = new Node($node-&gt;data); $n-&gt;next = $head; $head = $n; $node = $node-&gt;next; &#125; return $head;&#125;private static function isEqual(?Node $node, ?Node $reversed): bool&#123; while (!is_null($node) &amp;&amp; !is_null($reversed)) &#123; if ($node-&gt;data != $reversed-&gt;data) &#123; return false; &#125; $node = $node-&gt;next; $reversed = $reversed-&gt;next; &#125; return $node === $reversed;&#125; ʕ •ᴥ•ʔ：程式碼可參考：CtCI-6th-php。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"Arrays And Strings","slug":"Arrays-And-Strings","date":"2022-02-13T10:19:34.000Z","updated":"2025-05-30T08:15:23.215Z","comments":true,"path":"2022/02/13/Arrays-And-Strings/","permalink":"https://yncbearz.github.io/2022/02/13/Arrays-And-Strings/","excerpt":"Arrays-And-Strings","text":"雜湊表 (Hash Tables)雜湊表是對應鍵(key)與值(value)，以供高效率查詢的資料結構。 以下描述簡單但最常見的實作。 我們使用一個鏈接清單(linked list)陣列與一個雜湊編碼函式(hash code function)。當要插入鍵與值時，我們會執行： 首先計算鍵的雜湊編碼，通常為int或long。 注意兩個不同的鍵可能有相同的雜湊編碼。 對應該雜湊編碼到陣列的一個索引(index)。它可以是hash(key)% array_length。 兩個不同的雜湊編碼可能對應到同一個索引。 此索引有個鍵與值的鏈接清單。將鍵與值存在這個索引中。我們必須使用鏈接清單是因為有衝突(collision):兩個不同的鍵具有相同的雜湊編碼，或不同的雜湊編碼對應到相同索引。 若衝突量很高，最差的執行時間是$O(n)$，N為鍵的數量。但好的實作可以將衝突降至最少，此時的查詢時間為$O(1)$。 另外我們也可以用平衡二元搜尋樹(balanced binary search tree)實作雜湊表。它具有$O(logN)$查詢時間。好處是使用較少空間，因為不需要分配(allocate)大陣列。還能夠依序迭代(iterate)所有鍵，在某些情況很實用。 Binary Search Tree(BST): Key(L)&lt;Key(Current)&lt;Key(R) Both subtrees of each node are also BSTs Balanced Binary Search Tree: A binary search tree in which the left and right subtrees of every node differ in height by no more than 1 ArrayList 與可變大小陣列有些語言的陣列可以自動調整大小 (通常稱為清單)。Java等其他語言的陣列大小是固定的。 你需要可動態調整大小的類陣列結構時，通常可使用ArrayList。ArrayList是自行調整大小的陣列但存取還是$O(1)$。典型的實作會在陣列滿時，加倍大小。 每次加倍需要$O(n)$時間，但很少發生，插入時間平攤後還是$O(1)$。 123456ArrayList&lt;String&gt; merge(String[] words, String[] more) &#123; ArrayList&lt;String&gt; sentence = new ArrayList&lt;String&gt;(); for (String w : words) sentence.add(w); for (String w : more) sentence.add(w); return sentence;&#125; 為什麼分攤後的插入時間是$O(1)$? 參考先前的平攤時間。 StringBuilder假設要如下連接字串清單，這段程式的執行時間是什麼？ 假設字串的長度(x)都相等且有n個字串。 1234567String joinWords(String[] words) &#123; String sentence = &#x27;&#x27;; for (String w : words) &#123; sentence = sentence + w; &#125; return sentence;&#125; 每個連接都產生新的字串拷貝，將兩個字串複製並連接在一起。第一個迭代需要複製x個字元、第二個迭代需要複製2x個字元、… 因此總時間為$O(x+2x+…+nx) &#x3D; O(xn^2)$ (因為$1+2+…+n &#x3D; n(n+1)&#x2F;2$) StringBuilder可以避免這個問題。StringBuilder建構可調整大小的陣列，只在有需要時再複製成字串。 1234567String joinWords(String[] words) &#123; StringBuilder sentence = new StringBuilder(); for (String w : words) &#123; sentence.append(w); &#125; return sentence.toString();&#125; 面試題目1.1 Is UniqueImplement an algorithm to determine if a string has all unique characters. What if you cannot use additional data structures? 先詢問字串是ASCII或Unicode。 補充: ASCII (American Standard Code for Information Interchange，美國標準資訊交換碼)用一個位元組(bite)，即8個位元(bit)，來表示一個字元。位元組的最高位統一規定為0，剩餘7位用來存儲數據。共128種編碼。擴展的ASCII編碼，則是把位元組的最高位原本統一設置為0的，也用來存儲字符數據。但各國在擴展的部分定義不同。共256種編碼。 Unicode，又被稱為統一碼、萬國碼，使用兩個位元組，即16位元來表示字元。 UTF-8 (8-bit Unicode Transformation Format)，是Unicode的一種編碼方式。可以用一至四個位元組對Unicode字元集中的所有有效編碼點進行編碼。為解決向下相容ASCII碼而設計。 假設為ASCII的128個字元。 123456789101112131415161718public static function isUnique($string): bool&#123; if (strlen($string) &gt; 128) &#123; return false; &#125; $charSet = []; for ($i = 0; $i &lt; strlen($string); $i++) &#123; $value = substr($string, $i, 1); if (isset($charSet[$value])) &#123; return false; &#125; $charSet[$value] = true; &#125; return true;&#125; 此程式的時間複雜度為$O(n)$，n為字串長度。空間複雜度為$O(1)$。也可以說時間複雜度為$O(1)$，因為不會迭代超過128個字元。 若不想假設字元集的大小，可以說時間複雜度為$O(min(c,n))$。其中c為字元集的大小。 提示：使用位元向量。 使用位元向量可降低使用空間。 假設字串只使用a到z的小寫字母。 12345678910111213141516171819202122232425public static function isUnique($string): bool&#123; $checker = 0; for ($i = 0; $i &lt; strlen($string); $i++) &#123; $value = substr($string, $i, 1); $asciiDiff = ord($value) - ord(&#x27;a&#x27;); /** * $a &amp; $b: 取位元的交集。 * $a &lt;&lt; $b: 將位元向左移動b次(即乘以2的b次方)。 */ if (($checker &amp; (1 &lt;&lt; $asciiDiff)) &gt; 0) &#123; return false; &#125; /** * $a |= $b: $a = $a | $b。 */ $checker |= (1 &lt;&lt; $asciiDiff); &#125; return true;&#125; 若不能使用其他資料結構呢？ 相互比較字串的每個字元，需要$O(n^2)$的時間與$O(1)$空間。 若可以修改字元，我們可以用$O(nlog(n))$時間將字串排序，然後線性檢查相鄰字元是否相同。注意：許多排序演算法需要額外空間。 1.5 One AwayThere are three types of edits that can be performed on strings: Insert a character, remove a character, or replace a character. Given two strings, write a function to check if they are one edit (or zero edits) away.[Example]pale, ple -&gt; truepales, pale -&gt; truepale, bale -&gt; truepale, bake -&gt; false 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869public static function isOneOrZeroAway(string $string1, string $string2): bool&#123; $length1 = strlen($string1); $length2 = strlen($string2); if ($length1 == $length2) &#123; return self::isReplaceCharacter($string1, $string2); &#125; elseif (abs($length1 - $length2) == 1) &#123; return ($length1 &gt; $length2) ? self::isOneCharacterDifferent($string1, $string2) : self::isOneCharacterDifferent($string2, $string1); &#125; return false;&#125;public static function isReplaceCharacter(string $string1, string $string2): bool&#123; $result = true; $isReplaceOneTime = false; for ($i = 0; $i &lt; strlen($string1); $i++) &#123; if ($string1[$i] == $string2[$i]) &#123; continue; &#125; if ($isReplaceOneTime) &#123; $result = false; break; &#125; $isReplaceOneTime = true; &#125; return $result;&#125;/** * Think of * (i) bed &amp; ed * (ii) bed &amp; bd * (iii) bed &amp; be * * @param string $longString * @param string $shortString * @return bool */public static function isOneCharacterDifferent(string $longString, string $shortString): bool&#123; $result = true; $isOneCharacterDifferent = false; for ($i = 0; $i &lt; strlen($longString) - 1; $i++) &#123; if ($isOneCharacterDifferent &amp;&amp; ($longString[$i] != $shortString[$i - 1])) &#123; $result = false; break; &#125; if ($longString[$i] == $shortString[$i]) &#123; continue; &#125; $isOneCharacterDifferent = true; &#125; return $result;&#125; 1.9 String RotationAssume you have a method isSubstring which checks if oneword is a substring of another. Given two strings, sl and s2, write code to check if s2 is a rotation of sl using only one call to isSubstring.(e.g. “waterbottle” is a rotation of”erbottlewat”) First Answer: 123456789101112131415161718public static function isRotation($string1, $string2): bool&#123; $length1 = strlen($string1); $length2 = strlen($string2); if ($length1 != $length2) &#123; return false; &#125; $stringRotations = []; for ($offset = 1; $offset &lt; $length1; $offset++) &#123; $partA = substr($string1, $offset); $partB = substr($string1, 0, $offset); $stringRotations[] = $partA . $partB; &#125; return in_array($string2, $stringRotations);&#125; Best Answer: 12345678910public static function isRotation($string1, $string2): bool&#123; $length1 = strlen($string1); $length2 = strlen($string2); if ($length1 != $length2) &#123; return false; &#125; return strpos($string1 . $string1, $string2);&#125; ʕ •ᴥ•ʔ：程式碼可參考：CtCI-6th-php。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"Big O","slug":"Big-O","date":"2022-01-23T07:43:53.000Z","updated":"2025-05-30T08:15:23.215Z","comments":true,"path":"2022/01/23/Big-O/","permalink":"https://yncbearz.github.io/2022/01/23/Big-O/","excerpt":"Big-O","text":"Big O是用來評估演算法效能的一種方式。 時間複雜性Big O、Big Theta、與Big Omega O (Big O):描述時間上限。 Ω (Big omega):描述時間下限。 Θ (Big theta):同時表示O與Ω。 通常面試時講的Big O，比較接近學術界的Θ。 最佳情況、最差情況、與預期情況我們將以 快速排序法 (Quick Sort) 為例。 補充:快速排序法的原理是先從原始資料中找一個基準值(Pivot)，接著逐一將資料與基準值比較，小於基準值的資料放在左邊，大於基準值的資料放在右邊，再將兩邊區塊分別再找出基準值，重複前面的步驟，直到排序完為止。 使用分治法(Divide and Conquer)的概念。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// 原始資料40 60 50 20 10 30// 選擇最左邊的資料為基準點[40] 60 50 20 10 30// 60 &gt; 40，要移到40的右邊[40] 60 50 20 10 30 ^// 50 &gt; 40，要移到40的右邊[40] 60 50 20 10 30 ^// 20 &lt; 40，要移到40的左邊[40] 60 50 20 10 30 ^20 [40] 60 50 10 30// 10 &lt; 40，要移到40的左邊20 [40] 60 50 10 30 ^20 10 [40] 60 50 30// 同理30 &lt; 40，要移到40的左邊20 10 [40] 60 50 30 ^20 10 30 [40] 60 50// 第一次排序完成20 10 30 40 60 50// 接著排序40左右兩側的資料// 先排左側資料，同樣選擇最左邊的資料為基準點// 左側基準點為20[20] 10 30 40 60 50// 左側資料排序完成10 [20] 30 40 60 50// 接著排序右側資料，一樣選擇最左邊的資料為基準點// 右側基準點為6010 20 30 40 [60] 50//右側排序完成10 20 30 40 50 [60]//排序結果10 20 30 40 50 60 最佳情況: 若所有元素相等，則快速排序法平均只會遍歷一次，執行時間為$O(N)$。 最差情況: 若很不幸地，每次基準點都選到最大元素，則執行時間為$O(N^2)$。 預期情況: 通常不會是最佳情況或最差情況，所以執行時間為$O(nlog{n})$。 空間複雜度空間複雜性與時間複雜性是平行的概念。若建構大小為n的陣列，它需要$O(n)$空間。若需要nxn的二維陣列，則需要$O(n^2)$空間。 遞迴呼叫所需的堆疊(stack)空間也是。 123456int sum(int n) &#123; if (n &lt;= 0) &#123; return 0; &#125; return n + sum(n - 1);&#125; 每個呼叫增加了堆疊層級。 12345sum(4) -&gt; sum(3) -&gt;sum(2) -&gt;sum(1) -&gt;sum(0) 但有n個呼叫，不表示佔用$O(n)$空間。 1234567891011int pairSumSequence(int n) &#123; int sum = 0; for (int i = 0; i &lt; n; i++) &#123; sum += pairSum(i, i+1); &#125; return sum;&#125;int pairSum(int a, int b) &#123; return a + b;&#125; 有$O(n)$個對pairSum的呼叫，但這些呼叫不同時存在堆疊，因此只需要$O(1)$的空間。 降低常數123456int min = Integer.MAX_VALUE;int max = Integer.MIN_VALUE;for (int x : array) &#123; if (x &lt; min) min = x; if (x &gt; max) max = x;&#125; 12345678int min = Integer.MAX_VALUE;int max = Integer.MIN_VALUE;for (int x : array) &#123; if (x &lt; min) min = x;&#125;for (int x : array) &#123; if (x &gt; max) max = x;&#125; 許多人會視第二個for迴圈為$O(2N)$，認為這樣比較“精確”。並不是。 在Big O判斷執行時間如何放大時，我們只需接受$O(N)$一定比$O(N^2)$好。 降低非優勢條件 $O(N^2 + N)$變成$O(N^2)$ $O(N + log{N})$變成$O(N)$ $O(5*2^N + 1000N^{100} )$變成$O(2^N)$ 然而執行時間還是可能有加總。例如$O(B^2 + A)$。 多部份演算法：加與乘 執行時間相加: $O(A + B)$ 123456for (int a : arrA) &#123; print(a);&#125;for (int b : arrB) &#123; print(b);&#125; 執行時間相加: $O(A * B)$ 12345for (int a : arrA) &#123; for (int b : arrB) &#123; print(a + &quot;,&quot; + b); &#125;&#125; 若演算法形式為“做這個，完成後，做那個”，則執行時間相加。若演算法形式為“每次做這個時要做那個”，則執行時間相乘。 平攤時間ArrayList或動態調整大小的陣列兼具陣列功能與彈性大小。遇到上限時，會建構兩倍大小的新陣列並複製所有元素到新陣列中。 那麼你要如何描述插入的執行時間？ 陣列滿的情況(假設有N個元素)，則插入新元素要$O(N)$時間。你必須先建構大小2N的新陣列，然後複製N個元素。 但我們知道它不常發生。大部分的插入時間為$O(1)$時間。 我們將考慮平攤(amortized)時間。 插入元素將加倍容量，因此在X個元素的情況。我們將經歷 $1 + 2 + 4 + … + X$ 個複製。 反過來看，就是 $X + X&#x2F;2 + X&#x2F;4 + … + 1$。約為2X。(無限等比級數) 因此X個插入，需要$O(2X)$時間。每個插入的平攤時間為$O(1)$。 log N 執行時間當你看到題目中元素的數量每次折半，它很可能就是$O(log{n})$執行時間。 遞迴執行時間下列這段程式碼的執行時間是？ 123456int f(int n) &#123; if (n &lt;= 1) &#123; return 1; &#125; return f(n-1) + f(n-1);&#125; 假設呼叫f(4) 1234567 f(4) f(3) f(3) f(2) f(2) f(2) f(2)f(1) f(1) f(1) f(1) f(1) f(1) f(1) f(1) 這個樹有幾個呼叫？ (不要一個一個數！) 這個樹的深度為N。每個節點 (也就是函式呼叫)有兩個子節點。因此每一層比前一層多一倍呼叫。 層 # 節點數量 也表示為… 或… 0 1 $2^0$ 1 2 2 * 前一層 &#x3D; 2 $2^1$ 2 4 2 * 前一層 &#x3D; 2 * $2^1$ &#x3D; $2^2$ $2^2$ 共有 $2^0 + 2^1 + … + 2^N $ 也就是 $2^{N+1}-1$ 個節點。 嘗試記住這個表。遇到多次呼叫的遞迴函式時，執行時間通常 (但不一定) 會是 $O(分支^{深度})$，分支為每個遞迴呼叫再呼叫的數量。 此演算法空間複雜度為$O(N)$。雖然樹節點總數為$O(2^N)$，任一時間只有出現$O(N)$個。 f(n), f(n-1), …, f(1) 因此只需要$O(N)$記憶體空間。 範例與練習範例12此程式計算字串的排列。請問它的時間複雜度是？ 1234567891011121314void permutation(String str) &#123; permutation(str, &quot;&quot;);&#125;void permutation(String str, String prefix) &#123; if (str.length() == 0) &#123; System.out.println(prefix); &#125; else &#123; for (int i = 0; i &lt; str.length(); i++) &#123; String rem = str.substring(0, i) + str.substring(i + 1); permutation(rem, prefix + str.charAt(i)); &#125; &#125;&#125; Q1. permutation有多少次終止條件呼叫？ $n*(n-1)*…*1 &#x3D; n!$ 次的呼叫。 Q2. permutation有多少次終止條件前呼叫？考慮程式碼第9~12行跑幾次。 1234 abc a b cb c a c a bc b c a b a 想像有$n!$個葉，每個葉連結長$n$的路徑。所以不會有超過$n*(n-1)!$個節點。 因此Q1 + Q2共有 $n*n!$ 個節點。 Q3. 每個呼叫要花多久？ 第7行輸出$n$個字元，需要$O(n)$時間。第10,11行，因為字串連接 (rem, prefix與str.charAt(i)加總長度為n)故為$O(n)$時間。 Q4. 總執行時間？$$ n * n! * n &#x3D; O(n^2*n!) $$ ʕ •ᴥ•ʔ：這題感覺只能求最接近解。 範例16下列函式輸出從1到n(含)的2冪。舉例來說，若n為4，它會輸出1、2與4。其執行時間是？ 12345678910111213int powersOf2(int n) &#123; if (n &lt; 1) &#123; return 0; &#125; else if (n == 1) &#123; System.out.println(1); return 1; &#125; else &#123; int prev = powersOf2(n/2); int curr = prev * 2; System.out.println(curr); return curr; &#125;&#125; 可以看出執行時間是$O(log_n)$。 這邊有另一種思考方式是思考隨著$n$增加時執行時間如何變化。 何時 powersOf2 的呼叫次數會增加？ 每次 $n$ 加倍大小時會加1。 VI.2下列程式計算$a^b$。執行時間是？ 123456789int power(int a, int b) &#123; if (b &lt; 0) &#123; return 0; //錯誤 &#125; else if (b == 0) &#123; return 1; &#125; else &#123; return a * power(a, b - 1); &#125;&#125; 會由b依序減1呼叫到0，故$O(b)$。 VI.5下列程式計算整數平方根。若數字非完美平方 (沒有整數平方根)則回傳 -1。 執行時間是？ 123456789101112131415161718int sqrt(int n) &#123; return sqrt_helper(n, 1, n);&#125;int sqrt_helper(int n, int min, int max) &#123; if (max &lt; min) return -1; int guess = (min + max) / 2; if (guess *guess == n) &#123; return guess; &#125; else if (guess * guess &lt; n) &#123; return sqrt_helper(n, guess + 1, max); &#125; else &#123; return sqrt_helper(n, min, guess - l); &#125;&#125; ʕ •ᴥ•ʔ：原本以為會是 $O(\\sqrt{n})$。但觀察上面第八行，會知道每次減半，故為 $O(log(n))$。 VI.6同上題，求程式計算整數平方根。 執行時間是？ 123456789int sqrt(int n) &#123; for (int guess = 1; guess * guess &lt;= n; guess++) &#123; if (guess * guess == n) &#123; return guess; &#125; &#125; return -1;&#125; 這題就是$O(\\sqrt{n})$了。 VI.8從二元樹查詢特地資料，但其非二元搜尋樹。 執行時間是？ Note. 二元樹(Binary tree)是每個節點最多只有兩個分支的樹結構。 二元搜尋樹(Binary Search Tree)，又稱有序二元樹(ordered binary tree)或排序二元樹(sorted binary tree)。 是空樹或有以下幾個特點的二元樹: 若任意節點的左子樹不空，則左子樹上所有節點的值均小於它的根節點的值 若任意節點的右子樹不空，則右子樹上所有節點的值均大於它的根節點的值 任意節點的左、右子樹也分別為二元搜尋樹 由定義，節點可能沒有排序，故為 $O(n)$。 VI.11下列程式輸出字元排序過長度為k的所有字串。它產生所有k長度字串，然後檢查是否有排序。 執行時間是？ 123456789101112131415161718192021222324252627282930313233int numChars = 26;void printSortedStrings(int remaining) &#123; printSortedStrings(remaining, &quot;&quot;);&#125;void printSortedStrings(int remaining, String prefix) &#123; if (remaining== 0) &#123; if (isinOrder(prefix)) &#123; System.out.println(prefix); &#125; &#125; else &#123; for (int i= 0; i &lt; numchars; i++) &#123; char c = ithletter(i); printSortedStrings(remaining - 1, prefix + c); &#125;&#125;boolean isinOrder(String s) &#123; for (int i= 1; i &lt; s.length(); i++) &#123; int prev ithLetter(s.charAt(i - 1)); int curr = ithLetter(s.charAt(i)); if (prev &gt; curr) &#123; return false; &#125; &#125; return true;&#125;char ithLetter(int i) &#123; return (char) (((int) &#x27;a&#x27;) + i);&#125; (參考stackoverflow) The above algorithm works by recursively generating all possible strings of length k using a set of c choices of characters. The number of possible strings of length k you can make from c choices of letters is equal to $c^k$. ithLetter 執行時間為$O(1)$。 isinOrder 執行時間為$O(k)$。 printSortedStrings 這邊則是選擇長度k，再從字母字元數量c中，依次挑選字母。單看挑選字母的執行時間為$O(c^k)$。而我們會根據長度k，遞迴地呼叫。因此執行時間為$O(k\\times{c^k})$。 References: 常見Big O時間的增加速率 VI.11 - stackoverflow ʕ •ᴥ•ʔ：在讀重構extract method，將一個迴圈的多種職責，分開到多個迴圈時，Kyo曾提出很好的比喻：abab跟aabb的效率是相同的。即是降低常數的概念。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"}]},{"title":"常見MySQL語法","slug":"Common-MySQL-Syntax","date":"2022-01-01T08:49:03.000Z","updated":"2025-05-30T08:15:23.228Z","comments":true,"path":"2022/01/01/Common-MySQL-Syntax/","permalink":"https://yncbearz.github.io/2022/01/01/Common-MySQL-Syntax/","excerpt":"Common-MySQL-Syntax","text":"(參考Mysql) Menu Type CRUD Table Create Read Update Delete — — Data Create Read Update Delete — — Index Create Delete — — Column Create Read Update Delete — — Trigger Create Read Delete — — Procedure Create Read Delete — — Variable Create Read Delete — — Create Table12345678CREATE TABLE `users` ( `id` int(11) NOT NULL AUTO_INCREMENT, `name` varchar(255) NOT NULL COMMENT &#x27;user name&#x27;, `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), KEY `index_created_at` (`created_at`)) ENGINE=InnoDB DEFAULT CHARSET=utf8; Read Table1SHOW CREATE TABLE `users`; Update Table12ALTER TABLE `old_table_name`RENAME TO `new_table_name`; Delete Table1DROP TABLE IF EXISTS `users`; (Back to Menu) Create Data123INSERT INTO `users` (`id`, `name`, `created_at`, `updated_at`)VALUES (1, &#x27;Bear&#x27;, NOW(), NOW()),(2, &#x27;Aries&#x27;, NOW(), NOW()); 1234INSERT INTO `foods` (`name`, `country`)SELECT &#x27;sushi&#x27;, `name`FROM `countries`WHERE `id` = 2; Read Data1SELECT * FROM `users`; Update Data12UPDATE `users` SET `name`=&#x27;Lin&#x27;WHERE `id` = 1; JSON 欄位 (extension_item 不能為 null) 只更新 json 中的特定 key 12UPDATE `foods` SET `extension_item` = json_set(`extension_item`, &quot;$.created_at&quot;, &#x27;2022-09-27&#x27;)WHERE `id` = 1; 取代整個 json 欄位的資料 12UPDATE `foods` SET `extension_item` = json_object(&quot;created_at&quot;, &#x27;2022-09-28&#x27;, &quot;updated_at&quot;, &#x27;2022-09-29&#x27;)WHERE `id` = 2; Delete Data123456SET SQL_SAFE_UPDATES = 0;DELETE FROM `users`WHERE `name` = &#x27;Lin&#x27;;SET SQL_SAFE_UPDATES = 1; (Back to Menu) Create Index1234ALTER TABLE `users`ADD INDEX `index_name` (`name`),ALGORITHM = INPLACE,LOCK = NONE; Delete Index1234ALTER TABLE `users`DROP INDEX `index_name`,ALGORITHM = INPLACE,LOCK = NONE; (Back to Menu) Create Column1ALTER TABLE `users` ADD COLUMN `email` varchar(255); Read Column12DESC `users`;SHOW COLUMNS FROM `users`; Update Column1ALTER TABLE `users` MODIFY COLUMN `email` varchar(63); Delete Column1ALTER TABLE `users` DROP COLUMN `email`; (Back to Menu) Create Trigger12345678CREATE TRIGGER `trigger_insert_posts`AFTER INSERT ON `posts`FOR EACH ROWBEGIN UPDATE `stats` SET `post_count` = &#x27;post_count&#x27; + 1 WHERE user_id = new.user_id;END; Read Trigger123SHOW TRIGGERS;SHOW CREATE TRIGGER `trigger_name`; Delete Trigger1DROP TRIGGER IF EXISTS `trigger_name`; (Back to Menu) Create Procedure12345CREATE PROCEDURE `procedure_users_name` (IN input_name varchar(255), OUT count INT)BEGIN SELECT count(*) INTO count FROM `users` WHERE `name` = input_name;END; Read Procedure123SHOW PROCEDURE STATUS;SHOW CREATE PROCEDURE `procedure_name`; Delete Procedure1DROP PROCEDURE IF EXISTS `procedure_name`; (Back to Menu) Create Variable123SET @name = &#x27;bear&#x27;;SET @id = LAST_INSERT_ID(); Read Variable1select @id; Delete Variable1SET @id = NULL; (Back to Menu) ʕ •ᴥ•ʔ：記錄一些常見語法，需要時方便查詢。大寫及&#96;&#96;為非必要，僅用來區分語法及關鍵字。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://yncbearz.github.io/tags/SQL/"}]},{"title":"107.binary-tree-level-order-traversal-ii","slug":"107-binary-tree-level-order-traversal-ii","date":"2021-04-22T15:55:42.000Z","updated":"2025-05-30T08:15:23.212Z","comments":true,"path":"2021/04/22/107-binary-tree-level-order-traversal-ii/","permalink":"https://yncbearz.github.io/2021/04/22/107-binary-tree-level-order-traversal-ii/","excerpt":"107.binary-tree-level-order-traversal-ii","text":"Description:Given the root of a binary tree, return the bottom-up level order traversal of its nodes’ values. (i.e., from left to right, level by level from leaf to root).Example: 12345678Input: root = [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7Output: [[15,7],[9,20],[3]] 12Input: root = [1]Output: [[1]] 12Input: root = []Output: [] 深度優先搜尋 (Depth-First Search, DFS)搜尋頂點時，先探查單一路線，直到無法繼續前進，再折返探查下一個選項路徑。過程中，因展開而得到的頂點選項，可利用堆疊 (Stack) 的資料結構。 廣度優先搜尋 (Breadth-First Search, BFS)搜尋頂點時，從起點經由邊搜尋頂點，直到找到指定的頂點。過程中，因展開而得到的頂點選項，可利用佇列 (Queue) 的資料結構。 First Answer (DFS): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?phpnamespace LeetCode\\BinaryTreeLevelOrderTraversalII;/** * Definition for a binary tree node. * class TreeNode &#123; * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) &#123; * $this-&gt;val = $val; * $this-&gt;left = $left; * $this-&gt;right = $right; * &#125; * &#125; */class Solution&#123; /** * @var array */ protected $answer = []; /** * @param TreeNode $root * @return Integer[][] */ public function levelOrderBottom($root) &#123; if (is_null($root-&gt;val)) &#123; return []; &#125; $this-&gt;findAnswer($root); $this-&gt;reverse(); return $this-&gt;answer; &#125; /** * @param TreeNode $root * @param int $level */ private function findAnswer($root, $level = 0) &#123; if (is_null($root-&gt;val)) &#123; return; &#125; $this-&gt;answer[$level] = array_merge($this-&gt;answer[$level] ?? [], [$root-&gt;val]); $this-&gt;findAnswer($root-&gt;left, $level + 1); $this-&gt;findAnswer($root-&gt;right, $level + 1); &#125; private function reverse() &#123; $this-&gt;answer = array_reverse($this-&gt;answer); &#125;&#125; Other Answer (BFS): 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;?phpnamespace LeetCode\\BinaryTreeLevelOrderTraversalII;/** * Definition for a binary tree node. * class TreeNode &#123; * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) &#123; * $this-&gt;val = $val; * $this-&gt;left = $left; * $this-&gt;right = $right; * &#125; * &#125; */class Solution&#123; /** * @var array */ protected $answer = []; /** * @param TreeNode $root * @return Integer[][] */ public function levelOrderBottom($root) &#123; if (is_null($root-&gt;val)) &#123; return []; &#125; $this-&gt;answer[0] = [$root-&gt;val]; $this-&gt;findAnswer($root); $this-&gt;reverse(); return $this-&gt;answer; &#125; /** * @param TreeNode $root */ private function findAnswer($root, $level = 1) &#123; if (is_null($root-&gt;val)) &#123; return; &#125; if (!is_null($root-&gt;left)) &#123; $this-&gt;answer[$level] = array_merge($this-&gt;answer[$level] ?? [], [$root-&gt;left-&gt;val]); &#125; if (!is_null($root-&gt;right)) &#123; $this-&gt;answer[$level] = array_merge($this-&gt;answer[$level] ?? [], [$root-&gt;right-&gt;val]); &#125; $this-&gt;findAnswer($root-&gt;left, $level + 1); $this-&gt;findAnswer($root-&gt;right, $level + 1); &#125; private function reverse() &#123; $this-&gt;answer = array_reverse($this-&gt;answer); &#125;&#125; ʕ •ᴥ•ʔ：欣賞一下 DFS 和 BFS 思考上的不同。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"101.symmetric-tree","slug":"101-symmetric-tree","date":"2021-04-11T15:31:42.000Z","updated":"2025-05-30T08:15:23.212Z","comments":true,"path":"2021/04/11/101-symmetric-tree/","permalink":"https://yncbearz.github.io/2021/04/11/101-symmetric-tree/","excerpt":"101.symmetric-tree","text":"Description:Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).Example: 12345678Input: root = [1,2,2,3,4,4,3] 1 / \\ 2 2 / \\ / \\ 3 4 4 3Output: true 12345678Input: root = [1,2,2,null,3,null,3] 1 / \\ 2 2 \\ \\ 3 3Output: false Follow up: Could you solve it both recursively and iteratively? Similar Question: 94.binary-tree-inorder-traversal First Answer (Recursive): 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495&lt;?phpnamespace LeetCode\\SymmetricTree;/** * Definition for a binary tree node. * class TreeNode &#123; * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) &#123; * $this-&gt;val = $val; * $this-&gt;left = $left; * $this-&gt;right = $right; * &#125; * &#125; */class Solution&#123; /** * @var bool */ protected $answer = true; /** * @param TreeNode $root * @return bool */ public function isSymmetric($root) &#123; if (is_null($root-&gt;val)) &#123; return true; &#125; if (is_null($root-&gt;left) &amp;&amp; is_null($root-&gt;right)) &#123; return true; &#125; $this-&gt;checkSysmmetric($root-&gt;left, $root-&gt;right); return $this-&gt;answer; &#125; /** * @param TreeNode $leftTree * @param TreeNode $rightTree */ private function checkSysmmetric($leftTree, $rightTree) &#123; if ($leftTree-&gt;val !== $rightTree-&gt;val) &#123; return $this-&gt;answer = false; &#125; if ( $leftTree-&gt;left instanceof TreeNode &amp;&amp; $rightTree-&gt;right instanceof TreeNode ) &#123; $this-&gt;checkSysmmetric($leftTree-&gt;left, $rightTree-&gt;right); &#125; if ( $leftTree-&gt;right instanceof TreeNode &amp;&amp; $rightTree-&gt;left instanceof TreeNode ) &#123; $this-&gt;checkSysmmetric($leftTree-&gt;right, $rightTree-&gt;left); &#125; if ($this-&gt;isNullAmountOdd($leftTree-&gt;left, $rightTree-&gt;right)) &#123; return $this-&gt;answer = false; &#125; if ($this-&gt;isNullAmountOdd($leftTree-&gt;right, $rightTree-&gt;left)) &#123; return $this-&gt;answer = false; &#125; &#125; /** * @param TreeNode|null $a * @param TreeNode|null $b * @return bool */ private function isNullAmountOdd($a, $b) &#123; $nullAmount = 0; if (is_null($a)) &#123; $nullAmount++; &#125; if (is_null($b)) &#123; $nullAmount++; &#125; return ($nullAmount % 2 == 1); &#125;&#125; Time Complexity: O(n) Other Answer (Iterating + Stack): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?phpnamespace LeetCode\\SymmetricTree;/** * Definition for a binary tree node. * class TreeNode &#123; * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) &#123; * $this-&gt;val = $val; * $this-&gt;left = $left; * $this-&gt;right = $right; * &#125; * &#125; */class Solution&#123; /** * @var array */ protected $stack = []; /** * @param TreeNode $root * @return bool */ public function isSymmetric($root) &#123; if (is_null($root-&gt;val)) &#123; return true; &#125; $this-&gt;stack[] = [$root-&gt;left, $root-&gt;right]; while (count($this-&gt;stack) &gt; 0) &#123; $pop = array_pop($this-&gt;stack); $left = $pop[0]; $right = $pop[1]; if (is_null($left) &amp;&amp; is_null($right)) &#123; continue; &#125; if (is_null($left) || is_null($right)) &#123; return false; &#125; if ($left-&gt;val == $right-&gt;val) &#123; $this-&gt;stack[] = [$left-&gt;left, $right-&gt;right]; $this-&gt;stack[] = [$left-&gt;right, $right-&gt;left]; &#125; else &#123; return false; &#125; &#125; return true; &#125;&#125; Time Complexity: O(n) ʕ •ᴥ•ʔ：Iterating的作法，有體會到要利用Stack當存檔點，但具體的while條件沒有想出來。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"100.same-tree","slug":"100-same-tree","date":"2021-04-10T09:18:39.000Z","updated":"2025-05-30T08:15:23.211Z","comments":true,"path":"2021/04/10/100-same-tree/","permalink":"https://yncbearz.github.io/2021/04/10/100-same-tree/","excerpt":"100.same-tree","text":"Description:Given the roots of two binary trees p and q, write a function to check if they are the same or not.Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.Example: 123456Input: p = [1,2,3], q = [1,2,3] 1 1 / \\ / \\ 2 3 2 3Output: true 123456Input: p = [1,2], q = [1,null,2] 1 1 / \\ 2 2Output: false 123456Input: p = [1,2,1], q = [1,1,2] 1 1 / \\ / \\ 2 1 1 2Output: false First Answer (Recursive): 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;?phpnamespace LeetCode\\SameTree;/** * Definition for a binary tree node. * class TreeNode &#123; * public $val = null; * public $left = null; * public $right = null; * function __construct($val = 0, $left = null, $right = null) &#123; * $this-&gt;val = $val; * $this-&gt;left = $left; * $this-&gt;right = $right; * &#125; * &#125; */class Solution&#123; /** * @var bool $answer */ protected $answer = true; /** * @param TreeNode $p * @param TreeNode $q * @return bool */ public function isSameTree($p, $q) &#123; $this-&gt;findAnswer($p, $q); return $this-&gt;answer; &#125; /** * @param TreeNode $p * @param TreeNode $q */ private function findAnswer($p, $q) &#123; if ($p-&gt;val !== $q-&gt;val) &#123; return $this-&gt;answer = false; &#125; if (($p-&gt;left-&gt;val !== $q-&gt;left-&gt;val) || ($p-&gt;right-&gt;val !== $q-&gt;right-&gt;val)) &#123; return $this-&gt;answer = false; &#125; if (!is_null($p-&gt;left) &amp;&amp; !is_null($q-&gt;left)) &#123; $this-&gt;findAnswer($p-&gt;left, $q-&gt;left); &#125; if (!is_null($p-&gt;right) &amp;&amp; !is_null($q-&gt;right)) &#123; $this-&gt;findAnswer($p-&gt;right, $q-&gt;right); &#125; &#125;&#125; Time Complexity: O(n) ʕ •ᴥ•ʔ：很久沒寫文了，最近覺得情況不算太好。重新努力，用寫文把狀態找回來。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"95.unique-binary-search-trees-ii","slug":"95-unique-binary-search-trees-ii","date":"2021-01-22T13:46:43.000Z","updated":"2025-05-30T08:15:23.214Z","comments":true,"path":"2021/01/22/95-unique-binary-search-trees-ii/","permalink":"https://yncbearz.github.io/2021/01/22/95-unique-binary-search-trees-ii/","excerpt":"95.unique-binary-search-trees-ii","text":"Description:Given an integer n, generate all structurally unique BST’s (binary search trees) that store values 1 … n.Example: 1234567891011121314151617Input: 3Output:[ [1,null,3,2], [3,2,null,1], [3,1,null,null,2], [2,1,3], [1,null,2,null,3]]Explanation:The above output corresponds to the 5 unique BST&#x27;s shown below: 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 Similar Question: 96.unique-binary-search-trees Binary Search Tree(BST): Key(L)&lt;Key(Current)&lt;Key(R) Both subtrees of each node are also BSTs Appropriate Answer (Divide-and-conquer): 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;?phpnamespace LeetCode\\UniqueBinarySearchTreesII;/** * Definition for a binary tree node. */// class TreeNode// &#123;// public $val = null;// public $left = null;// public $right = null;// function __construct($val = 0, $left = null, $right = null)// &#123;// $this-&gt;val = $val;// $this-&gt;left = $left;// $this-&gt;right = $right;// &#125;// &#125;class Solution&#123; /** * @param int $n * @return TreeNode[] */ public function generateTrees($n) &#123; $numbers = range(1, $n); return $this-&gt;generateTreesByNumbers($numbers); &#125; /** * @param int[] $originalNumbers * @return array */ private function generateTreesByNumbers($originalNumbers) &#123; if (count($originalNumbers) == 0) &#123; return [null]; &#125; if (count($originalNumbers) == 1) &#123; return [new TreeNode(array_pop($originalNumbers))]; &#125; $result = []; //[1,2,3] =&gt; (1, [2,3]) (2, [1,3]) (3, [1,2]) foreach ($originalNumbers as $key =&gt; $val) &#123; $currentNumbers = $originalNumbers; unset($currentNumbers[$key]); $otherNumbers = $currentNumbers; $result = array_merge($result, $this-&gt;binarySearch($val, $otherNumbers)); &#125; return $result; &#125; /** * @param int $val * @param int[] $otherNumbers * @return TreeNode[] */ private function binarySearch($val, $otherNumbers) &#123; $smallerNumbers = array_filter($otherNumbers, function ($otherNumber) use ($val) &#123; return $otherNumber &lt; $val; &#125;); $biggerNumbers = array_filter($otherNumbers, function ($otherNumber) use ($val) &#123; return $otherNumber &gt; $val; &#125;); $smallerTrees = $this-&gt;generateTreesByNumbers($smallerNumbers); $biggerTrees = $this-&gt;generateTreesByNumbers($biggerNumbers); $trees = []; foreach ($smallerTrees as $aSmallerTree) &#123; foreach ($biggerTrees as $aBiggerTree) &#123; $tree = new TreeNode($val, $aSmallerTree, $aBiggerTree); $trees[] = $tree; &#125; &#125; return $trees; &#125;&#125; ʕ •ᴥ•ʔ：由 linsheng 提供的解法。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"96.unique-binary-search-trees","slug":"96-unique-binary-search-trees","date":"2021-01-14T15:23:38.000Z","updated":"2025-05-30T08:15:23.214Z","comments":true,"path":"2021/01/14/96-unique-binary-search-trees/","permalink":"https://yncbearz.github.io/2021/01/14/96-unique-binary-search-trees/","excerpt":"96.unique-binary-search-trees","text":"Description:Given n, how many structurally unique BST’s (binary search trees) that store values 1 … n?Example: 12345678910Input: 3Output: 5Explanation:Given n = 3, there are a total of 5 unique BST&#x27;s: 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 Appropriate Answer (Dynamic Programming): 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758&lt;?phpnamespace LeetCode\\UniqueBinarySearchTrees;class Solution&#123; /** * @var array */ private $numOfAnswer = []; /** * @param int $n * @return int */ public function numTrees($n) &#123; /** * 沒有節點的情況有一種可能（空集合） */ $this-&gt;numOfAnswer[0] = 1; /** * 1個節點的情況有一種可能（一個點） */ $this-&gt;numOfAnswer[1] = 1; for ($i = 2; $i &lt;= $n; $i++) &#123; $this-&gt;count($i); &#125; return $this-&gt;numOfAnswer[$n]; &#125; /** * @param int $n * @return void */ private function count($n) &#123; /** * 先取出一個節點當root */ $num = $n - 1; /** * 1. 左節點的數量 + 右節點的數量 = $num * 2. 總和 = 左節點數量的所有可能 * 右節點數量的所有可能 */ $result = 0; for ($i = 0; $i &lt;= $num; $i++) &#123; $result = $result + $this-&gt;numOfAnswer[$i] * $this-&gt;numOfAnswer[$num - $i]; &#125; $this-&gt;numOfAnswer[$n] = $result; &#125;&#125; Time Complexity: O(n) ʕ •ᴥ•ʔ：DP Program的思考方式還須多多練習。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"94.binary-tree-inorder-traversal","slug":"94-binary-tree-inorder-traversal","date":"2021-01-02T15:01:19.000Z","updated":"2025-05-30T08:15:23.213Z","comments":true,"path":"2021/01/02/94-binary-tree-inorder-traversal/","permalink":"https://yncbearz.github.io/2021/01/02/94-binary-tree-inorder-traversal/","excerpt":"94.binary-tree-inorder-traversal","text":"Description:Given a binary tree, return the inorder traversal of its nodes’ values.Example: 12345678Input: [1,null,2,3] 1 \\ 2 / 3Output: [1,3,2] Follow up: Recursive solution is trivial, could you do it iteratively? 說明： 12345 4 / \\ 2 6 / \\ / \\1 3 5 7 遍歷方式 輸出結果 搜尋演算法 Pre-Order Traversal 4213657 Depth-first Search In-Order Traversal 1234567 Depth-first Search Post-Order Traversal 1325764 Depth-first Search Level-Order Traversal 4261357 Breadth-first Search Pre-, In-, Post- 是指parent node相對於child node的順序。而Level-則是依照層級關係。 First Answer (Recursive): 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?phpnamespace LeetCode\\BinaryTreeInorderTraversal;/** * Definition for a binary tree node. * class TreeNode &#123; * public $val = null; * public $left = null; * public $right = null; * function __construct($value) &#123; $this-&gt;val = $value; &#125; * &#125; */class Solution&#123; /** * @var Integer[] */ protected $answer = []; /** * @param TreeNode $root * @return Integer[] */ public function inorderTraversal($root) &#123; $this-&gt;findAnswer($root); return $this-&gt;answer; &#125; /** * @param TreeNode $root */ private function findAnswer($root) &#123; /** * 先把左子樹找完 */ if (!is_null($root-&gt;left)) &#123; $this-&gt;findAnswer($root-&gt;left); &#125; /** * 沒有左子樹後，填入根（自己） */ $this-&gt;answer[] = $root-&gt;val; /** * 再找右子樹 */ if (!is_null($root-&gt;right)) &#123; $this-&gt;findAnswer($root-&gt;right); &#125; &#125;&#125; Time Complexity: O(n) Other Answer (Iterating + Stack): 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?phpnamespace LeetCode\\BinaryTreeInorderTraversal;/** * Definition for a binary tree node. * class TreeNode &#123; * public $val = null; * public $left = null; * public $right = null; * function __construct($value) &#123; $this-&gt;val = $value; &#125; * &#125; */class Solution&#123; /** * @var Integer[] */ protected $answer = []; /** * @var Integer[] */ protected $stack = []; /** * @param TreeNode $root * @return Integer[] */ public function inorderTraversal($root) &#123; $this-&gt;findAnswer($root); return $this-&gt;answer; &#125; /** * @param TreeNode $root */ private function findAnswer($root) &#123; while (count($this-&gt;stack) &gt; 0 || !is_null($root)) &#123; if (!is_null($root)) &#123; $this-&gt;stack[] = $root; $root = $root-&gt;left; &#125; else &#123; $pop = array_pop($this-&gt;stack); $this-&gt;answer[] = $pop-&gt;val; if (!is_null($pop-&gt;right)) &#123; $root = $pop-&gt;right; &#125; &#125; &#125; &#125;&#125; Time Complexity: O(n) ʕ •ᴥ•ʔ：還有看到一種Morris Traversal的方法，之後遇到再補充。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"}]},{"title":"小筆記：Exists 與 Not Exists","slug":"Note-Exists-And-Not-Exists","date":"2021-01-01T08:01:54.000Z","updated":"2025-05-30T08:15:23.251Z","comments":true,"path":"2021/01/01/Note-Exists-And-Not-Exists/","permalink":"https://yncbearz.github.io/2021/01/01/Note-Exists-And-Not-Exists/","excerpt":"Note-Exists-And-Not-Exists","text":"本篇靈感來源：SQL 達人的工作現場攻略筆記 本書提到的兩張資料表： 原題目如下：今日欲從 emp_skills 表中，挑出會所有skills 表上技能的員工。 這邊想記錄幾個 exists 跟 not exists 語法的效果。 情況一 12345678910111213141516171819SELECT *FROM emp_skills AS AWHERE EXISTS ( SELECT * FROM skills C WHERE EXISTS ( SELECT * FROM emp_skills AS B WHERE (A.emp = B.emp) AND (B.skill = C.skill) )); 效果是，找出至少會一個skills 表上技能的員工。因此靚儀會被去除。 Hint: 把每個人會的技能組當成一個集合。 情況二 12345678910111213141516171819SELECT *FROM emp_skills AS AWHERE NOT EXISTS ( SELECT * FROM skills C WHERE EXISTS ( SELECT * FROM emp_skills AS B WHERE (A.emp = B.emp) AND (B.skill = C.skill) )); 效果是，找出 skills 表上技能一個都不會的員工。因此只有靚儀會被選出。 情況三 12345678910111213141516171819SELECT *FROM emp_skills AS AWHERE EXISTS ( SELECT * FROM skills C WHERE NOT EXISTS ( SELECT * FROM emp_skills AS B WHERE (A.emp = B.emp) AND (B.skill = C.skill) )); 效果是，找出沒有全會skills 表上技能的員工。因此銘仁、靜儀、勝朋皆會被選出。 情況四 12345678910111213141516171819SELECT *FROM emp_skills AS AWHERE NOT EXISTS ( SELECT * FROM skills C WHERE NOT EXISTS ( SELECT * FROM emp_skills AS B WHERE (A.emp = B.emp) AND (B.skill = C.skill) )); 在理解情況三後，這邊的效果就很明顯了。找出會所有skills 表上技能的員工。 最後附上原題目的 NOT EXISTS 解法。 由 Zero 提供 12345678910111213141516171819SELECT DISTINCT empFROM emp_skills AS AWHERE NOT EXISTS ( SELECT * FROM skills C WHERE NOT EXISTS ( SELECT * FROM emp_skills AS B WHERE (A.emp = B.emp) AND (B.skill = C.skill) )); 即修改 SELECT 中欄位值的情況四。 ʕ •ᴥ•ʔ：Zero真是 SQL 大神～","categories":[{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://yncbearz.github.io/tags/SQL/"}]},{"title":"類別圖：各國婚禮（訪問者模式）","slug":"Class-Diagram-Wedding-Visitor-Pattern","date":"2020-12-27T08:37:14.000Z","updated":"2025-07-30T11:30:13.343Z","comments":true,"path":"2020/12/27/Class-Diagram-Wedding-Visitor-Pattern/","permalink":"https://yncbearz.github.io/2020/12/27/Class-Diagram-Wedding-Visitor-Pattern/","excerpt":"Class-Diagram-Wedding-Visitor-Pattern","text":"Example: 各國婚禮 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465@startumlinterface WeddingRole&#123; + getClothes(WeddingType WeddingType) + getShoes(WeddingType WeddingType)&#125;interface WeddingType&#123; + getClothes(WeddingRole role) + getShoes(WeddingRole role)&#125;WeddingRole &lt;-&gt; WeddingTypeclass BrideGroom&#123; + name: string;&#125;class Bride&#123; + name: string;&#125;WeddingRole &lt;|.. BrideGroomWeddingRole &lt;|.. BrideWeddingType &lt;|.. ChineseWeddingWeddingType &lt;|.. JapaneseWeddingclass Composite&#123; # children: WeddingRole[] + add(WeddingRole role) + remove(WeddingRole role) + display(WeddingType weddingType)&#125;WeddingRole o--- Compositeclass WeddingTypeFactory&#123; + create(string weddingType): WeddingType&#125;WeddingType &lt;--- WeddingTypeFactoryclass Program&#123; # weddingTypeFactory: WeddingTypeFactory + __construct() + getWedding(string weddingType) + createWeddingType(string weddingType): WeddingType&#125;WeddingTypeFactory &lt;-- ProgramBrideGroom &lt;-- ProgramBride &lt;-- ProgramComposite &lt;-- Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：各國婚禮（訪問者模式）","slug":"Example-Wedding-Visitor-Pattern","date":"2020-12-27T08:36:50.000Z","updated":"2025-05-30T08:15:23.241Z","comments":true,"path":"2020/12/27/Example-Wedding-Visitor-Pattern/","permalink":"https://yncbearz.github.io/2020/12/27/Example-Wedding-Visitor-Pattern/","excerpt":"Example-Wedding-Visitor-Pattern","text":"Pattern: 訪問者模式 Class Diagram: 各國婚禮 情境：這是一間國際婚禮公司 12345678910111213141516171819202122232425262728293031323334&lt;?phpnamespace App\\VisitorPattern\\Wedding;class Program&#123; /** * @param string $weddingType * @return string */ public function getWedding($weddingType) &#123; switch ($weddingType) &#123; case &#x27;Chinese&#x27;: echo &#x27;新郎：中式囍袍新郎：黑色秀禾鞋新娘：龍鳳褂新娘：紅色秀禾鞋&#x27;; break; case &#x27;Japanese&#x27;: echo &#x27;新郎：繡有家紋的和服新郎：雪駄新娘：純潔的白無垢新娘：草履&#x27;; break; &#125; &#125;&#125; 熟稔設計模式的我們，一眼就看出來改寫的方向。 讓我們抽出新郎與新娘！ 需求一：抽出新郎 (BrideGroom) 與新娘 (Bride) 類別 新郎類別 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpnamespace App\\VisitorPattern\\Wedding;class BrideGroom&#123; /** * @param string $weddingType */ public function getClothes($weddingType) &#123; switch ($weddingType) &#123; case &#x27;Chinese&#x27;: echo &quot;新郎：中式囍袍\\n&quot;; break; case &#x27;Japanese&#x27;: echo &quot;新郎：繡有家紋的和服\\n&quot;; break; &#125; &#125; /** * @param string $weddingType */ public function getShoes($weddingType) &#123; switch ($weddingType) &#123; case &#x27;Chinese&#x27;: echo &quot;新郎：黑色秀禾鞋\\n&quot;; break; case &#x27;Japanese&#x27;: echo &quot;新郎：雪駄\\n&quot;; break; &#125; &#125;&#125; 新娘類別 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpnamespace App\\VisitorPattern\\Wedding;class Bride&#123; /** * @param string $weddingType */ public function getClothes($weddingType) &#123; switch ($weddingType) &#123; case &#x27;Chinese&#x27;: echo &quot;新娘：龍鳳褂\\n&quot;; break; case &#x27;Japanese&#x27;: echo &quot;新娘：純潔的白無垢\\n&quot;; break; &#125; &#125; /** * @param string $weddingType */ public function getShoes($weddingType) &#123; switch ($weddingType) &#123; case &#x27;Chinese&#x27;: echo &quot;新娘：紅色秀禾鞋\\n&quot;; break; case &#x27;Japanese&#x27;: echo &quot;新娘：草履\\n&quot;; break; &#125; &#125;&#125; 最後改寫既有程式碼 12345678910111213141516171819202122&lt;?phpnamespace App\\VisitorPattern\\Wedding;class Program&#123; /** * @param string $weddingType */ public function getWedding($weddingType) &#123; $brideGroom = new BrideGroom(); $bride = new Bride(); $brideGroom-&gt;getClothes($weddingType); $brideGroom-&gt;getShoes($weddingType); $bride-&gt;getClothes($weddingType); $bride-&gt;getShoes($weddingType); &#125;&#125; 正當我們得意洋洋之時，老闆說了一個令人震驚的需求。 Boss：「隨著版圖擴張，我們之後要支援印度、烏克蘭等各國的婚禮服裝。」 經過觀察我們可以發現，不過是哪一國的婚禮，主角皆是新郎與新娘，且都需要取得服裝與鞋子。 其資料結構是穩定的。變動的是服裝與鞋子的操作。 讓我們用訪問者模式改寫它！ 需求二：配合版圖的擴張，實作訪問者模式 定義婚禮角色介面 12345678910111213141516171819&lt;?phpnamespace App\\VisitorPattern\\Wedding\\Contracts;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;interface WeddingRole&#123; /** * @param WeddingType $weddingType */ public function getClothes($weddingType); /** * @param WeddingType $weddingType */ public function getShoes($weddingType);&#125; 定義婚禮類型介面 12345678910111213141516&lt;?phpnamespace App\\VisitorPattern\\Wedding\\Contracts;interface WeddingType&#123; /** * @param WeddingRole $role */ public function getClothes($role); /** * @param WeddingRole $role */ public function getShoes($role);&#125; WeddingRole 是原本的 元素類別 (Element) 。 WeddingType 則是原本元素類別中的操作，會成為我們的 訪問者類別 (Visitor) 。根據傳入的 元素類別 (Element) ，而有對應的行為。 修改原本的新郎類別 123456789101112131415161718192021222324252627282930&lt;?phpnamespace App\\VisitorPattern\\Wedding;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingRole;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;class BrideGroom implements WeddingRole&#123; /** * @var string */ public $name = &#x27;BrideGroom&#x27;; /** * @param WeddingType $weddingType */ public function getClothes($weddingType) &#123; $weddingType-&gt;getClothes($this); &#125; /** * @param WeddingType $weddingType */ public function getShoes($weddingType) &#123; $weddingType-&gt;getShoes($this); &#125;&#125; 修改原本的新娘類別 12345678910111213141516171819202122232425262728293031&lt;?phpnamespace App\\VisitorPattern\\Wedding;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingRole;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;class Bride implements WeddingRole&#123; /** * @var string */ public $name = &#x27;Bride&#x27;; /** * @param WeddingType $weddingType */ public function getClothes($weddingType) &#123; $weddingType-&gt;getClothes($this); &#125; /** * @param WeddingType $weddingType */ public function getShoes($weddingType) &#123; $weddingType-&gt;getShoes($this); &#125;&#125; BrideGroom 與 Bride 會由客戶端將 WeddingType 傳入（第一次分派）之後再將自己傳給 WeddingType （第二次分派）。 實作中式婚禮 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?phpnamespace App\\VisitorPattern\\Wedding\\Type;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingRole;class ChineseWedding implements WeddingType&#123; /** * @param WeddingRole $role */ public function getClothes($role) &#123; $roleName = $role-&gt;name; switch ($roleName) &#123; case &#x27;BrideGroom&#x27;: echo &quot;新郎：中式囍袍\\n&quot;; break; case &#x27;Bride&#x27;: echo &quot;新娘：龍鳳褂\\n&quot;; break; &#125; &#125; /** * @param WeddingRole $role */ public function getShoes($role) &#123; $roleName = $role-&gt;name; switch ($roleName) &#123; case &#x27;BrideGroom&#x27;: echo &quot;新郎：黑色秀禾鞋\\n&quot;; break; case &#x27;Bride&#x27;: echo &quot;新娘：紅色秀禾鞋\\n&quot;; break; &#125; &#125;&#125; 實作日式婚禮 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?phpnamespace App\\VisitorPattern\\Wedding\\Type;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingRole;class JapaneseWedding implements WeddingType&#123; /** * @param WeddingRole $role */ public function getClothes($role) &#123; $roleName = $role-&gt;name; switch ($roleName) &#123; case &#x27;BrideGroom&#x27;: echo &quot;新郎：繡有家紋的和服\\n&quot;; break; case &#x27;Bride&#x27;: echo &quot;新娘：純潔的白無垢\\n&quot;; break; &#125; &#125; /** * @param WeddingRole $role */ public function getShoes($role) &#123; $roleName = $role-&gt;name; switch ($roleName) &#123; case &#x27;BrideGroom&#x27;: echo &quot;新郎：雪駄\\n&quot;; break; case &#x27;Bride&#x27;: echo &quot;新娘：草履\\n&quot;; break; &#125; &#125;&#125; 各國婚禮會根據傳入婚禮角色得不同，而有不同的行為。 實作婚禮類型工廠，方便客戶端呼叫 12345678910111213141516171819202122&lt;?phpnamespace App\\VisitorPattern\\Wedding;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;use ReflectionClass;class WeddingTypeFactory&#123; /** * @param string $weddingType * @return WeddingType */ public function create($weddingType) &#123; $namespace = &#x27;App\\VisitorPattern\\Wedding\\Type&#x27;; $className = $weddingType . &#x27;Wedding&#x27;; $reflector = new ReflectionClass($namespace . &#x27;\\\\&#x27; . $className); return $reflector-&gt;newInstance(); &#125;&#125; 實作物件結構類別，用來放入元素，便於我們實現遍歷。方便客戶端的呼叫。 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?phpnamespace App\\VisitorPattern\\Wedding;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingRole;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;class Composite&#123; /** * @var WeddingRole[] */ protected $children = []; /** * @param WeddingRole $role * @return void */ public function add(WeddingRole $role) &#123; $this-&gt;children[$role-&gt;name] = $role; &#125; /** * @param WeddingRole $component * @return void */ public function remove(WeddingRole $role) &#123; unset($this-&gt;children[$role-&gt;name]); &#125; /** * @param WeddingType $weddingType * @return void */ public function display(WeddingType $weddingType) &#123; foreach ($this-&gt;children as $child) &#123; $child-&gt;getClothes($weddingType); $child-&gt;getShoes($weddingType); &#125; &#125;&#125; 最後修改既有程式碼 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?phpnamespace App\\VisitorPattern\\Wedding;use App\\VisitorPattern\\Wedding\\Contracts\\WeddingType;use App\\VisitorPattern\\Wedding\\WeddingTypeFactory;use App\\VisitorPattern\\Wedding\\Composite;use App\\VisitorPattern\\Wedding\\BrideGroom;use App\\VisitorPattern\\Wedding\\Bride;class Program&#123; /** * @var WeddingTypeFactory */ protected $weddingTypeFactory; public function __construct() &#123; $this-&gt;weddingTypeFactory = new WeddingTypeFactory(); &#125; /** * @param string $weddingType */ public function getWedding($weddingType) &#123; $weddingType = $this-&gt;createWeddingType($weddingType); $composite = new Composite(); $brideGroom = new BrideGroom(); $bride = new Bride(); $composite-&gt;add($brideGroom); $composite-&gt;add($bride); $composite-&gt;display($weddingType); &#125; /** * @param string $weddingType * @return WeddingType */ private function createWeddingType($weddingType) &#123; return $this-&gt;weddingTypeFactory-&gt;create($weddingType); &#125;&#125; [單一職責原則]我們將婚禮角色（資料結構）與婚禮類型（操作）視作兩種不同的職責。 [開放封閉原則]新增&#x2F;修改婚禮類型時，不會修改到所有的程式碼。 [介面隔離原則]婚禮角色介面：會根據客戶端傳入的婚禮類型，再將自己傳入後，完成行為。婚禮類型介面：會根據傳入的婚禮角色，完成行為。 [依賴反轉原則]依賴於抽象的婚禮角色介面與婚禮類型介面。 ʕ •ᴥ•ʔ：揉合許多模式的範例。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"訪問者模式","slug":"Visitor-Pattern","date":"2020-12-27T08:36:05.000Z","updated":"2025-05-30T08:15:23.258Z","comments":true,"path":"2020/12/27/Visitor-Pattern/","permalink":"https://yncbearz.github.io/2020/12/27/Visitor-Pattern/","excerpt":"Visitor-Pattern","text":"Visitor Pattern允許在不改變組合內各元素的情況下，增加各元素的新操作。Example: 各國婚禮、動物園管理員 訪問者模式會將類別分為兩類：分別是 訪問者類別 (Visitor) 與 元素類別 (Element) 。 讓原本屬於元素的行為，變成 訪問者類別 (Visitor) 。根據傳入元素的不同，會有對應的行為，緊耦合於 元素類別 (Element) 。 優點：將操作從元素類別抽離，使其能獨立變化。容易新增&#x2F;修改訪問者類別。 缺點：難以增加新的元素。破壞了原本元素的封裝。會使程式碼複雜度提高。 與其他模式的比較：[組合模式]：訪問者模式可能會使用到組合模式的技巧。 [迭代器模式]：訪問者模式可能會使用到迭代器模式的技巧。 ʕ •ᴥ•ʔ：訪問者模式改變了原本的主從關係。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：打招呼（中介者模式）","slug":"Class-Diagram-Say-Hello-Mediator-Pattern","date":"2020-12-20T08:47:01.000Z","updated":"2025-07-30T11:30:13.230Z","comments":true,"path":"2020/12/20/Class-Diagram-Say-Hello-Mediator-Pattern/","permalink":"https://yncbearz.github.io/2020/12/20/Class-Diagram-Say-Hello-Mediator-Pattern/","excerpt":"Class-Diagram-Say-Hello-Mediator-Pattern","text":"Example: 打招呼 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364@startumlinterface CentralNervousSystem&#123; + sendMessage(string organName, string message): string&#125;interface Executable&#123; + execute(string message): string&#125;class Brain&#123; # organs: Organ[] + setOrgan(Organ organ)&#125;CentralNervousSystem &lt;|.. Brainabstract class Organ&#123; # name: string # brain: Brain + __construct(Brain brain) + getName(): string&#125;Executable &lt;|.. OrganBrain -o OrganBrain &lt;- OrganOrgan &lt;|-- EyeOrgan &lt;|-- EarOrgan &lt;|-- HandOrgan &lt;|-- MouthOrgan &lt;|-- Faceclass Program&#123; # brain: Brain # eye: Eye # ear: Ear # hand: Hand # mouth: Mouth # face: Face + __construct() + see(string item): string + hear(string item): string - resolveBrainAndOrgans() - resolveOrgans()&#125;Brain &lt;- ProgramEye &lt;-- ProgramEar &lt;-- ProgramHand &lt;-- ProgramMouth &lt;-- ProgramFace &lt;-- Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：打招呼（中介者模式）","slug":"Example-Say-Hello-Mediator-Pattern","date":"2020-12-20T08:45:20.000Z","updated":"2025-05-30T08:15:23.237Z","comments":true,"path":"2020/12/20/Example-Say-Hello-Mediator-Pattern/","permalink":"https://yncbearz.github.io/2020/12/20/Example-Say-Hello-Mediator-Pattern/","excerpt":"Example-Say-Hello-Mediator-Pattern","text":"Pattern: 中介者模式 Class Diagram: 打招呼 \b情境：以下是人腦的運作程式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;?phpnamespace App\\MediatorPattern\\SayHello;class Program&#123; /** * @param string $item * @return string */ public function see($item) &#123; switch ($item) &#123; case &#x27;認識的人&#x27;: return $this-&gt;sayHello(); break; case &#x27;熟識的人&#x27;: return $this-&gt;waveHand(); break; &#125; &#125; /** * @param string $item * @return string */ public function hear($item) &#123; switch ($item) &#123; case &#x27;喜歡的人&#x27;: return $this-&gt;blush(); break; case &#x27;討厭的人&#x27;: return $this-&gt;pretendToLookBusy(); break; &#125; &#125; private function sayHello() &#123; return &#x27;[嘴巴]發出[你好]的聲音&#x27;; &#125; private function waveHand() &#123; return &#x27;[手]做出[揮手]的動作&#x27;; &#125; private function blush() &#123; return &#x27;[臉]開始[發紅]&#x27;; &#125; private function pretendToLookBusy() &#123; return &#x27;[手]做出[裝忙]的動作&#x27;; &#125;&#125; 隨著行為日趨複雜，我們可能會有更多的動作。這些動作會聯繫著不同的器官。 因為強耦合，無論是器官的增加或是行為改變，都會大大地影響既有程式碼。 讓我們用中介者模式改造它！ 需求一：定義中介者介面 (Mediator)與合作者介面 (Colleague) 使用中樞神經系統作為中介者介面 (Mediator) 1234567891011121314&lt;?phpnamespace App\\MediatorPattern\\SayHello\\Contracts;interface CentralNervousSystem&#123; /** * @param string $organName * @param string $message * @return string */ public function sendMessage($organName, $message);&#125; 使用器官作為合作者介面 (Colleague) 12345678910111213&lt;?phpnamespace App\\MediatorPattern\\SayHello\\Contracts;interface Executable&#123; /** * @param string $message * @return string */ public function execute($message);&#125; 需求二：定義實體中介者，來改變合作者間的依賴關係 實作大腦（中介者） 1234567891011121314151617181920212223242526272829303132&lt;?phpnamespace App\\MediatorPattern\\SayHello;use App\\MediatorPattern\\SayHello\\Contracts\\CentralNervousSystem;use App\\MediatorPattern\\SayHello\\Abstracts\\Organ;class Brain implements CentralNervousSystem&#123; /** * @var Organ[] */ protected $organs = []; /** * @param string $organName * @param string $message * @return string */ public function sendMessage($organName, $message) &#123; $organ = $this-&gt;organs[$organName]; return $organ-&gt;execute($message); &#125; public function setOrgan(Organ $organ) &#123; $organName = $organ-&gt;getName(); $this-&gt;organs[$organName] = $organ; &#125;&#125; 抽象器官（合作者） 123456789101112131415161718192021222324252627282930&lt;?phpnamespace App\\MediatorPattern\\SayHello\\Abstracts;use App\\MediatorPattern\\SayHello\\Contracts\\Executable;use App\\MediatorPattern\\SayHello\\Brain;abstract class Organ implements Executable&#123; /** * @var string */ protected $name = &#x27;Unknown&#x27;; /** * @var Brain */ protected $brain; public function __construct(Brain $brain) &#123; $this-&gt;brain = $brain; &#125; public function getName() &#123; return $this-&gt;name; &#125;&#125; 實作眼睛 (合作者) 1234567891011121314151617181920212223242526272829303132&lt;?phpnamespace App\\MediatorPattern\\SayHello;use App\\MediatorPattern\\SayHello\\Abstracts\\Organ;class Eye extends Organ&#123; /** * @var string */ protected $name = &#x27;眼睛&#x27;; /** * @param string $message * @return string */ public function execute($message) &#123; switch ($message) &#123; case &#x27;認識的人&#x27;: return $this-&gt;brain-&gt;sendMessage(&#x27;嘴巴&#x27;, &#x27;你好&#x27;); break; case &#x27;熟識的人&#x27;: return $this-&gt;brain-&gt;sendMessage(&#x27;手&#x27;, &#x27;揮手&#x27;); break; &#125; &#125;&#125; 實作耳朵 (合作者) 12345678910111213141516171819202122232425262728293031&lt;?phpnamespace App\\MediatorPattern\\SayHello;use App\\MediatorPattern\\SayHello\\Abstracts\\Organ;class Ear extends Organ&#123; /** * @var string */ protected $name = &#x27;耳朵&#x27;; /** * @param string $message * @return string */ public function execute($message) &#123; switch ($message) &#123; case &#x27;喜歡的人&#x27;: return $this-&gt;brain-&gt;sendMessage(&#x27;臉&#x27;, &#x27;發紅&#x27;); break; case &#x27;討厭的人&#x27;: return $this-&gt;brain-&gt;sendMessage(&#x27;手&#x27;, &#x27;裝忙&#x27;); break; &#125; &#125;&#125; 實作手 (合作者) 1234567891011121314151617181920&lt;?phpnamespace App\\MediatorPattern\\SayHello;use App\\MediatorPattern\\SayHello\\Abstracts\\Organ;class Hand extends Organ&#123; protected $name = &#x27;手&#x27;; /** * @param string $message * @return string */ public function execute($message) &#123; return &quot;[手]做出[$message]的動作&quot;; &#125;&#125; 實作嘴巴 (合作者) 1234567891011121314151617181920212223&lt;?phpnamespace App\\MediatorPattern\\SayHello;use App\\MediatorPattern\\SayHello\\Abstracts\\Organ;class Mouth extends Organ&#123; /** * @var string */ protected $name = &#x27;嘴巴&#x27;; /** * @param string $message * @return string */ public function execute($message) &#123; return &quot;[嘴巴]發出[$message]的聲音&quot;; &#125;&#125; 實作臉 (合作者) 1234567891011121314151617181920212223&lt;?phpnamespace App\\MediatorPattern\\SayHello;use App\\MediatorPattern\\SayHello\\Abstracts\\Organ;class Face extends Organ&#123; /** * @var string */ protected $name = &#x27;臉&#x27;; /** * @param string $message * @return string */ public function execute($message) &#123; return &quot;[臉]開始[$message]&quot;; &#125;&#125; 以這個範例來說，中介者是大腦，合作者則是各個器官。 當A器官要呼叫B器官，執行某些動作時，會透過大腦，使得A器官不必知道真正的B器官是誰（鬆耦合）。 需求三：改寫既有程式碼 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687&lt;?phpnamespace App\\MediatorPattern\\SayHello;use App\\MediatorPattern\\SayHello\\Brain;use App\\MediatorPattern\\SayHello\\Eye;use App\\MediatorPattern\\SayHello\\Mouth;use App\\MediatorPattern\\SayHello\\Hand;use App\\MediatorPattern\\SayHello\\Ear;use App\\MediatorPattern\\SayHello\\Face;class Program&#123; /** * @var Brain */ protected $brain; /** * @var Eye */ protected $eye; /** * @var Mouth */ protected $mouth; /** * @var Hand */ protected $hand; /** * @var Ear */ protected $ear; /** * @var Face */ protected $face; public function __construct() &#123; $this-&gt;brain = $this-&gt;resolveBrainAndOrgans(); &#125; /** * @param string $item * @return string */ public function see($item) &#123; return $this-&gt;eye-&gt;execute($item); &#125; /** * @param string $item * @return string */ public function hear($item) &#123; return $this-&gt;ear-&gt;execute($item); &#125; private function resolveBrainAndOrgans() &#123; $this-&gt;brain = new Brain(); $this-&gt;resolveOrgans(); $this-&gt;brain-&gt;setOrgan($this-&gt;eye); $this-&gt;brain-&gt;setOrgan($this-&gt;mouth); $this-&gt;brain-&gt;setOrgan($this-&gt;hand); $this-&gt;brain-&gt;setOrgan($this-&gt;ear); $this-&gt;brain-&gt;setOrgan($this-&gt;face); &#125; private function resolveOrgans() &#123; $this-&gt;eye = new Eye($this-&gt;brain); $this-&gt;mouth = new Mouth($this-&gt;brain); $this-&gt;hand = new Hand($this-&gt;brain); $this-&gt;ear = new Ear($this-&gt;brain); $this-&gt;face = new Face($this-&gt;brain); &#125;&#125; \b[單一職責原則]我們將器官的功能與器官間的關係視作兩種不同的職責。 藉由大腦（中介者）負責聯絡各個器官（合作者）執行對應的行為。 \b[開放封閉原則]無論是新增&#x2F;修改器官，或者新增&#x2F;修改器官間的關係，我們都不會改動到所有程式碼。 \b[介面隔離原則]中介者介面：負責傳送器官間的訊息。合作者介面：負責執行該器官的功能。 \b[依賴反轉原則]大腦依賴於合作者介面。器官負責實作合作者介面。 ʕ •ᴥ•ʔ：早上剛睡醒時，想到的範例。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"中介者模式","slug":"Mediator-Pattern","date":"2020-12-20T08:44:51.000Z","updated":"2025-05-30T08:15:23.250Z","comments":true,"path":"2020/12/20/Mediator-Pattern/","permalink":"https://yncbearz.github.io/2020/12/20/Mediator-Pattern/","excerpt":"Mediator-Pattern","text":"Mediator Pattern集中相關對象的之間複雜的溝通與控制方式。Example: 打招呼 中介者模式會將類別分為兩類：分別是中介者類別 (Mediator) 與 合作者類別 (Colleague) 。 優點：容易新增&#x2F;修改合作者。容易新增&#x2F;修改合作者之間的關係。合作者間不必互相參考，使其達到鬆耦合。 缺點：中介者會成為神一般的存在(God Object) 。 與其他模式的比較：[狀態模式]：以關係圖來說，兩個模式皆透過相互參照的方式，消除同分類類別下的強耦合。 起初我會以為中介者模式會類似於Laravel的Container，但兩者目的有很大的不同。 Container主要目的是單例模式與註冊表的實現。而中介者關注在解除合作者之間的耦合關係。 ʕ •ᴥ•ʔ：World Peace!","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：新產品開發（職責鏈模式）","slug":"Class-Diagram-Software-Chain-Of-Responsibility-Pattern","date":"2020-12-11T14:17:52.000Z","updated":"2025-07-30T11:30:13.240Z","comments":true,"path":"2020/12/11/Class-Diagram-Software-Chain-Of-Responsibility-Pattern/","permalink":"https://yncbearz.github.io/2020/12/11/Class-Diagram-Software-Chain-Of-Responsibility-Pattern/","excerpt":"Class-Diagram-Software-Chain-Of-Responsibility-Pattern","text":"Example: 新產品開發 12345678910111213141516171819202122232425262728293031323334353637383940414243444546@startumlclass Request&#123; # type: string # content: string + __construct(string type, string content) + getType(): string + getContent(): string&#125;abstract class Handler&#123; # role: string # canHandleType: array # requestType: string # requestContent: string # nextHandler: Handler + handle(Request request): string + setNextHandler(Handler handler) + canHandle(): boolean&#125;Request &lt;- Handlerclass Supportclass ProjectManagerclass BossHandler &lt;|-- SupportHandler &lt;|-- ProjectManagerHandler &lt;|-- Bossclass Program&#123; + handle(Request request): string&#125;Request &lt;- ProgramSupport &lt;-- ProgramProjectManager &lt;-- ProgramBoss &lt;-- Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：新產品開發（職責鏈模式）","slug":"Example-Software-Chain-Of-Responsibility-Pattern","date":"2020-12-11T14:17:02.000Z","updated":"2025-05-30T08:15:23.238Z","comments":true,"path":"2020/12/11/Example-Software-Chain-Of-Responsibility-Pattern/","permalink":"https://yncbearz.github.io/2020/12/11/Example-Software-Chain-Of-Responsibility-Pattern/","excerpt":"Example-Software-Chain-Of-Responsibility-Pattern","text":"Pattern: 職責鏈模式 Class Diagram: 新產品開發 情境：公司開發了一個新產品，客戶端有許多不同的請求 客戶端的請求類別 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?phpnamespace App\\ChainOfResponsibilityPattern\\Software;class Request&#123; /** * @var string */ protected $type; /** * @var string */ protected $content; /** * @param string $type * @param string $content */ public function __construct(string $type, string $content) &#123; $this-&gt;type = $type; $this-&gt;content = $content; &#125; /** * @return string */ public function getType() &#123; return $this-&gt;type; &#125; /** * @return string */ public function getContent() &#123; return $this-&gt;content; &#125;&#125; 原本處理客戶端請求的方式 123456789101112131415161718192021222324252627282930313233343536&lt;?phpnamespace App\\ChainOfResponsibilityPattern\\Software;use Tests\\Unit\\ChainOfResponsibilityPattern\\Software\\Request;class Program&#123; /** * @param Request $request * @return string */ public function handle(Request $request) &#123; $type = $request-&gt;getType(); $content = $request-&gt;getContent(); switch ($type) &#123; case &#x27;bug&#x27;: // $request = new Request(&#x27;bug&#x27;, &#x27;no connection&#x27;); return &quot;Support已開始處理[$type:$content]的問題。&quot;; break; case &#x27;feature&#x27;: // $request = new Request(&#x27;feature&#x27;, &#x27;add filter&#x27;); return &quot;PM已開始處理[$type:$content]的問題。&quot;; break; default: // $request = new Request(&#x27;cooperative business&#x27;, &#x27;become Google partner&#x27;); return &quot;Boss已開始處理[$type:$content]的問題。&quot;; break; &#125; &#125;&#125; 根據請求類型的不同，我們會交由不同的角色來處理問題。 但這些請求，可以透過區分請求類別的方式，統一先交由Support處理，若Support無法處理，再轉給下個負責人。 以這樣的想法，讓我們用職責鏈模式改造它。 首先是抽象的處理器類別，當該處理器無法處理時，會轉給下一個處理器 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?phpnamespace App\\ChainOfResponsibilityPattern\\Software\\Abstracts;use App\\ChainOfResponsibilityPattern\\Software\\Request;abstract class Handler&#123; /** * @var string */ protected $role; /** * @var array */ protected $canHandleType = []; /** * @var string */ protected $requestType; /** * @var string */ protected $requestContent; /** * @var Handler */ protected $nextHandler; /** * @param Request $request * @return string */ public function handle(Request $request): string &#123; $this-&gt;requestType = $request-&gt;getType(); $this-&gt;requestContent = $request-&gt;getContent(); if ($this-&gt;canHandle()) &#123; $role = $this-&gt;role; $result = &quot;$role can solve [$this-&gt;requestType:$this-&gt;requestContent] issue.&quot;; return $result; &#125; return $this-&gt;nextHandler-&gt;handle($request); &#125; /** * @param Handler $handler */ public function setNextHandler(Handler $handler) &#123; $this-&gt;nextHandler = $handler; &#125; /** * @return boolean */ protected function canHandle() &#123; return in_array($this-&gt;requestType, $this-&gt;canHandleType); &#125;&#125; 由canHandle()方法來知道，該處理器能不能處理。由setNextHandler()方法，來決定下一個處理器。 Support處理器 12345678910111213141516171819&lt;?phpnamespace App\\ChainOfResponsibilityPattern\\Software;use App\\ChainOfResponsibilityPattern\\Software\\Abstracts\\Handler;class Support extends Handler&#123; /** * @var string */ protected $role = &#x27;Support&#x27;; /** * @var array */ protected $canHandleType = [&#x27;bug&#x27;];&#125; PM處理器 12345678910111213141516171819&lt;?phpnamespace App\\ChainOfResponsibilityPattern\\Software;use App\\ChainOfResponsibilityPattern\\Software\\Abstracts\\Handler;class ProjectManager extends Handler&#123; /** * @var string */ protected $role = &#x27;PM&#x27;; /** * @var array */ protected $canHandleType = [&#x27;bug&#x27;, &#x27;feature&#x27;];&#125; Boss處理器 12345678910111213141516171819202122&lt;?phpnamespace App\\ChainOfResponsibilityPattern\\Software;use App\\ChainOfResponsibilityPattern\\Software\\Abstracts\\Handler;class Boss extends Handler&#123; /** * @var string */ protected $role = &#x27;Boss&#x27;; /** * @return boolean */ protected function canHandle() &#123; return true; &#125;&#125; 最後修改原本的程式碼 123456789101112131415161718192021&lt;?phpnamespace App\\ChainOfResponsibilityPattern\\Software;use App\\ChainOfResponsibilityPattern\\Software\\Request;use App\\ChainOfResponsibilityPattern\\Software\\Support;class Program&#123; public function handle(Request $request) &#123; $support = new Support(); $projectManager = new ProjectManager(); $boss = new Boss(); $support-&gt;setNextHandler($projectManager); $projectManager-&gt;setNextHandler($boss); return $support-&gt;handle($request); &#125;&#125; 這邊可以留意，若有未定義類型的請求，最終都會交由Boss處理器來捕捉。 [單一職責原則]我們把處理器與處理器的順序視作兩種不同的職責。 [開放封閉原則]無論是新增&#x2F;修改處理器的邏輯，或者修改處理器的順序，皆不會改動到所有程式碼。 [依賴反轉原則]抽象的處理器類別依賴於自身（組合模式）。實體的處理器類別則實現它。 ʕ •ᴥ•ʔ：一個很生活化的設計模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"職責鏈模式","slug":"Chain-Of-Responsibility-Pattern","date":"2020-12-11T14:16:08.000Z","updated":"2025-05-30T08:15:23.216Z","comments":true,"path":"2020/12/11/Chain-Of-Responsibility-Pattern/","permalink":"https://yncbearz.github.io/2020/12/11/Chain-Of-Responsibility-Pattern/","excerpt":"Chain-Of-Responsibility-Pattern","text":"Chain Of Responsibility Pattern使多個物件都有機會處理請求，從而避免請求的發送者和接受者間的耦合關係。請求會沿著這條鏈傳遞，直到有一個物件處理它。Example: 新產品開發 職責鏈模式會將類別分為兩類：分別是請求類別 (Request) 與 處理器類別 (Handler) 。 優點：容易調整職責鏈中處理器的順序。容易新增&#x2F;修改職責鏈中的處理器。 缺點：需注意是否有請求到鏈的末端仍未被處理。 與其他模式的比較：[裝飾者模式]：裝飾者模式中，每個裝飾者類別皆會裝飾被裝飾者類別。而職責鏈模式中的請求，只會交由一個處理器負責處理。 [組合模式]：職責鏈模式中的處理器類別，會實現相同的介面，最後形成類似枝節點類別 (Composite) 與 葉節點類別 (Leaf) 的結構。 ʕ •ᴥ•ʔ：透過類似命令模式的職責切分，將處理器的職責與鏈的職責解耦，使其易於新增&#x2F;修改。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：十二生肖（橋接模式）","slug":"Class-Diagram-Zodiac-Bridge-Pattern","date":"2020-11-22T15:28:25.000Z","updated":"2025-07-30T11:30:13.355Z","comments":true,"path":"2020/11/22/Class-Diagram-Zodiac-Bridge-Pattern/","permalink":"https://yncbearz.github.io/2020/11/22/Class-Diagram-Zodiac-Bridge-Pattern/","excerpt":"Class-Diagram-Zodiac-Bridge-Pattern","text":"Example: 十二生肖 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758@startumlinterface CrossRiverBehavior&#123; + crossRiver()&#125;class RideAtopTheOxclass Swimclass FlyWithNoWingsclass SlitherCrossRiverBehavior &lt;|.. RideAtopTheOxCrossRiverBehavior &lt;|.. SwimCrossRiverBehavior &lt;|.. FlyWithNoWingsCrossRiverBehavior &lt;|.. Slitherabstract class Contestant&#123; # crossRiverBehavior: CrossRiverBehavior + crossRiver()&#125;class Rat&#123; + __construct()&#125;class Ox&#123; + __construct()&#125;class Dragon&#123; + __construct()&#125;class Snake&#123; + __construct()&#125;Contestant --o CrossRiverBehaviorRat --|&gt; ContestantOx --|&gt; ContestantDragon --|&gt; ContestantSnake --|&gt; Contestantclass Program&#123; + crossRiver(string animalName) - getContestant(string animalName)&#125;Program --&gt; Contestant@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：十二生肖","slug":"Example-Zodiac-Bridge-Pattern","date":"2020-11-21T10:50:37.000Z","updated":"2025-05-30T08:15:23.241Z","comments":true,"path":"2020/11/21/Example-Zodiac-Bridge-Pattern/","permalink":"https://yncbearz.github.io/2020/11/21/Example-Zodiac-Bridge-Pattern/","excerpt":"Example-Zodiac-Bridge-Pattern","text":"Pattern: 橋接模式 Class Diagram: 十二生肖 情境：玉皇大帝要舉辦渡河比賽，動物選手各顯神通。 123456789101112131415161718192021222324252627282930&lt;?phpnamespace App\\BridgePattern\\Zodiac;class Program&#123; /** * @param string $animal */ public function crossRiver($animal) &#123; switch ($animal) &#123; case &#x27;rat&#x27;: echo &#x27;悠哉地站啊站&#x27;; break; case &#x27;ox&#x27;: echo &#x27;努力地游啊游&#x27;; break; case &#x27;dragon&#x27;: echo &#x27;壯麗地飛啊飛&#x27;; break; case &#x27;snake&#x27;: echo &#x27;迅速地滑啊滑&#x27;; break; &#125; &#125;&#125; 故事中，老鼠與貓站在水牛的背上。 水牛勤奮地游，龍翱翔於天際，蛇則獨樹一幟地滑行在水面⋯⋯ 但今天這都不是重點。 假如原有的動物選手要改變渡河方式？（比如貓貓決定自己游泳）假如要新增新的動物選手？（比如老虎也要參賽） 渡河方式與動物選手是兩種不同層級的職責。讓我們用橋接模式改寫它。 需求一：渡河方式 首先定義渡河方式的介面 12345678&lt;?phpnamespace App\\BridgePattern\\Zodiac\\Contracts;interface CrossRiverBehavior&#123; public function crossRiver();&#125; 渡河方式：站在水牛背上 12345678910111213&lt;?phpnamespace App\\BridgePattern\\Zodiac\\CrossRiverBehaviors;use App\\BridgePattern\\Zodiac\\Contracts\\CrossRiverBehavior;class RideAtopTheOx implements CrossRiverBehavior&#123; public function crossRiver() &#123; echo &#x27;悠哉地站啊站&#x27;; &#125;&#125; 渡河方式：日常游泳 12345678910111213&lt;?phpnamespace App\\BridgePattern\\Zodiac\\CrossRiverBehaviors;use App\\BridgePattern\\Zodiac\\Contracts\\CrossRiverBehavior;class Swim implements CrossRiverBehavior&#123; public function crossRiver() &#123; echo &#x27;努力地游啊游&#x27;; &#125;&#125; 渡河方式：無翅飛行 12345678910111213&lt;?phpnamespace App\\BridgePattern\\Zodiac\\CrossRiverBehaviors;use App\\BridgePattern\\Zodiac\\Contracts\\CrossRiverBehavior;class FlyWithNoWings implements CrossRiverBehavior&#123; public function crossRiver() &#123; echo &#x27;壯麗地飛啊飛&#x27;; &#125;&#125; 渡河方式：滑行 12345678910111213&lt;?phpnamespace App\\BridgePattern\\Zodiac\\CrossRiverBehaviors;use App\\BridgePattern\\Zodiac\\Contracts\\CrossRiverBehavior;class Slither implements CrossRiverBehavior&#123; public function crossRiver() &#123; echo &#x27;迅速地滑啊滑&#x27;; &#125;&#125; 需求二：動物選手 首先定義動物選手的介面 123456789101112131415161718&lt;?phpnamespace App\\BridgePattern\\Zodiac\\Abstracts;use App\\BridgePattern\\Zodiac\\Contracts\\CrossRiverBehavior;abstract class Contestant&#123; /** * @var CrossRiverBehavior */ protected $crossRiverBehavior; public function crossRiver() &#123; $this-&gt;crossRiverBehavior-&gt;crossRiver(); &#125;&#125; 此處的crossRiver()並沒有具體行為，而是交由渡河方式來實作！ 動物選手：老鼠 12345678910111213141516171819&lt;?phpnamespace App\\BridgePattern\\Zodiac\\Contestants;use App\\BridgePattern\\Zodiac\\CrossRiverBehaviors\\RideAtopTheOx;use App\\BridgePattern\\Zodiac\\Abstracts\\Contestant;class Rat extends Contestant&#123; /** * @var RideAtopTheOx */ protected $crossRiverBehavior; public function __construct() &#123; $this-&gt;crossRiverBehavior = new RideAtopTheOx(); &#125;&#125; 動物選手：水牛 12345678910111213141516171819&lt;?phpnamespace App\\BridgePattern\\Zodiac\\Contestants;use App\\BridgePattern\\Zodiac\\CrossRiverBehaviors\\Swim;use App\\BridgePattern\\Zodiac\\Abstracts\\Contestant;class Ox extends Contestant&#123; /** * @var Swim */ protected $crossRiverBehavior; public function __construct() &#123; $this-&gt;crossRiverBehavior = new Swim(); &#125;&#125; 動物選手：龍 12345678910111213141516171819&lt;?phpnamespace App\\BridgePattern\\Zodiac\\Contestants;use App\\BridgePattern\\Zodiac\\CrossRiverBehaviors\\FlyWithNoWings;use App\\BridgePattern\\Zodiac\\Abstracts\\Contestant;class Dragon extends Contestant&#123; /** * @var FlyWithNoWings */ protected $crossRiverBehavior; public function __construct() &#123; $this-&gt;crossRiverBehavior = new FlyWithNoWings(); &#125;&#125; 動物選手：蛇 12345678910111213141516171819&lt;?phpnamespace App\\BridgePattern\\Zodiac\\Contestants;use App\\BridgePattern\\Zodiac\\CrossRiverBehaviors\\Slither;use App\\BridgePattern\\Zodiac\\Abstracts\\Contestant;class Snake extends Contestant&#123; /** * @var Slither */ protected $crossRiverBehavior; public function __construct() &#123; $this-&gt;crossRiverBehavior = new Slither(); &#125;&#125; 最後修改原本的程式碼 12345678910111213141516171819202122232425262728293031&lt;?phpnamespace App\\BridgePattern\\Zodiac;use ReflectionClass;use App\\BridgePattern\\Zodiac\\Contracts\\Contestant;class Program&#123; /** * @param string $animalName */ public function crossRiver($animalName) &#123; $contestant = $this-&gt;getContestant($animalName); $contestant-&gt;crossRiver(); &#125; /** * @param string $animalName * @return Contestant */ private function getContestant($animalName) &#123; $namespace = &#x27;App\\BridgePattern\\Zodiac\\Contestants&#x27;; $className = ucfirst($animalName); $reflector = new ReflectionClass($namespace . &#x27;\\\\&#x27; . $className); return $reflector-&gt;newInstance(); &#125;&#125; 運用反射 (Reflection) 機制，讓客戶端的程式碼不再修改。 [單一職責原則]我們把渡河方式與動物選手視作兩種不同的職責。 [開放封閉原則]無論新增動物選手或者修改渡河方式，皆不會改動到所有程式碼。 [介面隔離原則]區分了渡河方式介面與動物選手介面。 雖然兩者目前都只有crossRiver() 方法，但實作的目的不同。日後也可能因需求調整介面，而發展出截然不同的形式。 [依賴反轉原則]客戶端的程式碼依賴於動物選手介面。動物選手介面依賴於渡河方式介面。再由各個實體動物選手與實體渡河方式進行實作。 ʕ •ᴥ•ʔ：希望這個範例有淺顯易懂。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"橋接模式","slug":"Bridge-Pattern","date":"2020-11-21T10:41:22.000Z","updated":"2025-05-30T08:15:23.215Z","comments":true,"path":"2020/11/21/Bridge-Pattern/","permalink":"https://yncbearz.github.io/2020/11/21/Bridge-Pattern/","excerpt":"Bridge-Pattern","text":"Bridge Pattern將抽象部分與實現部分分離，使它們都可以獨立地變化。Example: 十二生肖 橋接模式會將類別分為兩類：分別是抽象類別 (Abstraction) 與 實現類別 (Implementor) 。 抽象類別指的是高層級的抽象層。本身不具備具體邏輯。而實現類別會由低層級的實作層來負責。 舉例：抽象類別 -&gt; 實現類別通話介面 -&gt; 室內電話、行動電話登入介面 -&gt; Web、App 優點：透過分離抽象層與實作層，可根據需求在不同層級上，作相應的變化。 缺點：會使程式碼複雜度提高。 與其他模式的比較：[策略模式]：策略模式屬於行為型 (behavioral) 的設計模式，而橋接模式屬於結構型 (structural) 的設計模式。 這使著兩者在目的上，有著根本的不同。 策略模式可能會隨著運行，動態地調整策略。而橋接模式則會像是兩種不同的實作架構。 [狀態模式]：狀態模式屬於行為型 (behavioral) 的設計模式。可能會在運行過程中改變內部狀態，進而改變具體行為。 舉例： 設計模式 使用情境 策略模式 擁有多家第三方金流，需在主要金流服務掛點時，採用備用金流機制。 狀態模式 行人號誌小綠人會隨著當前標誌不同，顯示不同的圖樣。 橋接模式 框架實作資料庫連線的介面，與其各自不同的具體實作。 ʕ •ᴥ•ʔ：以Laravel而言，設計模式到後來常常會混血，最終還是回歸到S.O.L.I.D的思考。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：生物分類學（組合模式）","slug":"Class-Diagram-Taxonomy-Composite-Pattern","date":"2020-11-15T15:23:02.000Z","updated":"2025-07-30T11:30:13.261Z","comments":true,"path":"2020/11/15/Class-Diagram-Taxonomy-Composite-Pattern/","permalink":"https://yncbearz.github.io/2020/11/15/Class-Diagram-Taxonomy-Composite-Pattern/","excerpt":"Class-Diagram-Taxonomy-Composite-Pattern","text":"Example: 生物分類學 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@startumlinterface Component&#123; + add(Component component) + remove(Component component) + displayClassifiaction(int depth)&#125;abstract class DashHelper&#123; + getDashes(int count)&#125;class Composite&#123; + name: string # children: Component[] + __construct(string name) - displaySelfClassification(int depth) - displayChildrenClassification(int depth)&#125;class Leaf&#123; + name: string + __construct(string name)&#125;Component &lt;|.. CompositeComponent --o CompositeDashHelper &lt;|-- CompositeComponent &lt;|.. LeafDashHelper &lt;|-- Leafclass Program&#123; + getTaxonomy()&#125;Composite &lt;-- ProgramLeaf &lt;-- Program@enduml （註：此處DashHelper以abstract class表示trait） ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：生物分類學（組合模式）","slug":"Example-Taxonomy-Composite-Pattern","date":"2020-11-15T15:21:23.000Z","updated":"2025-05-30T08:15:23.238Z","comments":true,"path":"2020/11/15/Example-Taxonomy-Composite-Pattern/","permalink":"https://yncbearz.github.io/2020/11/15/Example-Taxonomy-Composite-Pattern/","excerpt":"Example-Taxonomy-Composite-Pattern","text":"Pattern: 組合模式 Class Diagram: 生物分類學 情境：原本的生物分類學（界門綱目科屬種） 123456789101112131415161718192021222324&lt;?phpnamespace App\\CompositePattern\\Taxonomy;class Program&#123; public function getTaxonomy() &#123; echo &#x27;動物界-- 脊索動物門---- 哺乳綱------ 雙門齒目-------- 無尾熊科---------- 無尾熊屬------------ 無尾熊------ 食肉目-------- 熊科---------- 大貓熊屬------------ 大貓熊&#x27;; &#125;&#125; （註：排版是因為測試時不能有空格，也間接說明了這是個脆弱測試） 我們利用「-」來做出層級的分類概念。 經由分類發現，無尾熊與大貓熊同屬動物界-脊索動物門-哺乳綱。 讓我們透過組合模式，將其改寫成樹形架構！ 需求一：運用組合模式 首先定義組合介面 (Component)，採取透明模式 (uniformity) 12345678910111213&lt;?phpnamespace App\\CompositePattern\\Taxonomy\\Contracts;interface Component&#123; public function add(Component $component); public function remove(Component $component); public function displayClassifiaction(int $depth);&#125; 定義DashHelper （重構時發現枝節點與葉節點可共用的方法） 1234567891011121314151617181920&lt;?phpnamespace App\\CompositePattern\\Taxonomy\\Traits;trait DashHelper&#123; /** * @param integer $count * @return string */ public function getDashes(int $count) &#123; $dash = &#x27;&#x27;; for ($i = 0; $i &lt; $count; $i++) &#123; $dash = $dash . &#x27;-&#x27;; &#125; return $dash; &#125;&#125; DashHelper目的是做出不同層的分類。 定義枝節點類別 (Composite) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;?phpnamespace App\\CompositePattern\\Taxonomy;use App\\CompositePattern\\Taxonomy\\Contracts\\Component;use App\\CompositePattern\\Taxonomy\\Traits\\DashHelper;class Composite implements Component&#123; use DashHelper; /** * @var string */ public $name; /** * @var Component[] */ protected $children = []; /** * @param string $name */ public function __construct(string $name) &#123; $this-&gt;name = $name; &#125; /** * @param Component $component * @return void */ public function add(Component $component) &#123; $this-&gt;children[$component-&gt;name] = $component; &#125; /** * @param Component $component * @return void */ public function remove(Component $component) &#123; unset($this-&gt;children[$component-&gt;name]); &#125; /** * @param integer $depth * @return void */ public function displayClassifiaction(int $depth) &#123; $this-&gt;displaySelfClassification($depth); $this-&gt;displayChildrenClassification($depth); &#125; /** * @param int $depth * @return void */ private function displaySelfClassification(int $depth) &#123; $dashes = $this-&gt;getDashes($depth); if (strlen($dashes) == 0) &#123; echo &quot;$this-&gt;name\\n&quot;; return; &#125; echo &quot;$dashes $this-&gt;name\\n&quot;; &#125; /** * @param integer $depth * @return void */ private function displayChildrenClassification(int $depth) &#123; foreach ($this-&gt;children as $child) &#123; $child-&gt;displayClassifiaction($depth + 2); &#125; &#125;&#125; 枝節點會先印出自己的分類名稱，接著加層數給子物件。 定義葉節點類別 (Leaf) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?phpnamespace App\\CompositePattern\\Taxonomy;use App\\CompositePattern\\Taxonomy\\Contracts\\Component;use App\\CompositePattern\\Taxonomy\\Traits\\DashHelper;use Exception;class Leaf implements Component&#123; use DashHelper; /** * @var string */ public $name; /** * @param string $name */ public function __construct(string $name) &#123; $this-&gt;name = $name; &#125; /** * @param Component $component * @throws Exception */ public function add(Component $component) &#123; throw new Exception(&#x27;Cannot add to a leaf&#x27;); &#125; /** * @param Component $component * @throws Exception */ public function remove(Component $component) &#123; throw new Exception(&#x27;Cannot remove from a leaf&#x27;); &#125; /** * @param integer $depth * @return void */ public function displayClassifiaction(int $depth) &#123; $dashes = $this-&gt;getDashes($depth); echo &quot;$dashes $this-&gt;name\\n\\n&quot;; &#125;&#125; 葉節點只會列出自己的分類名稱，而且不允許對子物件的操作。 最後修改客戶端的程式碼 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpnamespace App\\CompositePattern\\Taxonomy;class Program&#123; public function getTaxonomy() &#123; $animalia = new Composite(&#x27;動物界&#x27;); $chordata = new Composite(&#x27;脊索動物門&#x27;); $mammalia = new Composite(&#x27;哺乳綱&#x27;); $animalia-&gt;add($chordata); $chordata-&gt;add($mammalia); // koala $diprotodontia = new Composite(&#x27;雙門齒目&#x27;); $phascolarctidae = new Composite(&#x27;無尾熊科&#x27;); $phascolarctos = new Composite(&#x27;無尾熊屬&#x27;); $phascolarctosCinereus = new Leaf(&#x27;無尾熊&#x27;); $diprotodontia-&gt;add($phascolarctidae); $phascolarctidae-&gt;add($phascolarctos); $phascolarctos-&gt;add($phascolarctosCinereus); $mammalia-&gt;add($diprotodontia); // panda $carnivora = new Composite(&#x27;食肉目&#x27;); $ursidae = new Composite(&#x27;熊科&#x27;); $ailuropoda = new Composite(&#x27;大貓熊屬&#x27;); $ailuropodaMelanoleuca = new Leaf(&#x27;大貓熊&#x27;); $carnivora-&gt;add($ursidae); $ursidae-&gt;add($ailuropoda); $ailuropoda-&gt;add($ailuropodaMelanoleuca); $mammalia-&gt;add($carnivora); $animalia-&gt;displayClassifiaction(0); &#125;&#125; （註：此處的變數命名參考學名） [單一職責原則]透過找出可以繼續遞迴的部分，分出枝節點與葉節點。 [開放封閉原則]可以於組合中新增&#x2F;修改某節點，不去影響其他節點的行為。 [依賴反轉原則]客戶依賴於抽象的 組合介面 (Component) 。枝節點與葉節點實現抽象的 組合介面 (Component) 。 ʕ •ᴥ•ʔ：動物界-脊索動物門-哺乳綱-靈長目-人科-人屬-人。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"組合模式","slug":"Composite-Pattern","date":"2020-11-15T15:16:08.000Z","updated":"2025-05-30T08:15:23.229Z","comments":true,"path":"2020/11/15/Composite-Pattern/","permalink":"https://yncbearz.github.io/2020/11/15/Composite-Pattern/","excerpt":"Composite-Pattern","text":"Composite Pattern允許將對象組合成樹形結構來表現整體&#x2F;部分層次結構。組合能讓客戶以一致的方式處理個別對象以及對象組合。Example: 生物分類學 組合模式會將類別分為兩類：分別是枝節點類別 (Composite) 與 葉節點類別 (Leaf) 。 其中葉節點類別沒有子節點。 根據組合介面 (Component) 設計的不同，又可分出兩種類型。 透明方式 (uniformity)於介面宣告管理子物件的方法 (Add, Remove)，使得 枝節點類別 (Composite) 與 葉節點類別 (Leaf) 沒有區別。缺點為 葉節點類別 (Leaf) 本身不具備管理子物件的方法，實現它是沒有意義的。 安全方式 (type safety)不於介面宣告管理子物件的方法，而是在 枝節點類別 (Composite) 中宣告。缺點為客戶端調用時須增加對應的判斷。 優點：面對樹形架構時，能夠使用多態性與遞迴性的作法。 缺點：由於介面須同時滿足枝節點與葉節點，會使程式碼複雜度提高。 與其他模式的比較：[迭代器模式]：運用組合模式，可以與迭代器模式產生良好的協同作用。 [解譯器模式]：兩者有著類似下表的對應關係。 解譯器模式 組合模式 終端表達式 (Terminal Expression) 葉節點類別 (Leaf) 非終端表達式 (NonTerminal Expression) 枝節點類別 (Composite) [裝飾者模式]：裝飾者模式只有一個裝飾過後的物件。而組合模式有著許多個物件。 ʕ •ᴥ•ʔ：組合模式的目的就是實現樹形結構。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：摩斯電碼 （解譯器模式）","slug":"Class-Diagram-Morse-Code-Interpreter-Pattern","date":"2020-11-08T12:10:05.000Z","updated":"2025-07-30T11:30:13.186Z","comments":true,"path":"2020/11/08/Class-Diagram-Morse-Code-Interpreter-Pattern/","permalink":"https://yncbearz.github.io/2020/11/08/Class-Diagram-Morse-Code-Interpreter-Pattern/","excerpt":"Class-Diagram-Morse-Code-Interpreter-Pattern","text":"Example: 摩斯電碼 12345678910111213141516171819202122232425262728293031323334353637383940@startumlclass Context&#123; + text: string + __construct(string text)&#125;interface Expression&#123; + interpret(Context context): Context + execute(string message)&#125;class NonTerminalExpression&#123; + isSpace(string character)&#125;class TerminalExpression&#123; # mapping: array - encode(string character) - typeSpace()&#125;Context &lt;- ExpressionExpression &lt;|-- NonTerminalExpressionExpression &lt;|-- TerminalExpressionclass Program&#123; + encode(string text)&#125;NonTerminalExpression &lt;-- ProgramTerminalExpression &lt;-- Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：摩斯電碼 （解譯器模式）","slug":"Example-Morse-Code-Interpreter-Pattern","date":"2020-11-08T11:24:18.000Z","updated":"2025-05-30T08:15:23.236Z","comments":true,"path":"2020/11/08/Example-Morse-Code-Interpreter-Pattern/","permalink":"https://yncbearz.github.io/2020/11/08/Example-Morse-Code-Interpreter-Pattern/","excerpt":"Example-Morse-Code-Interpreter-Pattern","text":"Pattern: 解譯器模式 Class Diagram: 摩斯電碼 情境：讓我們試著作一個摩斯電碼機，它會將一般句子轉成摩斯電碼的表示 首先是語境類別 (Context) 12345678910111213141516171819&lt;?phpnamespace App\\InterpreterPattern\\MorseCode;class Context&#123; /** * @var string */ public $text; /** * @param string $text */ public function __construct(string $text) &#123; $this-&gt;text = $text; &#125;&#125; 主要是承載要解譯的詞句，會隨著解譯進度，改變其內容。 接著是表達式類別 (Expression) 1234567891011121314151617181920212223&lt;?phpnamespace App\\InterpreterPattern\\MorseCode\\Contracts;use App\\InterpreterPattern\\MorseCode\\Context;interface Expression&#123; /** * 找出要解析的字串執行，並回傳剩餘字串 * * @param Context $context * @return Context */ public function interpret(Context $context): Context; /** * 解析字串後，印在控制台 * * @param string $message */ public function execute(string $message);&#125; 這邊說明一下，所謂的摩斯電碼，是利用滴答兩種不同長短訊號的排列組合，來表達每一個字母符號。 例如：A的表示為 (.-)。 而在此處的範例中，同個單字的字母會用空格 ( ) 分開，不同單字的字母則會用斜槓 (&#x2F;) 分開。 例如：Good Morning的表示會是 (–. — — -.. &#x2F; – — .-. -. .. -. –.)。 字母間不區分大小寫。 按照上述規則，我想區分出兩種表達式 (Expression)。 解譯字母符號的為終端表達式 (Terminal Expression) ，其他情況為非終端表達式 (NonTerminal Expression) 。 想法是使用非終端表達式時，表示還有字需要解譯。 實作非終端表達式 (NonTerminal Expression) 1234567891011121314151617181920212223242526272829303132333435&lt;?phpnamespace App\\InterpreterPattern\\MorseCode;use App\\InterpreterPattern\\MorseCode\\Contracts\\Expression;use App\\InterpreterPattern\\MorseCode\\Context;class NonTerminalExpression implements Expression&#123; public function interpret(Context $context): Context &#123; $head = &#x27; &#x27;; $context-&gt;text = trim($context-&gt;text); $this-&gt;execute($head); return $context; &#125; /** * @param string $message */ public function execute(string $message) &#123; echo &#x27; / &#x27;; &#125; /** * @param string $character * @return boolean */ public function isSpace($character) &#123; return $character == &#x27; &#x27;; &#125;&#125; 此處interpret()方法會將目前解譯到的詞句，去除前後空白。execute()方法則會印出斜槓 (&#x2F;)。 而isSpace()方法，會在待會的客戶端程式碼用到。 實作終端表達式 (Terminal Expression) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111&lt;?phpnamespace App\\InterpreterPattern\\MorseCode;use App\\InterpreterPattern\\MorseCode\\Contracts\\Expression;use App\\InterpreterPattern\\MorseCode\\Context;use App\\InterpreterPattern\\MorseCode\\Exceptions\\UndefinedTextException;class TerminalExpression implements Expression&#123; protected $mapping = [ &#x27;a&#x27; =&gt; &#x27;.-&#x27;, &#x27;b&#x27; =&gt; &#x27;-...&#x27;, &#x27;c&#x27; =&gt; &#x27;-.-.&#x27;, &#x27;d&#x27; =&gt; &#x27;-..&#x27;, &#x27;e&#x27; =&gt; &#x27;.&#x27;, &#x27;f&#x27; =&gt; &#x27;..-.&#x27;, &#x27;g&#x27; =&gt; &#x27;--.&#x27;, &#x27;h&#x27; =&gt; &#x27;....&#x27;, &#x27;i&#x27; =&gt; &#x27;..&#x27;, &#x27;j&#x27; =&gt; &#x27;.---&#x27;, &#x27;k&#x27; =&gt; &#x27;-.-&#x27;, &#x27;l&#x27; =&gt; &#x27;.-..&#x27;, &#x27;m&#x27; =&gt; &#x27;--&#x27;, &#x27;n&#x27; =&gt; &#x27;-.&#x27;, &#x27;o&#x27; =&gt; &#x27;---&#x27;, &#x27;p&#x27; =&gt; &#x27;.--.&#x27;, &#x27;q&#x27; =&gt; &#x27;--.-&#x27;, &#x27;r&#x27; =&gt; &#x27;.-.&#x27;, &#x27;s&#x27; =&gt; &#x27;...&#x27;, &#x27;t&#x27; =&gt; &#x27;-&#x27;, &#x27;u&#x27; =&gt; &#x27;..-&#x27;, &#x27;v&#x27; =&gt; &#x27;...-&#x27;, &#x27;w&#x27; =&gt; &#x27;.--&#x27;, &#x27;x&#x27; =&gt; &#x27;-..-&#x27;, &#x27;y&#x27; =&gt; &#x27;-.--&#x27;, &#x27;z&#x27; =&gt; &#x27;--..&#x27;, &#x27;0&#x27; =&gt; &#x27;-----&#x27;, &#x27;1&#x27; =&gt; &#x27;.----&#x27;, &#x27;2&#x27; =&gt; &#x27;..---&#x27;, &#x27;3&#x27; =&gt; &#x27;...--&#x27;, &#x27;4&#x27; =&gt; &#x27;....-&#x27;, &#x27;5&#x27; =&gt; &#x27;.....&#x27;, &#x27;6&#x27; =&gt; &#x27;-....&#x27;, &#x27;7&#x27; =&gt; &#x27;--...&#x27;, &#x27;8&#x27; =&gt; &#x27;---..&#x27;, &#x27;9&#x27; =&gt; &#x27;----.&#x27;, &#x27;.&#x27; =&gt; &#x27;.-.-.-&#x27;, &#x27;,&#x27; =&gt; &#x27;--..--&#x27;, &#x27;?&#x27; =&gt; &#x27;..--..&#x27;, &#x27;/&#x27; =&gt; &#x27;-..-.&#x27;, &quot;&#x27;&quot; =&gt; &#x27;.----.&#x27;, &#x27;!&#x27; =&gt; &#x27;-.-.--&#x27;, ]; public function interpret(Context $context): Context &#123; $firstSpacePos = strpos($context-&gt;text, &#x27; &#x27;); if ($firstSpacePos) &#123; $head = substr($context-&gt;text, 0, $firstSpacePos); $context-&gt;text = substr($context-&gt;text, $firstSpacePos); &#125; else &#123; $head = $context-&gt;text; $context-&gt;text = &#x27;&#x27;; &#125; $this-&gt;execute($head); return $context; &#125; /** * @param string $message */ public function execute(string $message) &#123; $characters = str_split($message); $lastKey = array_key_last($characters); foreach ($characters as $key =&gt; $character) &#123; $this-&gt;encode($character); if ($key == $lastKey) &#123; break; &#125; $this-&gt;typeSpace(); &#125; &#125; /** * @param string $character */ private function encode(string $character) &#123; $character = strtolower($character); if (!array_key_exists($character, $this-&gt;mapping)) &#123; throw new UndefinedTextException(); &#125; echo $this-&gt;mapping[$character]; &#125; private function typeSpace() &#123; echo &#x27; &#x27;; &#125;&#125; 此處interpret()方法會找出要解譯的單字，並截斷它。execute()方法則會逐步印出單字中的每一個字母符號，彼此間以空格隔開。 實作客戶端的程式碼 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?phpnamespace App\\InterpreterPattern\\MorseCode;use App\\InterpreterPattern\\MorseCode\\NonTerminalExpression;use App\\InterpreterPattern\\MorseCode\\TerminalExpression;use App\\InterpreterPattern\\MorseCode\\Context;class Program&#123; /** * @var TerminalExpression */ protected $terminalExpression; /** * @var NonTerminalExpression */ protected $nonTerminalExpression; public function __construct() &#123; $this-&gt;terminalExpression = new TerminalExpression(); $this-&gt;nonTerminalExpression = new NonTerminalExpression(); &#125; /** * @param string $text */ public function encode(string $text) &#123; try &#123; $context = new Context(trim($text)); while (strlen($context-&gt;text) &gt; 0) &#123; $firstCharacter = substr($context-&gt;text, 0, 1); if ($this-&gt;nonTerminalExpression-&gt;isSpace($firstCharacter)) &#123; $context = $this-&gt;nonTerminalExpression-&gt;interpret($context); continue; &#125; $context = $this-&gt;terminalExpression-&gt;interpret($context); &#125; &#125; catch (\\Throwable $th) &#123; throw $th; &#125; &#125;&#125; 最後讓我們來看客戶端程式碼怎麼跑吧！ 以Hello World為例： 首先會將Hello World轉成語境類別 (Context) 。 終端表達式 (Terminal Expression) 會截取出Hello這個單字，印出它的摩斯電碼。 非終端表達式 (NonTerminal Expression) 則會去除空白，印出斜槓 (&#x2F;)。 終端表達式 (Terminal Expression) 會截取出World這個單字，印出它的摩斯電碼。 客戶端程式碼判斷解譯完成，結束迴圈。 [單一職責原則]語境類別 (Context) ：負責乘載要解譯的詞句。非終端表達式 (NonTerminal Expression) ：負責連結解譯單字間的文法。終端表達式 (Terminal Expression) ：負責解譯每一個字母符號。 [開放封閉原則]增加要轉譯的字母符號時，僅需修改終端表達式 (Terminal Expression)。 [依賴反轉原則]透過表達式 (Expression) 接口，確保各個表達式都有interpret()方法與execute()方法。 現實中幾乎沒有機會使用到的設計模式，範例想了很多天，希望這樣有傳達出這個模式的精神！ 另外這個範例還沒有完成decode()方法，也就是從摩斯電碼轉回一般句子。 之後有時間會試著實作看看。 ʕ •ᴥ•ʔ：目前心目中前三難的設計模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"解譯器模式","slug":"Interpreter-Pattern","date":"2020-11-04T09:53:00.000Z","updated":"2025-05-30T08:15:23.246Z","comments":true,"path":"2020/11/04/Interpreter-Pattern/","permalink":"https://yncbearz.github.io/2020/11/04/Interpreter-Pattern/","excerpt":"Interpreter-Pattern","text":"Interpreter Pattern給定一個語言，定義它的語法表示與文法。利用不同的表達式來翻譯語言中的句子。Example: 摩斯電碼 解譯器模式會將類別分為兩類：分別是語境類別 (Context) 與 表達式類別 (Expression) 。 其中語境類別為待翻譯的資料。透過客戶端依序呼叫不同的表達式類別來完成翻譯。 通常一種文法（規則）會對應一個表達式。 \b語言通常會是領域特定語言 (Domain Specific Language) ，即專注於某個應用程式領域的計算機語言。 （例如：SQL, HTML, Regular Expressions） 優點：用來定義簡單語言的文法，使它們可以被翻譯。 缺點：程式碼複雜度提高。當文法變得複雜時，難以維護。 ʕ •ᴥ•ʔ：程式界的翻譯蒟蒻！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：文字積木 （蠅量模式）","slug":"Class-Diagram-Blocks-Flyweight-Pattern","date":"2020-11-02T13:24:10.000Z","updated":"2025-07-30T11:32:57.043Z","comments":true,"path":"2020/11/02/Class-Diagram-Blocks-Flyweight-Pattern/","permalink":"https://yncbearz.github.io/2020/11/02/Class-Diagram-Blocks-Flyweight-Pattern/","excerpt":"Class-Diagram-Blocks-Flyweight-Pattern","text":"Example: 文字積木 123456789101112131415161718192021222324252627282930313233343536@startumlinterface Block&#123; + getShape(): string + display(string word): string&#125;class ConcreteBlock&#123; # shape: string + __construct(string shape) + getShape(): string + display(string word): string&#125;Block &lt;|- ConcreteBlockclass BlockFactory&#123; # blocks: Block[] + getBlock(string shape): Block&#125;Block &lt;-- BlockFactoryclass Program&#123; + getBlocks(): array&#125;BlockFactory &lt;-- Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：文字積木 （蠅量模式）","slug":"Example-Blocks-Flyweight-Pattern","date":"2020-11-01T16:14:55.000Z","updated":"2025-05-30T08:15:23.232Z","comments":true,"path":"2020/11/02/Example-Blocks-Flyweight-Pattern/","permalink":"https://yncbearz.github.io/2020/11/02/Example-Blocks-Flyweight-Pattern/","excerpt":"Example-Blocks-Flyweight-Pattern","text":"Pattern: 蠅量模式 Class Diagram: 文字積木 情境：這是公司生產的文字積木 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?phpnamespace App\\Flyweight\\Blocks;class ConcreteBlock&#123; /** * @var string */ protected $shape; /** * @var string */ public $word; /** * @param string $shape * @param string $word */ public function __construct(string $shape, string $word) &#123; $this-&gt;shape = $shape; $this-&gt;word = $word; &#125; /** * @return string */ public function getShape(): string &#123; return $this-&gt;shape; &#125; /** * @return string */ public function getWord(): string &#123; return $this-&gt;word; &#125;&#125; 客戶端的使用方式 1234567891011121314151617181920212223namespace App\\Flyweight\\Blocks;&lt;?phpnamespace App\\Flyweight\\Blocks;use App\\Flyweight\\Blocks\\ConcreteBlock;class Program&#123; /** * @return array */ public function getBlocks(): array &#123; $firstBlock = new ConcreteBlock(&#x27;star&#x27;, &#x27;B&#x27;); $secondBlock = new ConcreteBlock(&#x27;square&#x27;, &#x27;E&#x27;); $thirdBlock = new ConcreteBlock(&#x27;square&#x27;, &#x27;A&#x27;); $fourthBlock = new ConcreteBlock(&#x27;square&#x27;, &#x27;R&#x27;); return [$firstBlock, $secondBlock, $thirdBlock, $fourthBlock]; &#125;&#125; 隨著積木越賣越好，我們會創建出許多Block，它們要顯示的文字各不相同，但形狀大概就那幾種。 我們決定改變積木的實作，不紀錄顯示文字於積木的狀態中。抽離出共用的形狀部分，來節省記憶體的消耗。 首先定義抽象的積木介面 123456789&lt;?phpnamespace App\\Flyweight\\Blocks\\Contracts;interface Block&#123; public function getShape(); public function display(string $word): string;&#125; 之後我們要顯示文字時，會使用display()方法。 接著定義實體積木 1234567891011121314151617181920212223242526272829303132333435363738&lt;?phpnamespace App\\Flyweight\\Blocks;use App\\Flyweight\\Blocks\\Contracts\\Block;class ConcreteBlock implements Block&#123; /** * @var string */ protected $shape; /** * @param string $shape */ public function __construct(string $shape) &#123; $this-&gt;shape = $shape; &#125; /** * @return string */ public function getShape(): string &#123; return $this-&gt;shape; &#125; /** * @param string $word * @return string */ public function display(string $word): string &#123; return $word; &#125;&#125; 實作積木工廠，採用單例模式來共享 123456789101112131415161718192021222324252627&lt;?phpnamespace App\\Flyweight\\Blocks;use App\\Flyweight\\Blocks\\ConcreteBlock;use App\\Flyweight\\Blocks\\Contracts\\Block;class BlockFactory&#123; /** * @var Block[] */ protected $blocks; /** * @param string $shape * @return ConcreteBlock */ public function getBlock(string $shape): Block &#123; if (!isset($this-&gt;blocks[$shape])) &#123; $this-&gt;blocks[$shape] = new ConcreteBlock($shape); &#125; return $this-&gt;blocks[$shape]; &#125;&#125; 最後修改客戶端的使用方式 12345678910111213141516171819202122232425262728293031&lt;?phpnamespace App\\Flyweight\\Blocks;use App\\Flyweight\\Blocks\\Block;class Program&#123; /** * @return array */ public function getBlocks(): array &#123; $blockFactory = new BlockFactory(); $firstBlock = $blockFactory-&gt;getBlock(&#x27;star&#x27;); // $firstBlock-&gt;display(&#x27;B&#x27;); $secondBlock = $blockFactory-&gt;getBlock(&#x27;square&#x27;); // $secondBlock-&gt;display(&#x27;E&#x27;); $thirdBlock = $blockFactory-&gt;getBlock(&#x27;square&#x27;); // $thirdBlock-&gt;display(&#x27;A&#x27;); $fourthBlock = $blockFactory-&gt;getBlock(&#x27;square&#x27;); // $fourthBlock-&gt;display(&#x27;R&#x27;); return [$firstBlock, $secondBlock, $thirdBlock, $fourthBlock]; &#125;&#125; 當客戶端要顯示文字時，再呼叫display()方法。 [單一職責原則]我們將管理內部狀態與管理外部狀態，視為兩種不同的職責。 透過區分兩者，我們便可以用簡單工廠模式搭配單例模式，切出細粒度的物件，來共用相同的程式碼。 其蠅量類別只紀錄內部狀態且創建後便不會改變。 [開放封閉原則]透過工廠，我們可以修改積木本身的實作（例如換廠牌），而不影響客戶端。當客戶端修改外部狀態時，也不影響原本純內部狀態的積木。 [依賴反轉原則]工廠依賴於抽象的積木介面。實體積木實作了抽象的積木介面。 ʕ •ᴥ•ʔ：原來共享經濟是用了蠅量模式的概念啊。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"蠅量模式","slug":"Flyweight-Pattern","date":"2020-11-01T16:09:33.000Z","updated":"2025-05-30T08:15:23.242Z","comments":true,"path":"2020/11/02/Flyweight-Pattern/","permalink":"https://yncbearz.github.io/2020/11/02/Flyweight-Pattern/","excerpt":"Flyweight-Pattern","text":"Flyweight Pattern又稱為享元模式，於相似物件中共享儘可能多的資訊，進而減少記憶體使用量。Example: 文字積木 蠅量模式會將類別分為兩類：分別是工廠類別 (Factory) 與 蠅量類別 (Flyweight) 。 透過區分出程式碼的內部狀態與外部狀態，來找出可以共用的程式碼。 將它抽離成蠅量類別，其狀態是不可變的 (immutable) 。 優點：當擁有許多相似物件時，可節省大量記憶體。 缺點：程式碼複雜度提高。 與其他模式的比較：[單例模式]：兩者的精神皆是透過共用已創建的實例，來節省資源。但蠅量模式的實例狀態是不可變的。 ʕ •ᴥ•ʔ：工廠模式與單例模式的聯合應用技。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：仿真Git （備忘錄模式）","slug":"Class-Diagram-Git-Memento-Pattern","date":"2020-10-26T15:36:16.000Z","updated":"2025-07-30T11:30:13.168Z","comments":true,"path":"2020/10/26/Class-Diagram-Git-Memento-Pattern/","permalink":"https://yncbearz.github.io/2020/10/26/Class-Diagram-Git-Memento-Pattern/","excerpt":"Class-Diagram-Git-Memento-Pattern","text":"Example: 仿真Git 123456789101112131415161718192021222324252627282930313233343536373839404142434445@startumlclass Commit&#123; - code + __construct(string code) + getCode(): string&#125;class Folder&#123; - commits + saveCommit(Commit commit) + getPreviousCommit(int previous): Commit&#125;Commit -o Folderclass Git&#123; # folder - code + __construct(Folder folder) + getUntrackedCode(): string + writeCode(string code) + commit() - createCommit(): Commit + reset(int previous): string&#125;class Program&#123; + run()&#125;Git &lt;- ProgramFolder &lt;- ProgramFolder &lt;-- GitCommit &lt;-- Git@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：仿真Git （備忘錄模式）","slug":"Example-Git-Memento-Pattern","date":"2020-10-25T01:06:43.000Z","updated":"2025-05-30T08:15:23.235Z","comments":true,"path":"2020/10/25/Example-Git-Memento-Pattern/","permalink":"https://yncbearz.github.io/2020/10/25/Example-Git-Memento-Pattern/","excerpt":"Example-Git-Memento-Pattern","text":"Pattern: 備忘錄模式 Class Diagram: 仿真Git 情境：讓我們利用備忘錄模式，實作一個仿真Git 首先定義Commit 1234567891011121314151617181920212223242526&lt;?phpnamespace App\\MementoPattern\\Git;/** * This is our Memento in memento pattern */class Commit&#123; /** * This is our state. * * @var string */ private $code; public function __construct(string $code) &#123; $this-&gt;code = $code; &#125; public function getCode(): string &#123; return $this-&gt;code; &#125;&#125; Commit屬於備忘錄類別 (Memento) ，負責儲存原始類別 (Originator) 的狀態。 在這個範例中，code就是我們的狀態。 接著定義Folder 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpnamespace App\\MementoPattern\\Git;use App\\MementoPattern\\Git\\Commit;/** * This is our CareTaker in memento pattern */class Folder&#123; /** * @var Commit[] */ private $commits = []; /** * @param Commit $commit */ public function saveCommit(Commit $commit) &#123; $this-&gt;commits[] = $commit; &#125; /** * @param int $previous * @return Commit */ public function getPreviousCommit(int $previous): Commit &#123; $commitAmount = count($this-&gt;commits); $index = $commitAmount - $previous; $result = $this-&gt;commits[$index]; return $result; &#125;&#125; Folder屬於管理類別 (Caretaker) ，負責管理Commit的存儲。 接著是我們的Git類別 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?phpnamespace App\\MementoPattern\\Git;use App\\MementoPattern\\Git\\Commit;use App\\MementoPattern\\Git\\Folder;/** * This is our Originator in memento pattern */class Git&#123; /** * @var Folder */ protected $folder; /** * This is our state. * * @var string */ private $code; /** * @param Folder $folder */ public function __construct(Folder $folder) &#123; $this-&gt;folder = $folder; &#125; /** * Getter * * @return string */ public function getUntrackedCode(): string &#123; return $this-&gt;code; &#125; /** * Setter * * @var string */ public function writeCode(string $code) &#123; $this-&gt;code = $code; &#125; public function commit() &#123; $commit = $this-&gt;createCommit(); $this-&gt;code = &#x27;&#x27;; $this-&gt;folder-&gt;saveCommit($commit); &#125; private function createCommit(): Commit &#123; return new Commit($this-&gt;code); &#125; /** * @param int $previous * @return string */ public function reset(int $previous): string &#123; return $this-&gt;code = $this-&gt;folder-&gt;getPreviousCommit($previous)-&gt;getCode(); &#125;&#125; Git屬於我們的原始類別 (Originator) ，具有code狀態。 getUntrackedCode()及writeCode()是我們code狀態的Getter&#x2F;Setter。 透過commit()方法，生成Commit，保存了當下code的狀態，並傳給Folder作為紀錄存檔。 透過reset()方法，我們可以載入先前存檔好的code狀態。 最後讓我們看客戶端的程式碼 123456789101112131415161718192021222324252627&lt;?phpnamespace App\\MementoPattern\\Git;use App\\MementoPattern\\Git\\Folder;use App\\MementoPattern\\Git\\Git;class Program&#123; public function run() &#123; $folder = new Folder(); $git = new Git($folder); $git-&gt;writeCode(&#x27;aaa&#x27;); dump($git-&gt;getUntrackedCode()); //aaa $git-&gt;commit(); dump($git-&gt;getUntrackedCode()); //&#x27;&#x27; $git-&gt;writeCode(&#x27;bbb&#x27;); $git-&gt;commit(); $git-&gt;reset(1); dump($git-&gt;getUntrackedCode()); //aaa &#125;&#125; [單一職責原則]我們將原始類別、備忘錄類別與管理類別視為三種職責。 [開放封閉原則]透過備忘錄類別與管理類別，原始類別不需要實作恢復狀態的相關功能。 ʕ •ᴥ•ʔ：這個範例只是利用Git作為媒介，與真實Git行為不完全相同。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"備忘錄模式","slug":"Memento-Pattern","date":"2020-10-25T00:50:18.000Z","updated":"2025-05-30T08:15:23.250Z","comments":true,"path":"2020/10/25/Memento-Pattern/","permalink":"https://yncbearz.github.io/2020/10/25/Memento-Pattern/","excerpt":"Memento-Pattern","text":"Memento Pattern透過對象外的存檔，讓對象能夠載入之前的狀態。Example: 仿真Git 備忘錄模式會將類別分成三類：分別是原始類別 (Originator) 、 備忘錄類別 (Memento) 與 管理類別 (Caretaker) 。 原始類別為具有內部狀態的標的。備忘錄類別為儲存的原始類別，擁有當時的內部狀態。管理類別負責備忘錄類別的存儲，並留下歷史紀錄。 優點：可以在不破壞封裝性的情況下，保存物件的狀態。可以藉由管理類別，輕易地恢復先前原始類別的狀態。 缺點：當備忘錄類別過多時，會佔用大量的內存。 與其他模式的比較：[命令模式]：命令模式的層級為一道道的不同的命令。備忘錄模式的層級則為原始類別的狀態。 [原型模式]：\b原型模式相當類似備忘錄模式，但缺少了存儲的管理類別。 ʕ •ᴥ•ʔ：玩過RPG遊戲就會理解的模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：假期規劃 （建造者模式）","slug":"Class-Diagram-Vacation-Builder-Pattern","date":"2020-10-17T07:51:28.000Z","updated":"2025-07-30T11:30:13.324Z","comments":true,"path":"2020/10/17/Class-Diagram-Vacation-Builder-Pattern/","permalink":"https://yncbearz.github.io/2020/10/17/Class-Diagram-Vacation-Builder-Pattern/","excerpt":"Class-Diagram-Vacation-Builder-Pattern","text":"Example: 假期規劃 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455@startumlclass Itinerary&#123; # from: string # to: string # day: int # hotel: string # transport: string + __set(name, value) + __get(name): string | int + toArray(): array&#125;interface ItineraryPlanable&#123; + from(string from): self + to(string to): self + spendDays(int days): self + stayAt(string hotel): self + travelBy(string transport): self + getItinerary(): Itinerary&#125;class ItineraryBuilder&#123; # itinerary: Itinerary + __construct()&#125;ItineraryPlanable &lt;|.. ItineraryBuilderItineraryBuilder -&gt; Itineraryclass TravelAgency&#123; # itineraryBuilder: ItineraryPlanable + __construct(ItineraryPlanable itineraryBuilder) + getHighSpeedRailItinerary(): array + getFiveDaysTokyoItinerary(): array&#125;TravelAgency -&gt; ItineraryPlanableclass Program&#123; + getDomesticTravel(): array + getInternationalTravel(): array&#125;Program --&gt; TravelAgency@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：假期規劃 （建造者模式）","slug":"Example-Vacation-Builder-Pattern","date":"2020-10-17T07:51:04.000Z","updated":"2025-05-30T08:15:23.240Z","comments":true,"path":"2020/10/17/Example-Vacation-Builder-Pattern/","permalink":"https://yncbearz.github.io/2020/10/17/Example-Vacation-Builder-Pattern/","excerpt":"Example-Vacation-Builder-Pattern","text":"Pattern: 建造者模式 Class Diagram: 假期規劃 \b情境：目前提供旅遊行程的方式 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpnamespace App\\BuilderPattern\\Vacation;class Program&#123; /** * @return array */ public function getDomesticTravel() &#123; //高速鐵路一日體驗 return [ &#x27;from&#x27; =&gt; &#x27;Kaohsiung&#x27;, &#x27;to&#x27; =&gt; &#x27;Taipei&#x27;, &#x27;day&#x27; =&gt; 1, &#x27;transport&#x27; =&gt; &#x27;High Speed Rail&#x27; ]; &#125; /** * @return array */ public function getInternationalTravel() &#123; //東京五日遊 return [ &#x27;from&#x27; =&gt; &#x27;Kaohsiung&#x27;, &#x27;to&#x27; =&gt; &#x27;Tokyo&#x27;, &#x27;day&#x27; =&gt; 5, &#x27;transport&#x27; =&gt; &#x27;Airplane&#x27;, &#x27;hotel&#x27; =&gt; &#x27;Disney Hotel&#x27; ]; &#125;&#125; 老闆希望我們能提供更簡便的方式，來規劃不同的旅遊行程。讓我們用建造者模式改造它。 需求一：實作旅遊行程 （產品類別） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;?phpnamespace App\\BuilderPattern\\Vacation;class Itinerary&#123; /** * @var string */ protected $from; /** * @var string */ protected $to; /** * @var int */ protected $day; /** * @var string */ protected $hotel; /** * @var string */ protected $transport; /** * @param string $name * @param string|int $value */ public function __set($name, $value) &#123; $this-&gt;$name = $value; &#125; /** * @param string $name * @return string|int */ public function __get($name) &#123; return $this-&gt;$name; &#125; /** * @return array */ public function toArray() &#123; $result = get_object_vars($this); foreach ($result as $name =&gt; $value) &#123; if (is_null($value)) &#123; unset($result[$name]); &#125; &#125; return $result; &#125;&#125; 主要都是getter與setter方法。當行程規劃好時，我們會透過toArray() 方法來輸出。 需求二：實作行程建造者 （建造者類別） 定義行程規劃介面 123456789101112131415161718192021&lt;?phpnamespace App\\BuilderPattern\\Vacation\\Contracts;use App\\BuilderPattern\\Vacation\\Itinerary;interface ItineraryPlanable&#123; public function from(string $from): self; public function to(string $to): self; public function spendDays(int $day): self; public function stayAt(string $hotel): self; public function travelBy(string $transport): self; public function getItinerary(): Itinerary;&#125; 實作行程建造者 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;?phpnamespace App\\BuilderPattern\\Vacation;use App\\BuilderPattern\\Vacation\\Itinerary;use App\\BuilderPattern\\Vacation\\Contracts\\ItineraryPlanable;class ItineraryBuilder implements ItineraryPlanable&#123; /** * @var Itinerary */ protected $itinerary; public function __construct() &#123; $this-&gt;itinerary = new Itinerary(); &#125; /** * @param string $from * @return self */ public function from(string $from): self &#123; $this-&gt;itinerary-&gt;from = $from; return $this; &#125; /** * @param string $to * @return self */ public function to(string $to): self &#123; $this-&gt;itinerary-&gt;to = $to; return $this; &#125; /** * @param integer $day * @return self */ public function spendDays(int $day): self &#123; $this-&gt;itinerary-&gt;day = $day; return $this; &#125; /** * @param string $hotel * @return self */ public function stayAt(string $hotel): self &#123; $this-&gt;itinerary-&gt;hotel = $hotel; return $this; &#125; /** * @param string $transport * @return self */ public function travelBy(string $transport): self &#123; $this-&gt;itinerary-&gt;transport = $transport; return $this; &#125; /** * @return Itinerary */ public function getItinerary(): Itinerary &#123; return $this-&gt;itinerary; &#125;&#125; 行程建造者用了流式接口 (Fluent Interface) ，來增加程式碼可讀性。我們待會會在指揮者類別中展示。 （註：此處也可以實作多個不同的行程建造者，來固定某些行程選項） 需求三：實作旅行社（指揮者類別） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;?phpnamespace App\\BuilderPattern\\Vacation;use App\\BuilderPattern\\Vacation\\Contracts\\ItineraryPlanable;class TravelAgency&#123; /** * @var ItineraryPlanable */ protected $itineraryBuilder; public function __construct(ItineraryPlanable $itineraryBuilder) &#123; $this-&gt;itineraryBuilder = $itineraryBuilder; &#125; /** * @return array */ public function getHighSpeedRailItinerary() &#123; $itinerary = $this-&gt;itineraryBuilder -&gt;from(&#x27;Kaohsiung&#x27;) -&gt;to(&#x27;Taipei&#x27;) -&gt;travelBy(&#x27;High Speed Rail&#x27;) -&gt;spendDays(1) -&gt;getItinerary(); return $itinerary-&gt;toArray(); &#125; /** * @return array */ public function getFiveDaysTokyoItinerary() &#123; $itinerary = $this-&gt;itineraryBuilder -&gt;from(&#x27;Kaohsiung&#x27;) -&gt;to(&#x27;Tokyo&#x27;) -&gt;travelBy(&#x27;Airplane&#x27;) -&gt;spendDays(5) -&gt;stayAt(&#x27;Disney Hotel&#x27;) -&gt;getItinerary(); return $itinerary-&gt;toArray(); &#125;&#125; 透過旅行社 （指揮者類別），我們封裝了行程的實作。使得客戶端不用知道行程的建造過程。 最後修改原本的程式碼 1234567891011121314151617181920212223242526272829303132&lt;?phpnamespace App\\BuilderPattern\\Vacation;use App\\BuilderPattern\\Vacation\\TravelAgency;use App\\BuilderPattern\\Vacation\\ItineraryBuilder;class Program&#123; /** * @return array */ public function getDomesticTravel() &#123; //高速鐵路一日體驗 $itineraryBuilder = new ItineraryBuilder(); $travelAgency = new TravelAgency($itineraryBuilder); return $travelAgency-&gt;getHighSpeedRailItinerary(); &#125; /** * @return array */ public function getInternationalTravel() &#123; //東京五日遊 $itineraryBuilder = new ItineraryBuilder(); $travelAgency = new TravelAgency($itineraryBuilder); return $travelAgency-&gt;getFiveDaysTokyoItinerary(); &#125;&#125; [單一職責原則]我們將指揮者類別、建造者類別與產品類別，視為三種不同的職責。由旅行社指揮行程建造者來構建行程。 [開放封閉原則]當新增&#x2F;修改行程時，我們只要調整指揮者類別。當新增&#x2F;修改行程內部的邏輯時，我們僅需修改產品類別。 [依賴反轉原則]指揮者類別依賴於抽象的建造者介面。建造者類別實作抽象的建造者介面。 ʕ •ᴥ•ʔ：核心精神在於分離建造過程與產品本身的邏輯。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"建造者模式","slug":"Builder-Pattern","date":"2020-10-17T07:48:51.000Z","updated":"2025-05-30T08:15:23.216Z","comments":true,"path":"2020/10/17/Builder-Pattern/","permalink":"https://yncbearz.github.io/2020/10/17/Builder-Pattern/","excerpt":"Builder-Pattern","text":"Builder Pattern將複雜對象的構建與其表示分離。Example: 假期規劃 建造者模式會將類別分為三類：分別是指揮者類別 (Director)、建造者類別 (Builder) 與 產品類別 (Product) 。 通常會透過指揮者來決定建造過程。有時侯會省略指揮者，改由客戶端直接決定建造過程。 優點：可以按步驟，一步步地創建出物件。將創建物件的邏輯與物件本身的邏輯分離。 缺點：會使程式碼變得複雜。 與其他模式的比較：[工廠方法模式]：工廠方法模式中，不同分類的產品都有了對應的工廠。每個不同的選擇都是物件層級。 建造者模式中，分離了建造者與產品。每個不同的選擇都是步驟層級。 而建造者模式常常會搭配流式接口 (Fluent Interface) 的寫作風格。流式接口通常依賴於方法鏈 (Method Chaining) 。 藉由每個方法都回傳物件本身，來增加程式的可讀性。 ʕ •ᴥ•ʔ：Laravel 中的 query builder ，用的就是建造者模式的概念。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：三隻小豬 （原型模式）","slug":"Class-Diagram-Three-Little-Pigs-Prototype-Pattern","date":"2020-10-11T14:38:30.000Z","updated":"2025-07-30T11:30:13.272Z","comments":true,"path":"2020/10/11/Class-Diagram-Three-Little-Pigs-Prototype-Pattern/","permalink":"https://yncbearz.github.io/2020/10/11/Class-Diagram-Three-Little-Pigs-Prototype-Pattern/","excerpt":"Class-Diagram-Three-Little-Pigs-Prototype-Pattern","text":"Example: 三隻小豬 123456789101112131415161718192021222324252627@startuml Example-Three-Little-Pigs-Prototype-Patternclass Wall&#123; + material: string + __construct(string material)&#125;class Building&#123; + name: string + wall: Wall + __construct(Wall wall, string name)&#125;class Program&#123; + run()&#125;Building-&gt;WallProgram--&gt;BuildingProgram--&gt;Wall@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：三隻小豬 （原型模式）","slug":"Example-Three-Little-Pigs-Prototype-Pattern","date":"2020-10-11T14:38:14.000Z","updated":"2025-05-30T08:15:23.239Z","comments":true,"path":"2020/10/11/Example-Three-Little-Pigs-Prototype-Pattern/","permalink":"https://yncbearz.github.io/2020/10/11/Example-Three-Little-Pigs-Prototype-Pattern/","excerpt":"Example-Three-Little-Pigs-Prototype-Pattern","text":"Pattern: 原型模式 Class Diagram: 三隻小豬 情境：三隻小豬想要蓋房子 首先是牆壁，可以選擇不同的建材 1234567891011121314151617&lt;?phpnamespace App\\PrototypePattern\\Building;class Wall&#123; /** * @var string */ public $material; public function __construct(string $material) &#123; $this-&gt;material = $material; &#125;&#125; 接著是房子 1234567891011121314151617181920212223242526272829&lt;?phpnamespace App\\PrototypePattern\\Building;use App\\PrototypePattern\\Building\\Wall;class Building&#123; /** * @var string */ public $name; /** * @var Wall */ public $wall; /** * @param Wall $wall * @param string $name */ public function __construct(Wall $wall, string $name = &#x27;unnamed&#x27;) &#123; $this-&gt;wall = $wall; $this-&gt;name = $name; &#125;&#125; 接著豬大哥用 稻草 (straw) ，蓋了間稻草屋 12345678910111213141516171819202122&lt;?phpnamespace App\\PrototypePattern\\Building;use App\\PrototypePattern\\Building\\Building;use App\\PrototypePattern\\Building\\Wall;class Program&#123; /** * @return array */ public function run() &#123; //firstBuilding $strawWall = new Wall(&#x27;straw&#x27;); $firstBuilding = new Building($strawWall, &#x27;oldestPigHouse&#x27;); dump($firstBuilding-&gt;name); // oldestPigHouse dump($firstBuilding-&gt;wall-&gt;material); // straw &#125;&#125; 完成後，豬大哥很得意自己對房子的設計，詢問弟弟們要不要直接拷貝一間。 需求一：拷貝豬大哥的稻草屋 兩個弟弟想了想，拷貝大哥的房子，好像是個省事的方法，但二弟想用木材 (wood)，三弟想用磚塊 (bricks) 來蓋房子。 決定拷貝稻草屋的弟弟們 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?phpnamespace App\\PrototypePattern\\Building;use App\\PrototypePattern\\Building\\Building;use App\\PrototypePattern\\Building\\Wall;class Program&#123; /** * @return array */ public function run() &#123; //firstBuilding $strawWall = new Wall(&#x27;straw&#x27;); $firstBuilding = new Building($strawWall, &#x27;oldestPigHouse&#x27;); //secondBuilding $secondBuilding = clone $firstBuilding; $secondBuilding-&gt;name = &#x27;middlePigHouse&#x27;; $secondBuilding-&gt;wall-&gt;material = &#x27;wood&#x27;; //thirdBuilding $thirdBuilding = clone $firstBuilding; $thirdBuilding-&gt;name = &#x27;youngestPigHouse&#x27;; $thirdBuilding-&gt;wall-&gt;material = &#x27;bricks&#x27;; dump($firstBuilding-&gt;name); // oldestPigHouse dump($firstBuilding-&gt;wall-&gt;material); // bricks dump($secondBuilding-&gt;name); // middlePigHouse dump($secondBuilding-&gt;wall-&gt;material); // bricks dump($thirdBuilding-&gt;name); // youngestPigHouse dump($thirdBuilding-&gt;wall-&gt;material); // bricks return [ &#x27;firstBuilding&#x27; =&gt; $firstBuilding, &#x27;secondBuilding&#x27; =&gt; $secondBuilding, &#x27;thirdBuilding&#x27; =&gt; $thirdBuilding ]; &#125;&#125; 這時發生了件很尷尬的事情，當豬二哥選用木材當建材時，大哥的稻草屋就變成木頭屋了…而豬小弟選用磚塊當建材時，兩個哥哥們的房子就變成磚頭屋了… 導演表示，這樣故事沒辦法進行下去，請我們修改一下。 需求二：讓弟弟們對建材的修改，不會影響到哥哥 修改Building中的clone()方法，讓拷貝時能重新創建牆壁 123456789101112131415161718192021222324252627282930313233&lt;?phpnamespace App\\PrototypePattern\\Building;use App\\PrototypePattern\\Building\\Wall;class Building&#123; /** * @var string */ public $name; /** * @var Wall */ public $wall; /** * @param Wall $wall * @param string $name */ public function __construct(Wall $wall, string $name = &#x27;unnamed&#x27;) &#123; $this-&gt;wall = $wall; $this-&gt;name = $name; &#125; public function __clone() &#123; $this-&gt;wall = clone $this-&gt;wall; &#125;&#125; 不用修改原本的程式碼 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?phpnamespace App\\PrototypePattern\\Building;use App\\PrototypePattern\\Building\\Building;use App\\PrototypePattern\\Building\\Wall;class Program&#123; /** * @return array */ public function run() &#123; //firstBuilding $strawWall = new Wall(&#x27;straw&#x27;); $firstBuilding = new Building($strawWall, &#x27;oldestPigHouse&#x27;); //secondBuilding $secondBuilding = clone $firstBuilding; $secondBuilding-&gt;name = &#x27;middlePigHouse&#x27;; $secondBuilding-&gt;wall-&gt;material = &#x27;wood&#x27;; //thirdBuilding $thirdBuilding = clone $firstBuilding; $thirdBuilding-&gt;name = &#x27;youngestPigHouse&#x27;; $thirdBuilding-&gt;wall-&gt;material = &#x27;bricks&#x27;; dump($firstBuilding-&gt;name); // oldestPigHouse dump($firstBuilding-&gt;wall-&gt;material); // straw dump($secondBuilding-&gt;name); // middlePigHouse dump($secondBuilding-&gt;wall-&gt;material); // wood dump($thirdBuilding-&gt;name); // youngestPigHouse dump($thirdBuilding-&gt;wall-&gt;material); // bricks return [ &#x27;firstBuilding&#x27; =&gt; $firstBuilding, &#x27;secondBuilding&#x27; =&gt; $secondBuilding, &#x27;thirdBuilding&#x27; =&gt; $thirdBuilding ]; &#125;&#125; 後來弟弟們改用其他建材時，就不會影響到原本哥哥的房子了。 這就是淺複製 (Shallow Copy) 與 深複製 (Deep Copy) 的不同。 後來三隻小豬跑去開建設公司，又是另一個故事了。 ʕ •ᴥ•ʔ：一開始clone()方法能直接使用，是因為PHP的魔術方法__clone()唷！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"原型模式","slug":"Prototype-Pattern","date":"2020-10-11T14:37:18.000Z","updated":"2025-05-30T08:15:23.252Z","comments":true,"path":"2020/10/11/Prototype-Pattern/","permalink":"https://yncbearz.github.io/2020/10/11/Prototype-Pattern/","excerpt":"Prototype Pattern","text":"Prototype Pattern當創建實例的過程很昂貴或複雜時，透過拷貝這些原型來建立新的實例。Example: 三隻小豬 原型模式中會將類別分為兩類：分別是原型介面 (Prototype) 及 具體原型類別 (Concrete Prototype) 。 透過原型介面，我們可以知道該實例能拷貝 (clone) ，複製出自己的實例。 其中拷貝又可分為兩種：分別是淺複製 (Shallow Copy) 與 深複製 (Deep Copy) 。 兩者的差別在於，當原型類別的屬性為參考類型 (references) 時，淺複製會指向與實例一樣的位址，不會重新創建屬性。深複製則會重新創建屬性。 這意味著，當使用淺複製時，修改參考類型的屬性會一併修改到原本實例。 優點：可以直接拷貝實例，省去創建的麻煩。也提供了一個不使用繼承 (extend) 來面對複雜實例的方式。 缺點：當架構較為複雜時，深複製可能會不好實作。 與其他模式的比較：[抽象工廠模式]：抽象工廠模式，透過定義產品族的概念，處理複雜的創建。原型模式則是想利用拷貝的概念，來處理複雜的創建。 [單例模式]：單例模式保證同一時間存在一個實例。原型模式則是複製出一個實例。 ʕ •ᴥ•ʔ：在PHP中，由於有魔術方法__clone()的存在，我們可以不定義原型介面，直接使用clone()。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：快取代理（代理模式）","slug":"Class-Diagram-Cache-Proxy-Pattern","date":"2020-10-04T13:21:32.000Z","updated":"2025-07-30T11:30:13.125Z","comments":true,"path":"2020/10/04/Class-Diagram-Cache-Proxy-Pattern/","permalink":"https://yncbearz.github.io/2020/10/04/Class-Diagram-Cache-Proxy-Pattern/","excerpt":"Class-Diagram-Cache-Proxy-Pattern","text":"Example: 快取代理 12345678910111213141516171819202122232425262728293031323334353637@startuml Example-Cache-Proxy-Patterninterface Readable&#123; + read(string keyword): array&#125;class Database&#123; + read(string keyword): array&#125;class CacheProxy&#123; # cached: array # database: Database + __construct() + read(string keyword): array&#125;Readable &lt;|.. CacheProxyReadable &lt;|.. DatabaseCacheProxy -&gt; Databaseclass Program&#123; # proxy: CacheProxy + __construct() + search(string keyword): array&#125;Program -&gt; CacheProxy@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：快取代理（代理模式）","slug":"Example-Cache-Proxy-Pattern","date":"2020-10-04T12:16:55.000Z","updated":"2025-05-30T08:15:23.233Z","comments":true,"path":"2020/10/04/Example-Cache-Proxy-Pattern/","permalink":"https://yncbearz.github.io/2020/10/04/Example-Cache-Proxy-Pattern/","excerpt":"Example-Cache-Proxy-Pattern","text":"Pattern: 代理模式 Class Diagram: 快取代理 情境：以下是某搜尋功能 客戶端程式碼 12345678910111213141516171819202122232425262728&lt;?phpnamespace App\\ProxyPattern\\Cache;use App\\ProxyPattern\\Cache\\Database;class Program&#123; /** * @var Database */ protected $database; public function __construct() &#123; $this-&gt;database = new Database(); &#125; /** * @param string $keyword * @return array */ public function search(string $keyword): array &#123; return $this-&gt;database-&gt;read($keyword); &#125;&#125; 實體資料庫（供存取資料用） 1234567891011121314151617181920&lt;?phpnamespace App\\ProxyPattern\\Cache;class Database&#123; /** * @param string $keyword * @return array */ public function read(string $keyword): array &#123; if ($keyword == &#x27;sushi&#x27;) &#123; return [&#x27;Bear Sushi&#x27;, &#x27;Lin Sushi&#x27;, &#x27;Alysa Sushi&#x27;]; &#125; return []; &#125;&#125; 老闆希望搜尋時，若是已搜尋過的資料，便由快取返回，不再呼叫實體資料庫。 讓我們用代理模式改造它。 需求一：實現快取代理 首先定義讀取介面 123456789101112&lt;?phpnamespace App\\ProxyPattern\\Cache\\Contracts;interface Readable&#123; /** * @param string $keyword * @return array */ public function read(string $keyword): array;&#125; 實體資料庫實現讀取介面 12345678910111213141516171819202122&lt;?phpnamespace App\\ProxyPattern\\Cache;use App\\ProxyPattern\\Cache\\Contracts\\Readable;class Database implements Readable&#123; /** * @param string $keyword * @return array */ public function read(string $keyword): array &#123; if ($keyword == &#x27;sushi&#x27;) &#123; return [&#x27;Bear Sushi&#x27;, &#x27;Lin Sushi&#x27;, &#x27;Alysa Sushi&#x27;]; &#125; return []; &#125;&#125; 實作快取代理 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phpnamespace App\\ProxyPattern\\Cache;use App\\ProxyPattern\\Cache\\Contracts\\Readable;class CacheProxy implements Readable&#123; /** * @var array */ protected $cached = []; /** * @var Database */ protected $database; public function __construct() &#123; $this-&gt;database = new Database(); &#125; /** * @param string $keyword * @return array */ public function read(string $keyword): array &#123; if (isset($this-&gt;cached[$keyword])) &#123; return $this-&gt;cached[$keyword]; &#125; $result = $this-&gt;database-&gt;read($keyword); $this-&gt;cached[$keyword] = $result; return $result; &#125;&#125; 修改客戶端程式碼 12345678910111213141516171819202122232425262728&lt;?phpnamespace App\\ProxyPattern\\Cache;use App\\ProxyPattern\\Cache\\CacheProxy;class Program&#123; /** * @var CacheProxy */ protected $proxy; public function __construct() &#123; $this-&gt;proxy = new CacheProxy(); &#125; /** * @param string $keyword * @return array */ public function search(string $keyword): array &#123; return $this-&gt;proxy-&gt;read($keyword); &#125;&#125; 這下子客戶端搜尋時，若快取代理有資料，便會直接返回結果。 [單一職責原則]我們將實體類別與代理類別視作兩種不同的職責。代理類別主要處理訪問實體類別的行為。 [開放封閉原則]當我們需要實現不屬於實體類別的職責時（例如：關鍵字被搜尋次數），我們可以在代理類別中實現，不須修改實體類別的程式碼。 若有需要其他控制訪問的職責時，也可以新增代理類別。 除了上述的提出介面的委派方法外，也有人用繼承的手法修改行為，但我個人比較不喜歡。 ʕ •ᴥ•ʔ：代理類別就像是實體類別的經紀人一樣。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"代理模式","slug":"Proxy-Pattern","date":"2020-10-04T12:13:02.000Z","updated":"2025-05-30T08:15:23.253Z","comments":true,"path":"2020/10/04/Proxy-Pattern/","permalink":"https://yncbearz.github.io/2020/10/04/Proxy-Pattern/","excerpt":"Proxy Pattern","text":"Proxy Pattern為另一個對象提供一個替身或佔位符以控制這個對象的訪問。Example: 快取代理 代理模式將類別分為兩類：分別是 實體類別 (RealSubject) 與 代理類別 (Proxy) 。 代理類別會與實體類別實現相同的介面，且保存對實體類別的引用。 優點：控制訪問的職責，不必寫在實體類別。有了代理類別，可以 延遲實例化 (lazy initialization) 實體類別。可以有多種控制訪問實體類別的方式。可以在實體類別被訪問時，做一些額外的事（不屬於實體類別的職責）。 缺點：程式碼複雜度提高。回應可能會有所延遲。 與其他模式的比較：[轉接頭模式]：轉接頭模式只負責轉化不同介面間的關係。而代理模式則是實現相同的介面，處理更多訪問相關的職責。 [裝飾者模式]：裝飾者模式豐富既有行為時，原因較常是來自客戶端。而代理模式豐富既有行為時，原因較常是來自服務端。 [外觀模式]：外觀模式的目的是提供簡化接口。而代理模式的目的則是控制訪問行為。 常見的使用場景： 遠端代理：控制訪問遠程對象，利用網路轉發到遠程執行。 虛擬代理：控制訪問創建開銷大的對象，待客戶端有請求時才進行實例化。 安全代理：控制訪問對象的許可權。 智慧代理：處理訪問對象時，不屬於訪問對象的職責。 ʕ •ᴥ•ʔ：當想控制訪問對象時，很可能就是使用代理模式的時機。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：歌曲排行（迭代器模式）","slug":"Class-Diagram-Top-Song-Iterator-Pattern","date":"2020-09-28T04:22:49.000Z","updated":"2025-07-30T11:30:13.280Z","comments":true,"path":"2020/09/28/Class-Diagram-Top-Song-Iterator-Pattern/","permalink":"https://yncbearz.github.io/2020/09/28/Class-Diagram-Top-Song-Iterator-Pattern/","excerpt":"Class-Diagram-Top-Song-Iterator-Pattern","text":"Example: 歌曲排行 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374@startuml Example-Top-Song-Iterator-Patterninterface Traversable&#123;&#125;interface Iterator&#123; + current(): mixed + key(): scalar + next() + rewind() + valid(): bool&#125;interface IteratorAggregate&#123; + getIterator(): Traversable&#125;Traversable &lt;|-- IteratorTraversable &lt;|-- IteratorAggregateclass Song&#123; # name: string # singer: string # releaseDate: DateTime + __construct(array data) + getName(): string + getSinger(): string + getReleaseDate(): DateTime&#125;class SongCollection&#123; # dataOfSongs: array # items: Song[] + __construct(array dataOfSongs) - generateSongs(array dataOfSongs): Song[] + getItems(): Song[] + reverse(): static&#125;IteratorAggregate &lt;|.. SongCollectionSong -o SongCollectionclass SongIterator&#123; # collection: SongCollection # position: int + __construct(SongCollection songCollection)&#125;Iterator &lt;|.. SongIteratorSongCollection &lt;- SongIteratorclass Program&#123; # songCollection: SongCollection + __construct(array song) + list(): array + listReverse(): array&#125;SongCollection &lt;-- Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：歌曲排行（迭代器模式）","slug":"Example-Top-Song-Iterator-Pattern","date":"2020-09-27T14:54:35.000Z","updated":"2025-05-30T08:15:23.239Z","comments":true,"path":"2020/09/27/Example-Top-Song-Iterator-Pattern/","permalink":"https://yncbearz.github.io/2020/09/27/Example-Top-Song-Iterator-Pattern/","excerpt":"Example-Top-Song-Iterator-Pattern","text":"Pattern: 迭代器模式 Class Diagram: 歌曲排行 需求一：KTV系統要按照新增到系統的時間，由舊到新，實作歌曲排行 定義系統存取歌曲的類別（解析傳進來的data） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?phpnamespace App\\IteratorPattern\\TopSong;use DateTime;class Song&#123; /** * @var string */ protected $name; /** * @var string */ protected $singer; /** * @var DateTime */ protected $releaseDate; public function __construct(array $data) &#123; $this-&gt;name = $data[&#x27;name&#x27;]; $this-&gt;singer = $data[&#x27;singer&#x27;]; $this-&gt;releaseDate = new DateTime($data[&#x27;releaseDate&#x27;]); &#125; /** * @return string */ public function getName() &#123; return $this-&gt;name; &#125; /** * @return string */ public function getSinger() &#123; return $this-&gt;singer; &#125; /** * @return DateTime */ public function getReleaseDate() &#123; return $this-&gt;releaseDate; &#125;&#125; 定義歌曲集合 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?phpnamespace App\\IteratorPattern\\TopSong;class SongCollection&#123; /** * @var Song[] */ protected $items = []; public function __construct(array $originalSongs) &#123; $this-&gt;items = $this-&gt;generateSongs($originalSongs); &#125; /** * @param array $originalSongs * @return Song[] */ private function generateSongs($originalSongs) &#123; $result = []; foreach ($originalSongs as $originalSong) &#123; $result[] = new Song($originalSong); &#125; return $result; &#125; /** * @return Song[] */ public function getItems() &#123; return $this-&gt;items; &#125; /** * @return array */ public function list() &#123; foreach ($this-&gt;items as $item) &#123; $result[] = $item-&gt;getName(); &#125; return $result; &#125;&#125; SongCollection就是迭代器模式中的 集合類別 (Aggregate &#x2F; Collection) 。不過我們目前還沒實作PHP的IteratorAggregate介面。 而generateSongs()的目的，是為了將不同來源的歌曲資訊，轉換成系統認識的Song類別。 目前遍歷的程式碼 123456789101112131415161718192021222324&lt;?phpnamespace App\\IteratorPattern\\TopSong;use App\\IteratorPattern\\TopSong\\SongCollection;class Program&#123; /** * @var SongCollection */ protected $songCollection; public function __construct(array $songs) &#123; $this-&gt;songCollection = new SongCollection($songs); &#125; public function list() &#123; return $this-&gt;songCollection-&gt;list(); &#125;&#125; 目前的list()方法，很單純只用到foreach而已。接著用迭代器模式改寫它。 首先實作迭代器 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&lt;?phpnamespace App\\IteratorPattern\\TopSong;use App\\IteratorPattern\\TopSong\\SongCollection;use Iterator;class SongIterator implements Iterator&#123; /** * @var SongCollection */ protected $collection; /** * @var int */ private $position = 0; public function __construct(SongCollection $collection) &#123; $this-&gt;collection = $collection; &#125; /** * Return the current element * * @return Song */ public function current() &#123; return $this-&gt;collection-&gt;getItems()[$this-&gt;position]; &#125; /** * Return the key of the current element * * @return int */ public function key() &#123; return $this-&gt;position; &#125; /** * Move forward to next element * * @return void */ public function next() &#123; $this-&gt;position++; &#125; /** * Rewind the Iterator to the first element * * @return int */ public function rewind() &#123; $this-&gt;position = 0; &#125; /** * Checks if current position is valid * * @return void */ public function valid() &#123; return isset($this-&gt;collection-&gt;getItems()[$this-&gt;position]); &#125;&#125; SongIterator就是迭代器模式中的 迭代器類別 (Iterator) 。我們實作了PHP的Iterator介面。 必須實作current, key, next, rewind, valid方法，其目的都有寫在PHPDoc中。而我們在建構式中將剛剛的SongCollection注入。 改寫SongCollection 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?phpnamespace App\\IteratorPattern\\TopSong;use IteratorAggregate;use Traversable;class SongCollection implements IteratorAggregate&#123; /** * @var Song[] */ protected $items = []; public function __construct(array $dataOfSongs) &#123; $this-&gt;items = $this-&gt;generateSongs($dataOfSongs); &#125; /** * @param array $dataOfSongs * @return Song[] */ private function generateSongs($dataOfSongs) &#123; foreach ($dataOfSongs as $dataOfSong) &#123; $result[] = new Song($dataOfSong); &#125; return $result; &#125; /** * @return Song[] */ public function getItems() &#123; return $this-&gt;items; &#125; public function getIterator(): Traversable &#123; return new SongIterator($this); &#125;&#125; 我們實作了PHP的IteratorAggregate介面。 getIterator()方法會將當前的SongCollection注入，並回傳SongIterator。 最後改寫遍歷的程式碼 1234567891011121314151617181920212223242526272829&lt;?phpnamespace App\\IteratorPattern\\TopSong;use App\\IteratorPattern\\TopSong\\SongCollection;class Program&#123; /** * @var SongCollection */ protected $songCollection; public function __construct(array $songs) &#123; $this-&gt;songCollection = new SongCollection($songs); &#125; public function list() &#123; $iterator = $this-&gt;songCollection-&gt;getIterator(); foreach ($iterator as $item) &#123; $result[] = $item-&gt;getName(); &#125; return $result; &#125;&#125; 需求二：按照新增到系統的時間，由新到舊，實作歌曲排行 修改SongCollection，新增reverse()方法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;?phpnamespace App\\IteratorPattern\\TopSong;use IteratorAggregate;use Traversable;class SongCollection implements IteratorAggregate&#123; /** * @var array */ protected $dataOfSongs; /** * @var Song[] */ protected $items = []; public function __construct(array $dataOfSongs) &#123; $this-&gt;dataOfSongs = $dataOfSongs; $this-&gt;items = $this-&gt;generateSongs($dataOfSongs); &#125; /** * @param array $dataOfSongs * @return Song[] */ private function generateSongs($dataOfSongs) &#123; foreach ($dataOfSongs as $dataOfSong) &#123; $result[] = new Song($dataOfSong); &#125; return $result; &#125; /** * @return Song[] */ public function getItems() &#123; return $this-&gt;items; &#125; public function getIterator(): Traversable &#123; return new SongIterator($this); &#125; /** * @return static */ public function reverse() &#123; return new static(array_reverse($this-&gt;dataOfSongs)); &#125;&#125; 這邊的reverse()方法，會將原始資料倒序後，回傳一個新的SongCollection。 修改遍歷的程式碼，新增listReverse()方法 123456789101112131415161718192021222324252627282930313233343536373839&lt;?phpnamespace App\\IteratorPattern\\TopSong;use App\\IteratorPattern\\TopSong\\SongCollection;class Program&#123; /** * @var SongCollection */ protected $songCollection; public function __construct(array $songs) &#123; $this-&gt;songCollection = new SongCollection($songs); &#125; public function list() &#123; $iterator = $this-&gt;songCollection-&gt;getIterator(); foreach ($iterator as $item) &#123; $result[] = $item-&gt;getName(); &#125; return $result; &#125; public function listReverse() &#123; $iterator = $this-&gt;songCollection-&gt;reverse()-&gt;getIterator(); foreach ($iterator as $item) &#123; $result[] = $item-&gt;getName(); &#125; return $result; &#125;&#125; [單一職責原則]將集合元素 (Song) 、 集合類別 (SongCollection) 及 迭代器 (SongIterator) 的職責分離。 [開放封閉原則]無論是修改集合元素，或是迭代順序，我們都不會改到所有的程式碼。 [介面隔離原則]定義出集合類別介面與迭代器介面，讓兩者不會互相影響。 [依賴反轉原則]透過集合類別介面與迭代器介面，確保有取得迭代器及foreach()的能力。 ʕ •ᴥ•ʔ：一個讓我枯坐在翰林茶館兩個小時的模式（汗）。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"迭代器模式","slug":"Iterator-Pattern","date":"2020-09-27T10:07:17.000Z","updated":"2025-05-30T08:15:23.246Z","comments":true,"path":"2020/09/27/Iterator-Pattern/","permalink":"https://yncbearz.github.io/2020/09/27/Iterator-Pattern/","excerpt":"Iterator-Pattern","text":"Iterator Pattern提供一種方法順序訪問一個聚合對象中的各個元素，而又不暴露其內部的表示。Example: 歌曲排行 迭代器模式會將類別分為兩類：分別是集合類別 (Aggregate &#x2F; Collection) 及 迭代器類別 (Iterator) 。 集合類別負責提供統一介面，供所有集合元素使用，使客戶與集合元素的實現解耦。 迭代器類別則負責提供在集合元素中遊走的方法。 舉例：集合元素 -&gt; 集合類別歌曲 -&gt; 歌單菜式 -&gt; 菜單書本 -&gt; 書單 優點：分離了集合物件的遍歷行為，可以在不暴露集合內部的情況下，供外部存取。新增&#x2F;修改遍歷規則時，不會影響到集合元素。 缺點：若只是簡單的遍歷，可能會是一種過度設計。 其實此模式的實現，現在大都已被封裝，只要實現對應的介面就好了。 以PHP而言，主要有以下幾個介面與迭代器模式有關。 介面名稱 用途 Traversable 所有迭代器介面的源頭，主要用來判斷能不能用foreach遍歷。 IteratorAggregate 集合類別的介面，主要用來提供迭代器，需與Iterator介面一起實作。 Iterator 迭代器的介面，定義了遍歷時會用到的方法，需與IteratorAggregate介面一起實作。 其他SPL (Standard PHP Library) 的Iterator。 ʕ •ᴥ•ʔ：讓我們一起欣賞這個古老的模式！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：電力系統（依賴反轉原則）","slug":"Example-Power-Systems-Dependency-Inversion-Principle","date":"2020-09-21T02:48:11.000Z","updated":"2025-07-30T11:30:13.378Z","comments":true,"path":"2020/09/21/Example-Power-Systems-Dependency-Inversion-Principle/","permalink":"https://yncbearz.github.io/2020/09/21/Example-Power-Systems-Dependency-Inversion-Principle/","excerpt":"Example-Power-Systems-Dependency-Inversion-Principle","text":"Principle: 依賴反轉原則 情境：目前電力系統採用火力發電 火力發電 123456789101112&lt;?phpnamespace App\\SOLID\\DIP\\PowerSystems;class ThermalPower&#123; public function generatePower() &#123; return &#x27;電力&#x27;; &#125;&#125; 電力系統 123456789101112131415&lt;?phpnamespace App\\SOLID\\DIP\\PowerSystems;use App\\SOLID\\DIP\\PowerSystems\\ThermalPower;class Program&#123; public function getPower() &#123; $thermalPower = new ThermalPower(); return $thermalPower-&gt;generatePower(); &#125;&#125; 隨著科技發展，現在我們想要改成用風力發電來取代火力發電，卻發現原本的程式，強耦合在ThermalPower。（依賴了具體的類別） 我們決定定義一個抽象的介面，讓程式依賴在介面，並由各個發電方式實作介面。改變彼此的依賴關係。 需求一：定義抽象介面，改變電力系統與火力發電的依賴關係 首先定義發電介面 123456789&lt;?phpnamespace App\\SOLID\\DIP\\PowerSystems\\Contracts;interface PowerGeneratable&#123; public function generatePower();&#125; 接著讓火力發電實作發電介面 1234567891011121314&lt;?phpnamespace App\\SOLID\\DIP\\PowerSystems;use App\\SOLID\\DIP\\PowerSystems\\Contracts\\PowerGeneratable;class ThermalPower implements PowerGeneratable&#123; public function generatePower() &#123; return &#x27;電力&#x27;; &#125;&#125; 最後改寫原本的電力系統 1234567891011121314&lt;?phpnamespace App\\SOLID\\DIP\\PowerSystems;use App\\SOLID\\DIP\\PowerSystems\\Contracts\\PowerGeneratable;class Program&#123; public function getPower(PowerGeneratable $powerGeneration) &#123; return $powerGeneration-&gt;generatePower(); &#125;&#125; （註：現在要用什麼樣的發電方式，會交由客戶端決定） 客戶端使用火力發電（提供測試程式碼，供參考） 1234567891011121314151617181920212223242526272829&lt;?phpnamespace Tests\\Feature\\SOLID\\DIP\\PowerSystems;use PHPUnit\\Framework\\TestCase;use App\\SOLID\\DIP\\PowerSystems\\Program;use App\\SOLID\\DIP\\PowerSystems\\ThermalPower;class ProgramTest extends TestCase&#123; /** * @var Program */ protected $sut; protected function setUp(): void &#123; $this-&gt;sut = new Program(); &#125; public function testGetPowerByThermalPower() &#123; $expected = &#x27;電力&#x27;; $powerGeneration = new ThermalPower(); $actual = $this-&gt;sut-&gt;getPower($powerGeneration); $this-&gt;assertEquals($expected, $actual); &#125;&#125; 需求二：新增風力發電 實作風力發電 1234567891011121314&lt;?phpnamespace App\\SOLID\\DIP\\PowerSystems;use App\\SOLID\\DIP\\PowerSystems\\Contracts\\PowerGeneratable;class WindPower implements PowerGeneratable&#123; public function generatePower() &#123; return &#x27;電力&#x27;; &#125;&#125; 客戶端使用風力發電（提供測試程式碼，供參考） 1234567891011121314151617181920212223242526272829303132333435363738&lt;?phpnamespace Tests\\Feature\\SOLID\\DIP\\PowerSystems;use PHPUnit\\Framework\\TestCase;use App\\SOLID\\DIP\\PowerSystems\\Program;use App\\SOLID\\DIP\\PowerSystems\\ThermalPower;use App\\SOLID\\DIP\\PowerSystems\\WindPower;class ProgramTest extends TestCase&#123; /** * @var Program */ protected $sut; protected function setUp(): void &#123; $this-&gt;sut = new Program(); &#125; public function testGetPowerByThermalPower() &#123; $expected = &#x27;電力&#x27;; $powerGeneration = new ThermalPower(); $actual = $this-&gt;sut-&gt;getPower($powerGeneration); $this-&gt;assertEquals($expected, $actual); &#125; public function testGetPowerByWindPower() &#123; $expected = &#x27;電力&#x27;; $powerGeneration = new WindPower(); $actual = $this-&gt;sut-&gt;getPower($powerGeneration); $this-&gt;assertEquals($expected, $actual); &#125;&#125; 最後附上類別圖比較： 依賴具體的火力發電 123456789101112131415@startumlclass ThermalPower&#123; + generatePower()&#125;class Program&#123; + getPower()&#125;Program --&gt; ThermalPower@enduml 依賴抽象的發電介面，並由各個發現方式實作介面（可以觀察火力發電與風力發電的依賴方向，是不是反轉了呢） 123456789101112131415161718192021222324252627@startumlinterface PowerGeneratable&#123; + generatePower()&#125;class ThermalPower&#123; + generatePower()&#125;class WindPower&#123; + generatePower()&#125;class Program&#123; + getPower(PowerGenertable powerGeneratable)&#125;Program --&gt; PowerGeneratablePowerGeneratable &lt;|-- ThermalPowerPowerGeneratable &lt;|-- WindPower@enduml ʕ •ᴥ•ʔ：透過遵守依賴反轉原則，我們也讓程式符合開放封閉原則。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"範例：咖啡機（介面隔離原則）","slug":"Example-Coffee-Machine-Interface-Segregation-Principle","date":"2020-09-19T15:42:00.000Z","updated":"2025-05-30T08:15:23.234Z","comments":true,"path":"2020/09/19/Example-Coffee-Machine-Interface-Segregation-Principle/","permalink":"https://yncbearz.github.io/2020/09/19/Example-Coffee-Machine-Interface-Segregation-Principle/","excerpt":"Example-Coffee-Machine-Interface-Segregation-Principle","text":"Principle: 介面隔離原則 情境：目前我們有一台全自動咖啡機 首先定義全自動咖啡機介面 1234567891011&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine\\Contracts;interface AutomaticCoffeeMachineInterface&#123; public function grind($coffeeBeans); public function brew($coffeePowder);&#125; 接著是全自動咖啡機 12345678910111213141516171819202122&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine;use App\\SOLID\\ISP\\CoffeeMachine\\Contracts\\AutomaticCoffeeMachineInterface;class AutomaticCoffeeMachine implements AutomaticCoffeeMachineInterface&#123; public function grind($coffeeBeans) &#123; if ($coffeeBeans == &#x27;咖啡豆&#x27;) &#123; return &#x27;咖啡粉&#x27;; &#125; &#125; public function brew($coffeePowder) &#123; if ($coffeePowder == &#x27;咖啡粉&#x27;) &#123; return &#x27;咖啡&#x27;; &#125; &#125;&#125; 最後是目前的沖煮方式 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine;class Program&#123; protected $coffeeGrinder; protected $coffeeMaker; public function getCoffeeByAutomaticCoffeeMachine($coffeeBeans) &#123; $automaticCoffeeMachine = new AutomaticCoffeeMachine(); $this-&gt;coffeeGrinder = $automaticCoffeeMachine; $this-&gt;coffeeMaker = $automaticCoffeeMachine; return $this-&gt;getCoffee($coffeeBeans); &#125; private function grind($coffeeBeans) &#123; return $this-&gt;coffeeGrinder-&gt;grind($coffeeBeans); &#125; private function brew($coffeePowder) &#123; return $this-&gt;coffeeMaker-&gt;brew($coffeePowder); &#125; private function getCoffee($coffeeBeans) &#123; $coffeePowder = $this-&gt;grind($coffeeBeans); $coffee = $this-&gt;brew($coffeePowder); return $coffee; &#125;&#125; 然而，隨著對咖啡興趣增加，我們想來玩玩摩卡壺。卻發現摩卡壺不會磨粉… 需求一：將全自動咖啡機介面職責分離，拆分出磨粉介面與沖煮介面 首先定義磨粉介面 123456789&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine\\Contracts;interface CoffeeGrinder&#123; public function grind($coffeeBeans);&#125; 接著定義沖煮介面 123456789&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine\\Contracts;interface CoffeeMaker&#123; public function brew($coffeePowder);&#125; 最後修改原本的全自動咖啡機，讓它實作新的兩個介面 123456789101112131415161718192021222324&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine;use App\\SOLID\\ISP\\CoffeeMachine\\Contracts\\CoffeeGrinder;use App\\SOLID\\ISP\\CoffeeMachine\\Contracts\\CoffeeMaker;class AutomaticCoffeeMachine implements CoffeeGrinder, CoffeeMaker&#123; public function grind($coffeeBeans) &#123; if ($coffeeBeans == &#x27;咖啡豆&#x27;) &#123; return &#x27;咖啡粉&#x27;; &#125; &#125; public function brew($coffeePowder) &#123; if ($coffeePowder == &#x27;咖啡粉&#x27;) &#123; return &#x27;咖啡&#x27;; &#125; &#125;&#125; 需求二：實作磨豆機與摩卡壺 實作磨豆機（因為拆分出沖煮介面，它不需要知道如何沖煮） 12345678910111213141516&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine;use App\\SOLID\\ISP\\CoffeeMachine\\Contracts\\CoffeeGrinder;class NormalCoffeeGrinder implements CoffeeGrinder&#123; public function grind($coffeeBeans) &#123; if ($coffeeBeans == &#x27;咖啡豆&#x27;) &#123; return &#x27;咖啡粉&#x27;; &#125; &#125;&#125; 實作摩卡壺（因為拆分出磨豆介面，它不需要知道如何磨豆） 12345678910111213141516&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine;use App\\SOLID\\ISP\\CoffeeMachine\\Contracts\\CoffeeMaker;class Mocalpot implements CoffeeMaker&#123; public function brew($coffeePowder) &#123; if ($coffeePowder == &#x27;咖啡粉&#x27;) &#123; return &#x27;咖啡&#x27;; &#125; &#125;&#125; 最後新增煮咖啡的方法，用磨豆機與摩卡壺的組合 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?phpnamespace App\\SOLID\\ISP\\CoffeeMachine;use App\\SOLID\\ISP\\CoffeeMachine\\Contracts\\CoffeeGrinder;use App\\SOLID\\ISP\\CoffeeMachine\\Contracts\\CoffeeMaker;use App\\SOLID\\ISP\\CoffeeMachine\\NormalCoffeeGrinder;use App\\SOLID\\ISP\\CoffeeMachine\\MocalPot;class Program&#123; /** * @var CoffeeGrinder */ protected $coffeeGrinder; /** * @var CoffeeMaker */ protected $coffeeMaker; public function getCoffeeByAutomaticCoffeeMachine($coffeeBeans) &#123; $automaticCoffeeMachine = new AutomaticCoffeeMachine(); $this-&gt;setCoffeeGrinder($automaticCoffeeMachine); $this-&gt;setCoffeeMaker($automaticCoffeeMachine); return $this-&gt;getCoffee($coffeeBeans); &#125; public function getCoffeeByNormalCoffeeGrinderAndMocalPot($coffeeBeans) &#123; $normalCoffeeGrinder = new NormalCoffeeGrinder(); $mocalPot = new MocalPot(); $this-&gt;setCoffeeGrinder($normalCoffeeGrinder); $this-&gt;setCoffeeMaker($mocalPot); return $this-&gt;getCoffee($coffeeBeans); &#125; private function grind($coffeeBeans) &#123; return $this-&gt;coffeeGrinder-&gt;grind($coffeeBeans); &#125; private function brew($coffeePowder) &#123; return $this-&gt;coffeeMaker-&gt;brew($coffeePowder); &#125; private function getCoffee($coffeeBeans) &#123; $coffeePowder = $this-&gt;grind($coffeeBeans); $coffee = $this-&gt;brew($coffeePowder); return $coffee; &#125; private function setCoffeeGrinder(CoffeeGrinder $coffeeGrinder) &#123; $this-&gt;coffeeGrinder = $coffeeGrinder; &#125; private function setCoffeeMaker(CoffeeMaker $coffeeMaker) &#123; $this-&gt;coffeeMaker = $coffeeMaker; &#125;&#125; ʕ •ᴥ•ʔ：運用介面隔離原則拆分介面職責，我們就可以玩更多花樣的咖啡沖煮方法了。 而煮咖啡方法也不必因為器具更換而修改。符合開放封閉原則。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"範例：老爸餐廳（裡氏替換原則）","slug":"Example-Dad-Restaurant-Liskov-Substitution-Principle","date":"2020-09-19T06:23:08.000Z","updated":"2025-05-30T08:15:23.235Z","comments":true,"path":"2020/09/19/Example-Dad-Restaurant-Liskov-Substitution-Principle/","permalink":"https://yncbearz.github.io/2020/09/19/Example-Dad-Restaurant-Liskov-Substitution-Principle/","excerpt":"Example-Dad-Restaurant-Liskov-Substitution-Principle","text":"Principle: 裡氏替換原則 情境：老爸開了一間速食餐廳 首先定義餐廳的產出：餐點介面 123456789&lt;?phpnamespace App\\SOLID\\LSP\\Restaurant\\Contracts;interface Eatable&#123; public function beEaten();&#125; 接著供應的餐點類型：漢堡、炸雞、雞塊，它們都必須實作餐點介面 1234567891011121314&lt;?phpnamespace App\\SOLID\\LSP\\Restaurant\\Food;use App\\SOLID\\LSP\\Restaurant\\Contracts\\Eatable;class Burger implements Eatable&#123; public function beEaten() &#123; return &#x27;招牌漢堡被吃了&#x27;; &#125;&#125; 1234567891011121314&lt;?phpnamespace App\\SOLID\\LSP\\Restaurant\\Food;use App\\SOLID\\LSP\\Restaurant\\Contracts\\Eatable;class FriedChicken implements Eatable&#123; public function beEaten() &#123; return &#x27;招牌炸雞被吃了&#x27;; &#125;&#125; 1234567891011121314&lt;?phpnamespace App\\SOLID\\LSP\\Restaurant\\Food;use App\\SOLID\\LSP\\Restaurant\\Contracts\\Eatable;class ChickenNuggets implements Eatable&#123; public function beEaten() &#123; return &#x27;招牌雞塊被吃了&#x27;; &#125;&#125; 最後是老爸的餐廳 123456789101112131415161718192021222324252627282930313233343536&lt;?phpnamespace App\\SOLID\\LSP\\Restaurant;use App\\SOLID\\LSP\\Restaurant\\Contracts\\Eatable;use App\\SOLID\\LSP\\Restaurant\\Food\\Burger;use Exception;use App\\SOLID\\LSP\\Restaurant\\Food\\ChickenNuggets;use App\\SOLID\\LSP\\Restaurant\\Food\\FriedChicken;class DadRestaurant&#123; public function getFood($money): Eatable &#123; if (!is_int($money)) &#123; throw new Exception(&#x27;我們只收現金&#x27;); &#125; $randomNumber = rand(1, 3); switch ($randomNumber) &#123; case 1: return new Burger(); break; case 2: return new FriedChicken(); break; case 3: return new ChickenNuggets(); break; &#125; &#125;&#125; 這邊可以發現，老爸餐廳的出餐是很隨意的，客人用現金，可以換取餐點。 但餐點可能是漢堡、炸雞或是雞塊其中之一。 時光匆匆，過了幾年，兒子決定繼承老爸餐廳 現在有些客人會使用信用卡等其他的付款方式。也不希望餐廳餐點總是如此隨意，無法預料。 新開的餐廳決定只供應漢堡這種餐點，並提供其他付款方式。（即對Input型態更寬鬆，而Output型態更嚴謹） 兒子新開的餐廳 12345678910111213141516&lt;?phpnamespace App\\SOLID\\LSP\\Restaurant;use App\\SOLID\\LSP\\Restaurant\\DadRestaurant;use App\\SOLID\\LSP\\Restaurant\\Food\\Burger;use App\\SOLID\\LSP\\Restaurant\\Contracts\\Eatable;class SonRestaurant extends DadRestaurant&#123; public function getFood($goldFlow): Eatable &#123; return new Burger(); &#125;&#125; 測試客人消費的情況 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;?phpnamespace Tests\\Unit\\SOLID\\LSP;use PHPUnit\\Framework\\TestCase;use App\\SOLID\\LSP\\Restaurant\\Program;use App\\SOLID\\LSP\\Restaurant\\Contracts\\Eatable;class ProgramTest extends TestCase&#123; /** * @var Program */ protected $sut; public function setUp(): void &#123; $this-&gt;sut = new Program(); &#125; public function testUseMoneyInDadRestaurant() &#123; $expected = Eatable::class; $money = 100; $actual = $this-&gt;sut-&gt;getFoodInDadRestaurant($money); $this-&gt;assertInstanceOf($expected, $actual); &#125; public function testUseCardInDadRestaurant() &#123; $card = &#x27;信用卡&#x27;; $this-&gt;expectExceptionMessage(&#x27;我們只收現金&#x27;); $this-&gt;sut-&gt;getFoodInDadRestaurant($card); &#125; public function testUseMoneyInSonRestaurant() &#123; $expected = Eatable::class; $money = 100; $actual = $this-&gt;sut-&gt;getFoodInSonRestaurant($money); $this-&gt;assertInstanceOf($expected, $actual); &#125; public function testUseCardInSonRestaurant() &#123; $expected = Eatable::class; $card = &#x27;信用卡&#x27;; $actual = $this-&gt;sut-&gt;getFoodInSonRestaurant($card); $this-&gt;assertInstanceOf($expected, $actual); &#125;&#125; 透過測試，我們可以發現： 顧客類型 付款方式 老爸的餐廳 兒子的餐廳 老顧客 現金 可以換取餐點 可以換取餐點 （但只有漢堡） 新顧客 信用卡 無法換取餐點 可以換取餐點 符合了裡氏替換原則的精神。 ʕ •ᴥ•ʔ：這是一個簡易的範例，細節部分請大家多多包涵。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"類別圖：Line群組通知（觀察者模式）","slug":"Class-Diagram-Line-Group-Observer-Pattern","date":"2020-09-16T16:25:37.000Z","updated":"2025-07-30T11:30:13.176Z","comments":true,"path":"2020/09/17/Class-Diagram-Line-Group-Observer-Pattern/","permalink":"https://yncbearz.github.io/2020/09/17/Class-Diagram-Line-Group-Observer-Pattern/","excerpt":"Class-Diagram-Line-Group-Observer-Pattern","text":"Example: Line群組通知 1234567891011121314151617181920212223242526272829303132@startuml Example-Line-Group-Observer-Patternabstract class Observer&#123; &#123;abstract&#125; + update()&#125;abstract class Subject&#123; + attachObserver(Observer observer) + detachObserver(Observer observer) + notifyObservers()&#125;Observer &lt;- Subjectclass User&#123; + __construct(string name)&#125;Observer &lt;|-- Userclass Program&#123; # state:string + run()&#125;Subject &lt;|-- Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：Line群組通知（觀察者模式）","slug":"Example-Line-Group-Observer-Pattern","date":"2020-09-16T13:14:10.000Z","updated":"2025-05-30T08:15:23.235Z","comments":true,"path":"2020/09/16/Example-Line-Group-Observer-Pattern/","permalink":"https://yncbearz.github.io/2020/09/16/Example-Line-Group-Observer-Pattern/","excerpt":"Example-Line-Group-Observer-Pattern","text":"Pattern: 觀察者模式 Class Diagram: Line群組通知 情境：讓我們用Line群組，來實作觀察者模式 首先實作抽象的觀察者類別 (Observer) 其中會有接收到主題類別通知時的更新方法 （具體實作內容由子類決定）。 12345678&lt;?phpnamespace App\\ObserverPattern\\LineGroup;abstract class Observer&#123; abstract public function update();&#125; 接著實作抽象的主題類別 (Subject) 它會有新增觀察者、移除觀察者、通知觀察者的方法。 1234567891011121314151617181920212223242526272829303132333435&lt;?phpnamespace App\\ObserverPattern\\LineGroup;use App\\ObserverPattern\\LineGroup\\Observer;abstract class Subject&#123; /** * @var array */ protected $observers = []; public function attachObserver(Observer $observer) &#123; $this-&gt;observers[] = $observer; &#125; public function detachObserver(Observer $observer) &#123; $index = array_search($observer, $this-&gt;observers); if ($index &gt;= 0) &#123; unset($this-&gt;observers[$index]); &#125; &#125; public function notifyObservers() &#123; foreach ($this-&gt;observers as $observer) &#123; $observer-&gt;update(); &#125; &#125;&#125; 利用剛剛建立的觀察者類別，實作使用者 12345678910111213141516171819202122&lt;?phpnamespace App\\ObserverPattern\\LineGroup;use App\\ObserverPattern\\LineGroup\\Observer;class User extends Observer&#123; protected $name; public function __construct($name) &#123; $this-&gt;name = $name; &#125; public function update() &#123; //使用者手機跳出通知 //使用者電腦跳出通知 &#125;&#125; 實作群組聊天室，並模擬使用情況 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?phpnamespace App\\ObserverPattern\\LineGroup;use App\\ObserverPattern\\LineGroup\\Subject;use App\\ObserverPattern\\LineGroup\\User;class Program extends Subject&#123; protected $state = &#x27;nothing new&#x27;; public function run() &#123; //Bear加入群組 $bear = new User(&#x27;Bear&#x27;); $this-&gt;attachObserver($bear); //通知群組 $this-&gt;notifyObservers(); //Jane加入群組 $jane = new User(&#x27;Jane&#x27;); $this-&gt;attachObserver($jane); //通知群組 $this-&gt;notifyObservers(); //有新訊息，通知群組 $this-&gt;state = &#x27;new message&#x27;; $this-&gt;notifyObservers(); $this-&gt;state = &#x27;nothing new&#x27;; //Jane離開群組 $this-&gt;detachObserver($jane); //通知群組 $this-&gt;notifyObservers(); &#125;&#125; [單一職責原則]我們將主題類別 (Subject) 與 觀察者類別 (Observer) 視作兩種不同的職責。目前範例尚未將聊天室的職責與通知的職責分離。 [開放封閉原則]當新增新的主題類別時，我們可以輕易地新增、移除、通知對應觀察者。亦可以新增新的觀察者類別，再將其加入既有的主題類別。 [裡氏替換原則]透過子類來定義觀察者類別中更新方法具體的實作。目前範例的缺點是，觀察者類別不好對更新方法取更適合的命名。 [依賴反轉原則]抽象主題類別依賴於抽象的觀察者類別。使用者類別實作抽象的觀察者類別。 主題類別不必知道具體觀察者想做什麼，僅需知道觀察者類別有接口可以通知更新。 ʕ •ᴥ•ʔ：架構容易，細節仍需琢磨的模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"觀察者模式","slug":"Observer-Pattern","date":"2020-09-13T14:43:12.000Z","updated":"2025-05-30T08:15:23.251Z","comments":true,"path":"2020/09/13/Observer-Pattern/","permalink":"https://yncbearz.github.io/2020/09/13/Observer-Pattern/","excerpt":"Observer-Pattern","text":"Observer Pattern在對象之間定義一對多的依賴。當一個對象改變狀態，依賴它的對象都會收到通知，並自動更新。亦被稱作發佈&#x2F;訂閱模式 (Publish&#x2F;Subscribe Pattern)。Example: Line群組通知 觀察者模式會將類別分為兩類：分別是主題類別 (Subject) 與 觀察者類別 (Observer) 。 透過增加&#x2F;移除名單中的觀察者，來控制主題類別改變時，要通知的對象有哪些。 優點：透過定義好的主題介面與觀察者介面，將主題類別與觀察者類別的關係解耦。 即主題類別不需要知道真正的觀察者是誰，而觀察者類別也不需要知道到底是誰通知它的。 缺點：會使程式碼變得複雜。觀察者類別中的方法名稱必須一致（可以用事件委託技術修正）若觀察者訂閱多個主題時，無法決定被通知的順序。 與其他模式的比較：[命令模式]：命令模式中，調用者發送命令給接收者，由接收者決定是否執行命令。觀察者模式中，主題發送通知給觀察者後，由觀察者自行決定要執行的行動。 經常運用在實時事件系統。程式中有「通知」兩字的行為，很可能是它的應用時機。 ʕ •ᴥ•ʔ：又是個日常生活中就會看到的模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：運輸系統（抽象工廠模式）","slug":"Class-Diagram-Transport-Abstract-Factory-Pattern","date":"2020-09-08T13:01:23.000Z","updated":"2025-07-30T11:30:13.292Z","comments":true,"path":"2020/09/08/Class-Diagram-Transport-Abstract-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/09/08/Class-Diagram-Transport-Abstract-Factory-Pattern/","excerpt":"Class-Diagram-Transport-Abstract-Factory-Pattern","text":"Example: 運輸系統 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113@startuml Example-Transport-Factory-Method-Patterninterface ModelFactory&#123; + createModel(): Model + createChair(): Chair&#125;interface Model&#123; + getName(): string&#125;interface Chair&#123; + getName(): string&#125;ModelFactory ---&gt; ModelModelFactory ---&gt; Chairclass LocalTrainFactory&#123; + createModel(): Model + createChair(): Chair&#125;class SemiExpressFactory&#123; + createModel(): Model + createChair(): Chair&#125;class LimitedExpressFactory&#123; + createModel(): Model + createChair(): Chair&#125;class Boeing747Factory&#123; + createModel(): Model + createChair(): Chair&#125;ModelFactory &lt;|.. LocalTrainFactoryModelFactory &lt;|.. SemiExpressFactoryModelFactory &lt;|.. LimitedExpressFactoryModelFactory &lt;|.. Boeing747Factoryclass LocalTrain&#123; + getName(): string&#125;class SemiExpress&#123; + getName(): string&#125;class LimitedExpress&#123; + getName(): string&#125;class Boeing747&#123; + getName(): string&#125;Model &lt;|.. LocalTrainModel &lt;|.. SemiExpressModel &lt;|.. LimitedExpressModel &lt;|.. Boeing747class LongChair&#123; + getName(): string&#125;class ReservedSeatChair&#123; + getName(): string&#125;class PlaneChair&#123; + getName(): string&#125;Chair &lt;|.. LongChairChair &lt;|.. ReservedSeatChairChair &lt;|.. PlaneChairclass Program&#123; + getModel(string model): string + getChair(string model): string - createModelFactory(string model): ModelFactory&#125;Program --&gt; ModelFactoryLocalTrainFactory ---&gt; LocalTrainLocalTrainFactory ---&gt; LongChairSemiExpressFactory ---&gt; SemiExpressSemiExpressFactory ---&gt; ReservedSeatChairLimitedExpressFactory ---&gt; LimitedExpressLimitedExpressFactory ---&gt; ReservedSeatChairBoeing747Factory ---&gt; Boeing747Boeing747Factory ---&gt; PlaneChair@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：運輸系統 （抽象工廠模式）","slug":"Example-Transport-Abstract-Factory-Pattern","date":"2020-09-04T13:21:08.000Z","updated":"2025-05-30T08:15:23.239Z","comments":true,"path":"2020/09/04/Example-Transport-Abstract-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/09/04/Example-Transport-Abstract-Factory-Pattern/","excerpt":"Example-Transport-Abstract-Factory-Pattern","text":"Pattern: 抽象工廠模式 Class Diagram: 運輸系統 前情提要：鐵路運輸系統，參考範例：運輸系統（工廠方法模式） 123456789101112131415161718192021222324252627282930313233&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\ModelFactory;use ReflectionClass;class Program&#123; /** * @param string $modelName * @return string */ public function getModel($modelName) &#123; $modelFactory = $this-&gt;createModelFactory($modelName); $model = $modelFactory-&gt;createModel(); return $model-&gt;getName(); &#125; /** * @param string $modelName * @return ModelFactory */ private function createModelFactory($modelName) &#123; $namespace = &#x27;App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\ModelFactories&#x27;; $className = $modelName . &#x27;Factory&#x27;; $reflector = new ReflectionClass($namespace . &#x27;\\\\&#x27; . $className); return $reflector-&gt;newInstance(); &#125;&#125; 需求一：各交通工具準備就緒，要開始處理內裝問題。 由於不同的機型會有不同的內裝，讓我們從定義椅子介面開始。 定義椅子介面 123456789&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts;interface Chair&#123; public function getName();&#125; 接著改寫機型工廠介面，除了製作機型外，要新增製作椅子的方法。 1234567891011121314&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;interface ModelFactory&#123; public function createModel(): Model; public function createChair(): Chair;&#125; 實作長型座椅 1234567891011121314&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Chair;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;class LongChair implements Chair&#123; public function getName() &#123; return &#x27;長型座椅&#x27;; &#125;&#125; 實作對號座椅 1234567891011121314&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Chair;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;class ReservedSeatChair implements Chair&#123; public function getName() &#123; return &#x27;對號座椅&#x27;; &#125;&#125; 實作飛機座椅 1234567891011121314&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Chair;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;class PlaneChair implements Chair&#123; public function getName() &#123; return &#x27;飛機座椅&#x27;; &#125;&#125; 接著改寫各個機型工廠，選擇適合的座椅。 改寫區間車工廠 12345678910111213141516171819202122232425&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\ModelFactory;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Model\\LocalTrain;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Chair\\LongChair;class LocalTrainFactory implements ModelFactory&#123; public function createModel(): Model &#123; //取得生產材料... //招募技術團隊... return new LocalTrain(); &#125; public function createChair(): Chair &#123; return new LongChair(); &#125;&#125; 改寫復興號工廠 12345678910111213141516171819202122232425&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\ModelFactory;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Model\\SemiExpress;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Chair\\ReservedSeatChair;class SemiExpressFactory implements ModelFactory&#123; public function createModel(): Model &#123; //取得生產材料... //招募技術團隊... return new SemiExpress(); &#125; public function createChair(): Chair &#123; return new ReservedSeatChair(); &#125;&#125; 改寫自強號工廠 123456789101112131415161718192021222324&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Model\\LimitedExpress;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\ModelFactory;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Chair\\ReservedSeatChair;class LimitedExpressFactory implements ModelFactory&#123; public function createModel(): Model &#123; //取得生產材料... //招募技術團隊... return new LimitedExpress(); &#125; public function createChair(): Chair &#123; return new ReservedSeatChair(); &#125;&#125; 改寫波音 747 工廠 12345678910111213141516171819202122232425&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\ModelFactory;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Model\\Boeing747;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\Chair;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Chair\\PlaneChair;class Boeing747Factory implements ModelFactory&#123; public function createModel(): Model &#123; //取得生產材料... //招募技術團隊.. return new Boeing747(); &#125; public function createChair(): Chair &#123; return new PlaneChair(); &#125;&#125; 最後改寫原本的程式碼 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?phpnamespace App\\FactoryPattern\\Transport\\AbstractFactoryPattern;use App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\Contracts\\ModelFactory;use ReflectionClass;class Program&#123; /** * @param string $modelName * @return string */ public function getModel($modelName) &#123; $modelFactory = $this-&gt;createModelFactory($modelName); $model = $modelFactory-&gt;createModel(); return $model-&gt;getName(); &#125; /** * @param string $modelName * @return string */ public function getChair($modelName) &#123; $modelFactory = $this-&gt;createModelFactory($modelName); $chair = $modelFactory-&gt;createChair(); return $chair-&gt;getName(); &#125; /** * @param string $modelName * @return ModelFactory */ private function createModelFactory($modelName) &#123; $namespace = &#x27;App\\FactoryPattern\\Transport\\AbstractFactoryPattern\\ModelFactories&#x27;; $className = $modelName . &#x27;Factory&#x27;; $reflector = new ReflectionClass($namespace . &#x27;\\\\&#x27; . $className); return $reflector-&gt;newInstance(); &#125;&#125; 透過工廠介面，我們組合了各種類型產品。使得不同類型的產品之間，有了產品族的聯繫關係。 [單一職責原則]我們將工廠類別 (Factory) 與產品類別 (Product) 視作兩種不同的職責。 [開放封閉原則]當新增新的產品族時，我們僅需新增工廠類別。當修改既有產品時，我們僅需修改其產品類別，不會影響到其他的產品類別。 [介面隔離原則]工廠介面：用來創建機型及座椅。產品介面：用來創建對應的產品。 [依賴反轉原則]工廠介面依賴於抽象的機型介面與座椅介面。 工廠實作抽象的工廠介面。機型實作抽象的機型介面。座椅實作抽象的座椅介面。 ʕ •ᴥ•ʔ：雖然有點複雜，但這個模式好美。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"抽象工廠模式","slug":"Abstract-Factory-Pattern","date":"2020-09-04T13:16:26.000Z","updated":"2025-05-30T08:15:23.214Z","comments":true,"path":"2020/09/04/Abstract-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/09/04/Abstract-Factory-Pattern/","excerpt":"Abstract Factory Pattern","text":"Abstract Factory Pattern提供一個接口，用於創建相關或依賴對象的家族，而不需要明確指定具體類。即產品增加產品族的概念。Example: 運輸系統、世紀帝國 抽象工廠模式會將類別分為兩類：分別是工廠類別 (Creator) 與 產品類別 (Product) 。兩者皆有對應的抽象介面，即抽象工廠類別 (AbstractFactory) 與 抽象產品類別 (AbstractProduct) 。 不同類型的產品結盟成產品族。 優點：將創建物件的邏輯與物件本身的邏輯分離。一個工廠只會對應一個產品族類別，遵守開放封閉原則。 缺點：會使程式碼變得複雜。不容易替產品族新增新的產品。（須修改抽象工廠介面） 與其他模式的比較：[簡單工廠模式]：簡單工廠模式僅擁有一個工廠，透過 switch 子句，創建同種類型的不同產品。 無法遵守開放封閉原則。 [工廠方法模式]：工廠方法模式擁有多個工廠，各個工廠創建同種類型的不同產品。 而抽象工廠模式則是擁有多個工廠，各個工廠創建多種類型的產品。不同類型的產品，有著一條隱密的線，形成產品族的關係。 實作技巧： 將 factory 作成 singleton。 若會有好幾個產品族物件並存，不妨採用 Prototype 來製作工廠類別 (Factory) 。 ʕ •ᴥ•ʔ：把你學會的 S.O.L.I.D 同時發揮出來。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：運輸系統（工廠方法模式）","slug":"Class-Diagram-Transport-Factory-Method-Pattern","date":"2020-08-30T01:50:38.000Z","updated":"2025-07-30T11:30:13.302Z","comments":true,"path":"2020/08/30/Class-Diagram-Transport-Factory-Method-Pattern/","permalink":"https://yncbearz.github.io/2020/08/30/Class-Diagram-Transport-Factory-Method-Pattern/","excerpt":"Class-Diagram-Transport-Factory-Method-Pattern","text":"Example: 運輸系統 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778@startuml Example-Transport-Factory-Method-Patterninterface ModelFactory&#123; + createModel(): Model&#125;interface Model&#123; + getName(): string&#125;ModelFactory ---&gt; Modelclass LocalTrainFactory&#123; + createModel(): Model&#125;class SemiExpressFactory&#123; + createModel(): Model&#125;class LimitedExpressFactory&#123; + createModel(): Model&#125;class Boeing747Factory&#123; + createModel(): Model&#125;ModelFactory &lt;|.. LocalTrainFactoryModelFactory &lt;|.. SemiExpressFactoryModelFactory &lt;|.. LimitedExpressFactoryModelFactory &lt;|.. Boeing747Factoryclass LocalTrain&#123; + getName(): string&#125;class SemiExpress&#123; + getName(): string&#125;class LimitedExpress&#123; + getName(): string&#125;class Boeing747&#123; + getName(): string&#125;Model &lt;|.. LocalTrainModel &lt;|.. SemiExpressModel &lt;|.. LimitedExpressModel &lt;|.. Boeing747class Program&#123; + getModel(string model): string - createModelFactory(string model): ModelFactory&#125;Program --&gt; ModelFactoryLocalTrainFactory ---&gt; LocalTrainSemiExpressFactory ---&gt; SemiExpressLimitedExpressFactory ---&gt; LimitedExpressBoeing747Factory ---&gt; Boeing747@enduml 這個圖真的很適合說明依賴反轉原則 ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：運輸系統（工廠方法模式）","slug":"Example-Transport-Factory-Method-Pattern","date":"2020-08-29T18:02:11.000Z","updated":"2025-05-30T08:15:23.240Z","comments":true,"path":"2020/08/30/Example-Transport-Factory-Method-Pattern/","permalink":"https://yncbearz.github.io/2020/08/30/Example-Transport-Factory-Method-Pattern/","excerpt":"Example-Transport-Factory-Method-Pattern","text":"Pattern: 工廠方法模式 Class Diagram: 運輸系統 \b前情提要：鐵路運輸系統，參考範例：運輸系統（簡單工廠模式) 12345678910111213141516171819&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\RailwayModelFactory;class Program&#123; /** * @param string $modelName * @return string */ public function getModel($modelName) &#123; $railwayModelFactory = new RailwayModelFactory(); $model = $railwayModelFactory-&gt;createModel($modelName); return $model-&gt;getName(); &#125;&#125; 需求一：隨著公司擴大，運輸系統不再僅限鐵路，將引進波音747，進軍航空業 此時發現，原本的簡單工廠，從創建對象都是火車，到有飛機，邏輯越來越複雜了。 常常違反開放封閉原則，讓我們用工廠方法模式修正它。 首先定義機型工廠介面（可生產火車、飛機等各種機型） 12345678910&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\Model;interface ModelFactory&#123; public function createModel(): Model;&#125; 實作區間車工廠 1234567891011121314151617&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\ModelFactory;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Model\\LocalTrain;class LocalTrainFactory implements ModelFactory&#123; public function createModel(): Model &#123; //取得生產材料... //招募技術團隊... return new LocalTrain(); &#125;&#125; 實作復興號工廠 1234567891011121314151617&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\ModelFactory;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Model\\SemiExpress;class SemiExpressFactory implements ModelFactory&#123; public function createModel(): Model &#123; //取得生產材料... //招募技術團隊... return new SemiExpress(); &#125;&#125; 實作自強號工廠 1234567891011121314151617&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Model\\LimitedExpress;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\ModelFactory;class LimitedExpressFactory implements ModelFactory&#123; public function createModel(): Model &#123; //取得生產材料... //招募技術團隊... return new LimitedExpress(); &#125;&#125; 修改原本的程式碼 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories\\LimitedExpressFactory;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories\\LocalTrainFactory;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories\\SemiExpressFactory;class Program&#123; /** * @param string $modelName * @return string */ public function getModel($modelName) &#123; $modelFactory = $this-&gt;createModelFactory($modelName); $model = $modelFactory-&gt;createModel(); return $model-&gt;getName(); &#125; /** * @param string $modelName * @return ModelFactory */ private function createModelFactory($modelName) &#123; switch ($modelName) &#123; case &#x27;LimitedExpress&#x27;: return new LimitedExpressFactory(); break; case &#x27;LocalTrain&#x27;: return new LocalTrainFactory(); break; case &#x27;SemiExpress&#x27;: return new SemiExpressFactory(); break; &#125; &#125;&#125; 運用反射 (Reflection) 機制，讓客戶端的程式碼不再修改 123456789101112131415161718192021222324252627282930313233&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\ModelFactory;use ReflectionClass;class Program&#123; /** * @param string $modelName * @return string */ public function getModel($modelName) &#123; $modelFactory = $this-&gt;createModelFactory($modelName); $model = $modelFactory-&gt;createModel(); return $model-&gt;getName(); &#125; /** * @param string $modelName * @return ModelFactory */ private function createModelFactory($modelName) &#123; $namespace = &#x27;App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories&#x27;; $className = $modelName . &#x27;Factory&#x27;; $reflector = new ReflectionClass($namespace . &#x27;\\\\&#x27; . $className); return $reflector-&gt;newInstance(); &#125;&#125; 這下子，改造工程結束，讓我們回到波音747！ 實作波音747機型 12345678910111213&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Model;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\Model;class Boeing747 implements Model&#123; public function getName() &#123; return &#x27;波音747&#x27;; &#125;&#125; 最後實作波音747工廠 123456789101112131415&lt;?phpnamespace App\\FactoryPattern\\Transport\\FactoryMethodPattern\\ModelFactories;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\ModelFactory;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\FactoryMethodPattern\\Model\\Boeing747;class Boeing747Factory implements ModelFactory&#123; public function createModel(): Model &#123; return new Boeing747(); &#125;&#125; [單一職責原則]我們將創建類別 (Creator) 與 產品類別 (Product) 視作兩種不同的職責。 [開放封閉原則]當新增新的產品時，我們僅需新增產品類別及新增創建類別。當修改既有產品時，我們僅需修改其產品類別，不會影響到其他的產品類別。 [介面隔離原則]拆分出工廠介面與機型介面。 [依賴反轉原則]客戶依賴於抽象工廠介面與機型介面。工廠類別實作抽象的工廠介面。機型類別實作抽象的機型介面。 ʕ •ᴥ•ʔ：不久之後，我們會再一次看到這個範例，敬請期待。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"工廠方法模式","slug":"Factory-Method-Pattern","date":"2020-08-29T18:01:01.000Z","updated":"2025-05-30T08:15:23.242Z","comments":true,"path":"2020/08/30/Factory-Method-Pattern/","permalink":"https://yncbearz.github.io/2020/08/30/Factory-Method-Pattern/","excerpt":"Factory-Method-Pattern","text":"Factory Method Pattern簡單工廠的延伸，不再提供統一的工廠類來建立所有物件，而是將Factory類別抽象化，針對不同分類的物件有不同的工廠。Example: 運輸系統、世紀帝國 工廠方法模式會將類別分為兩類：分別是工廠類別 (Creator) 與 產品類別 (Product) 。 透過定義好的介面，讓類別的實例化延遲到子類中進行。 優點：將創建物件的邏輯與物件本身的邏輯分離。一個工廠只會對應一個類別，完全遵守了開放封閉原則。 缺點：會做出很多小類別。（每次新增產品類別，就得新增對應的工廠類別） 與其他模式的比較：[簡單工廠模式]：比起簡單工廠模式，工廠方法模式能在創建物件時，將複雜的創建邏輯處理地更好。 [樣板方法模式]：工廠方法模式，是一個迷你的樣板方法模式，它只提出了建造類別這個步驟。 ʕ •ᴥ•ʔ：將開放封閉原則展現的淋漓盡致！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：運輸系統（簡單工廠模式）","slug":"Class-Diagram-Transport-Simple-Factory-Pattern","date":"2020-08-29T18:00:15.000Z","updated":"2025-07-30T11:30:13.314Z","comments":true,"path":"2020/08/30/Class-Diagram-Transport-Simple-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/08/30/Class-Diagram-Transport-Simple-Factory-Pattern/","excerpt":"Class-Diagram-Transport-Simple-Factory-nattern","text":"Example: 運輸系統 1234567891011121314151617181920212223242526272829303132333435363738394041@startuml Example-Transport-Simple-Factory-Patterninterface Model&#123; + getName()&#125;class LocalTrain&#123; + getName()&#125;class LimitedExpress&#123; + getName()&#125;class SemiExpress&#123; + getName()&#125;Model &lt;|.. LocalTrainModel &lt;|.. LimitedExpressModel &lt;|.. SemiExpressclass RailwayModelFactory&#123; + createModel(string model): Model&#125;RailwayModelFactory --&gt; Modelclass Program&#123; + getModel(string model): string&#125;Program -&gt; RailwayModelFactory@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：運輸系統（簡單工廠模式)","slug":"Example-Transport-Simple-Factory-Pattern","date":"2020-08-29T16:19:25.000Z","updated":"2025-05-30T08:15:23.240Z","comments":true,"path":"2020/08/30/Example-Transport-Simple-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/08/30/Example-Transport-Simple-Factory-Pattern/","excerpt":"Example-Transport-Simple-Factory-Pattern","text":"Pattern: 簡單工廠模式 Class Diagram: 運輸系統 情境：運輸系統，用來取得當前機型名稱等資訊 123456789101112131415161718192021222324&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern;class Program&#123; /** * @param string $modelName * @return string */ public function getModel($modelName) &#123; switch ($modelName) &#123; case &#x27;LocalTrain&#x27;: return &#x27;區間車&#x27;; break; case &#x27;LimitedExpress&#x27;: return &#x27;自強號&#x27;; break; &#125; &#125;&#125; 需求一：新增復興號 (SemiExpress) 正當我們想直接在switch中新增一個case時，發現這種做法違反了開放封閉原則。 明明是新增機型，卻修改到了既有的程式碼（取得機型名稱）。此外在修改機型名稱時，也會修改到既有程式碼。 讓我們用簡單工廠模式，將創建物件與物件本身的職責分離。（註：客戶端的程式碼、創建機型、機型本身，共三種職責） 首先定義機型介面 12345678&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Contracts;interface Model&#123; public function getName();&#125; 實作區間車機型 12345678910111213&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Contracts\\Model;class LocalTrain implements Model&#123; public function getName() &#123; return &#x27;區間車&#x27;; &#125;&#125; 實作自強號機型 12345678910111213&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Contracts\\Model;class LimitedExpress implements Model&#123; public function getName() &#123; return &#x27;自強號&#x27;; &#125;&#125; 實作鐵路機型工廠 123456789101112131415161718192021222324252627&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model\\LocalTrain;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model\\LimitedExpress;class RailWayModelFactory&#123; /** * @param string $modelName * @return Model */ public function createModel($modelName): Model &#123; switch ($modelName) &#123; case &#x27;LocalTrain&#x27;: return new LocalTrain(); break; case &#x27;LimitedExpress&#x27;: return new LimitedExpress(); break; &#125; &#125;&#125; 接著是修改原本的程式 12345678910111213141516171819&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\RailwayModelFactory;class Program&#123; /** * @param string $modelName * @return string */ public function getModel($modelName) &#123; $railwayModelFactory = new RailwayModelFactory(); $model = $railwayModelFactory-&gt;createModel($modelName); return $model-&gt;getName(); &#125;&#125; 回到需求，實作復興號機型 12345678910111213&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Contracts\\Model;class SemiExpress implements Model&#123; public function getName() &#123; return &#x27;復興號&#x27;; &#125;&#125; 最後修改鐵路機型工廠 1234567891011121314151617181920212223242526272829303132&lt;?phpnamespace App\\FactoryPattern\\Transport\\SimpleFactoryPattern;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Contracts\\Model;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model\\LocalTrain;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model\\LimitedExpress;use App\\FactoryPattern\\Transport\\SimpleFactoryPattern\\Model\\SemiExpress;class RailWayModelFactory&#123; /** * @param string $model * @return Model */ public function createModel($model): Model &#123; switch ($model) &#123; case &#x27;LocalTrain&#x27;: return new LocalTrain(); break; case &#x27;LimitedExpress&#x27;: return new LimitedExpress(); break; case &#x27;SemiExpress&#x27;: return new SemiExpress(); break; &#125; &#125;&#125; [單一職責原則] 我們將 創建類別 (Creator) 與 產品類別 (Product) 視作兩種不同的職責。 將取得機型資訊的運輸系統視作第三種職責。 [開放封閉原則] 當新增新的產品時，我們僅需新增產品類別及修改創建類別。 當修改既有產品時，我們僅需修改其產品類別及創建類別，不會影響到其他的產品類別。 無論是新增&#x2F;修改產品，我們都不用再去修改到運輸系統類別。 [依賴反轉原則] 運輸類別依賴抽象的機型介面。 產品類別實作抽象的機型介面。 透過簡單工廠模式，運輸系統類別減少了改變的機會，但創建類別依然常常需要變更。 ʕ •ᴥ•ʔ：不久之後，我們還會見到這個範例，敬請期待。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"類別圖：會員制 （狀態模式）","slug":"Class-Diagram-Premium-State-Pattern","date":"2020-08-25T00:55:57.000Z","updated":"2025-07-30T11:30:13.198Z","comments":true,"path":"2020/08/25/Class-Diagram-Premium-State-Pattern/","permalink":"https://yncbearz.github.io/2020/08/25/Class-Diagram-Premium-State-Pattern/","excerpt":"Class-Diagram-Premium-State-Pattern","text":"Example: 會員制 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273@startumlabstract class UserState&#123; + LICENCE = &#x27;undefined user&#x27; + getLicense() + register() + subscribe() + cancelSubscription() + deleteAccount()&#125;class GuestState&#123; # program + LICENCE = &#x27;guest&#x27; + __construct(Program $program) + register() + subscribe() + cancelSubscription() + deleteAccount()&#125;class MemberState&#123; # program + LICENCE = &#x27;member&#x27; + __construct(Program $program) + register() + subscribe() + cancelSubscription() + deleteAccount()&#125;class PremiumState&#123; # program + LICENCE = &#x27;premium&#x27; + __construct(Program $program) + register() + subscribe() + cancelSubscription() + deleteAccount()&#125;UserState &lt;|.. GuestStateUserState &lt;|.. MemberStateUserState &lt;|.. PremiumStateclass Program&#123; # license # guestState # memberState # premiumState + __construct() + register() + getLicense() + subscribe() + cancelSubscription() + deleteAccount() + setGuestState() + setMemberState() + setPremiumState() + getState()&#125;GuestState &lt;--&gt; ProgramMemberState &lt;--&gt; ProgramPremiumState &lt;--&gt; Program@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：會員制（狀態模式）","slug":"Example-Premium-State-Pattern","date":"2020-08-20T17:08:01.000Z","updated":"2025-05-30T08:15:23.236Z","comments":true,"path":"2020/08/21/Example-Premium-State-Pattern/","permalink":"https://yncbearz.github.io/2020/08/21/Example-Premium-State-Pattern/","excerpt":"Example-Premium-State-Pattern","text":"Pattern: 狀態模式 Class Diagram: 會員制 情境：平台有三種身份，分別是訪客 (guest) 、 會員 (member) 及 付費會員(premium) 訪客藉由註冊 (register) ，可成為會員。 會員藉由訂閱 (subsribe) ，可成為付費會員。 付費會員藉由取消訂閱 (cancelSubscription) ，可變回會員。 會員及付費會員藉由刪除帳號 (deleteAccount) ，可變回訪客。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?phpnamespace App\\StatePattern\\Youtube;use Exception;class Program&#123; /** * @var string */ protected $license; public function __construct() &#123; $this-&gt;setLicense(&#x27;guest&#x27;); &#125; public function register() &#123; if ($this-&gt;license == &#x27;premium&#x27;) &#123; return; &#125; $this-&gt;license = &#x27;member&#x27;; &#125; public function getLicense() &#123; return $this-&gt;license; &#125; /** * @param string $license */ public function setLicense($license) &#123; $this-&gt;license = $license; &#125; public function subscribe() &#123; if ($this-&gt;license == &#x27;premium&#x27;) &#123; return; &#125; if ($this-&gt;license == &#x27;member&#x27;) &#123; $this-&gt;license = &#x27;premium&#x27;; return; &#125; throw new Exception(&#x27;You need to be a member before subscribing.&#x27;); &#125; public function cancelSubscription() &#123; if ($this-&gt;license == &#x27;premium&#x27;) &#123; $this-&gt;license = &#x27;member&#x27;; return; &#125; throw new Exception(&#x27;Sorry, you have not subscribed.&#x27;); &#125; public function deleteAccount() &#123; if ($this-&gt;license == &#x27;member&#x27; || $this-&gt;license == &#x27;premium&#x27;) &#123; $this-&gt;license = &#x27;guest&#x27;; return; &#125; throw new Exception(&#x27;You need to be a member before deleting account.&#x27;); &#125;&#125; 隨著功能越來越多，每次新增功能時，我們都會有許多複雜的條件式（判斷當前用戶狀態）。 讓我們用狀態模式改善它。 需求一：切分出不同的用戶狀態 首先定義用戶狀態（抽象） 123456789101112131415161718192021&lt;?phpnamespace App\\StatePattern\\Youtube\\State;abstract class UserState&#123; const LICENCE = &#x27;undefined user&#x27;; public function getLicense() &#123; return $this::LICENCE; &#125; abstract function register(); abstract function subscribe(); abstract function cancelSubscription(); abstract function deleteAccount();&#125; 訪客狀態 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?phpnamespace App\\StatePattern\\Youtube\\State;use App\\StatePattern\\Youtube\\Program;use Exception;use App\\StatePattern\\Youtube\\State\\UserState;class GuestState extends UserState&#123; /** * @var Program */ protected $program; /** * @var string */ const LICENCE = &#x27;guest&#x27;; /** * @param Program $program */ public function __construct(Program $program) &#123; $this-&gt;program = $program; &#125; public function register() &#123; $this-&gt;program-&gt;setMemberState(); &#125; public function subscribe() &#123; throw new Exception(&#x27;You need to be a member before subscribing.&#x27;); &#125; public function cancelSubscription() &#123; throw new Exception(&#x27;Sorry, you have not subscribed.&#x27;); &#125; public function deleteAccount() &#123; throw new Exception(&#x27;You need to be a member before deleting account.&#x27;); &#125;&#125; 會員狀態 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;?phpnamespace App\\StatePattern\\Youtube\\State;use App\\StatePattern\\Youtube\\Program;use Exception;use App\\StatePattern\\Youtube\\State\\UserState;class MemberState extends UserState&#123; /** * @var Program */ protected $program; /** * @var string */ const LICENCE = &#x27;member&#x27;; /** * @param Program $program */ public function __construct(Program $program) &#123; $this-&gt;program = $program; &#125; public function register() &#123; return; &#125; public function subscribe() &#123; $this-&gt;program-&gt;setPremiumState(); &#125; public function cancelSubscription() &#123; throw new Exception(&#x27;Sorry, you have not subscribed.&#x27;); &#125; public function deleteAccount() &#123; $this-&gt;program-&gt;setGuestState(); &#125;&#125; 付費會員狀態 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;?phpnamespace App\\StatePattern\\Youtube\\State;use App\\StatePattern\\Youtube\\Program;use App\\StatePattern\\Youtube\\State\\UserState;class PremiumState extends UserState&#123; /** * @var Program */ protected $program; /** * @var string */ const LICENCE = &#x27;premium&#x27;; /** * @param Program $program */ public function __construct(Program $program) &#123; $this-&gt;program = $program; &#125; public function register() &#123; return; &#125; public function subscribe() &#123; return; &#125; public function cancelSubscription() &#123; $this-&gt;program-&gt;setMemberState(); &#125; public function deleteAccount() &#123; $this-&gt;program-&gt;setGuestState(); &#125;&#125; 最後修改原本的情境類別 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&lt;?phpnamespace App\\StatePattern\\Youtube;use App\\StatePattern\\Youtube\\State\\MemberState;use App\\StatePattern\\Youtube\\State\\GuestState;use App\\StatePattern\\Youtube\\State\\PremiumState;use App\\StatePattern\\Youtube\\State\\UserState;class Program&#123; /** * @var string */ protected $license; /** * @var MemberState */ protected $memberState; /** * @var GuestState */ protected $guestState; /** * @var PremiumState */ protected $premiumState; /** * @var UserState */ protected $state; public function __construct() &#123; $this-&gt;memberState = new MemberState($this); $this-&gt;guestState = new GuestState($this); $this-&gt;premiumState = new PremiumState($this); $this-&gt;setGuestState(); &#125; public function register() &#123; $this-&gt;state-&gt;register(); &#125; public function getLicense() &#123; return $this-&gt;state-&gt;getLicense(); &#125; public function subscribe() &#123; $this-&gt;state-&gt;subscribe(); &#125; public function cancelSubscription() &#123; $this-&gt;state-&gt;cancelSubscription(); &#125; public function setGuestState() &#123; $this-&gt;state = $this-&gt;guestState; &#125; public function setMemberState() &#123; $this-&gt;state = $this-&gt;memberState; &#125; public function setPremiumState() &#123; $this-&gt;state = $this-&gt;premiumState; &#125; public function getState() &#123; return $this-&gt;state; &#125; public function deleteAccount() &#123; $this-&gt;state-&gt;deleteAccount(); &#125;&#125; [單一職責原則]我們將情境類別與狀態類別視作兩種不同的職責。透過委派來實現不同狀態下的行為。 [開放封閉原則]修改既有狀態類別的行為，不會影響到全部的既有狀態類別。（新增狀態類別時，可能會影響到） [介面隔離原則]情境類別依賴於抽象的用戶狀態 (User State) 。不同的狀態類別實作抽象的用戶狀態 (User State) 。 ʕ •ᴥ•ʔ：透過測試，重構這個範例時有遇到一些小困難。大家也可以挑戰看看。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"狀態模式","slug":"State-Pattern","date":"2020-08-20T17:07:23.000Z","updated":"2025-05-30T08:15:23.255Z","comments":true,"path":"2020/08/21/State-Pattern/","permalink":"https://yncbearz.github.io/2020/08/21/State-Pattern/","excerpt":"State-Pattern","text":"State Pattern允許對象在內部狀態改變時，改變它的行為，對象看起來好像修改了它的類。Example: 會員制 狀態模式會將類別分為兩類：分別是情境類別 (Context) 與 狀態類別 (State) 。 當前對象會隨著內部狀態，改變它的行為。 狀態模式涉及了 有限狀態機 (Finite-State Machine) 的概念。 有限個狀態，彼此間因動作而造成狀態轉移的系統，同一時間內只會表現出一種狀態。 優點：將狀態類抽離，可讓當前對象複雜的條件判斷簡化。即消除龐大的條件分支敘述。 缺點：會製造出許多的小類別。 與其他模式的比較：[簡單工廠模式]：簡單工廠模式的物件，創造後行為就不會改變了。而狀態模式則可能因應其狀態，做出不同的行為。 [策略模式]：定義算法族，委派給不同的物件。而狀態模式中的小類別層級，皆可獨立運作。 [單例模式]：我們可以將 狀態類別 (State) 作成單例模式。 [蠅量模式]：如果 狀態類別 (State) 不含內在狀態（即只以物件型別來代表狀態的類型），此時的 狀態類別 (State) 就變成了蠅量模式。 ʕ •ᴥ•ʔ：狀態模式可以內聚不同 function 中的 if&#x2F;else 或者 switch。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：自助餐餐廳（外觀模式）","slug":"Class-Diagram-Buffet-Facade-Pattern","date":"2020-08-16T15:22:42.000Z","updated":"2025-07-30T11:30:13.104Z","comments":true,"path":"2020/08/16/Class-Diagram-Buffet-Facade-Pattern/","permalink":"https://yncbearz.github.io/2020/08/16/Class-Diagram-Buffet-Facade-Pattern/","excerpt":"Class-Diagram-Buffet-Facade-Pattern","text":"Example: 自助餐餐廳 1234567891011121314151617181920212223242526272829303132333435363738394041@startuml Example-Buffet-Facade-Patternclass IceCreamMachine&#123; + addIngredients() + stir() + chill() + squeeze()&#125;class CoffeeMachine&#123; + addCoffeeBeans() + grind() + brew() + stirWithMilk()&#125;class IceCreamMachineFacade&#123; &#123;static&#125; + makeIceCream()&#125;class CoffeeMachineFacade&#123; &#123;static&#125; + makeLatte()&#125;IceCreamMachineFacade --&gt; IceCreamMachineCoffeeMachineFacade --&gt; CoffeeMachineclass Program&#123; + makeIceCream() + makeLatte()&#125;Program --&gt; IceCreamMachineFacadeProgram --&gt; CoffeeMachineFacade@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：自助餐餐廳 （外觀模式)","slug":"Example-Buffet-Facade-Pattern","date":"2020-08-15T16:43:53.000Z","updated":"2025-05-30T08:15:23.232Z","comments":true,"path":"2020/08/16/Example-Buffet-Facade-Pattern/","permalink":"https://yncbearz.github.io/2020/08/16/Example-Buffet-Facade-Pattern/","excerpt":"Example-Buffet-Facade-Pattern","text":"Pattern: 外觀模式 Class Diagram: 自助餐餐廳 情境：以下是某自助餐餐廳的情況 自助式霜淇淋機 123456789101112131415161718192021222324252627282930&lt;?phpnamespace App\\FacadePattern\\Buffet;class IceCreamMachine&#123; public function addIngredients() &#123; //倒入牛奶、糖、鮮奶油、蛋黃等 return $this; &#125; public function stir() &#123; //攪拌均勻 return $this; &#125; public function chill() &#123; //使其冷藏 return $this; &#125; public function squeeze() &#123; //擠出霜淇淋 return &#x27;霜淇淋&#x27;; &#125;&#125; 自助式咖啡機 123456789101112131415161718192021222324252627282930&lt;?phpnamespace App\\FacadePattern\\Buffet;class CoffeeMachine&#123; public function addCoffeeBeans() &#123; //放入咖啡豆 return $this; &#125; public function grind() &#123; //研磨咖啡豆 return $this; &#125; public function brew() &#123; //沖煮咖啡 return $this; &#125; public function stirWithMilk() &#123; //與牛奶攪拌 return &#x27;拿鐵&#x27;; &#125;&#125; 老闆認為目前的方式，客人必須知道霜淇淋機與咖啡機所有的操作流程。 不是那麼地友好，希望我們能寫個簡單的介面，讓客人更容易取得餐點。 需求一：替霜淇淋機與咖啡機設計簡單的介面，方便取用 霜淇淋機的簡單介面 12345678910111213141516171819&lt;?phpnamespace App\\FacadePattern\\Buffet\\Facade;use App\\FacadePattern\\Buffet\\IceCreamMachine;class IceCreamMachineFacade&#123; public static function makeIceCream() &#123; $iceCreamMachine = new IceCreamMachine(); return $iceCreamMachine -&gt;addIngredients() -&gt;stir() -&gt;chill() -&gt;squeeze(); &#125;&#125; 咖啡機的簡單介面 12345678910111213141516171819&lt;?phpnamespace App\\FacadePattern\\Buffet\\Facade;use App\\FacadePattern\\Buffet\\CoffeeMachine;class CoffeeMachineFacade&#123; public static function makeLatte() &#123; $coffeeMachine = new CoffeeMachine(); return $coffeeMachine -&gt;addCoffeeBeans() -&gt;grind() -&gt;brew() -&gt;stirWithMilk(); &#125;&#125; 最後修改客人的點餐程式 12345678910111213141516171819&lt;?phpnamespace App\\FacadePattern\\Buffet;use App\\FacadePattern\\Buffet\\Facade\\CoffeeMachineFacade;use App\\FacadePattern\\Buffet\\Facade\\IceCreamMachineFacade;class Program&#123; public function makeIceCream() &#123; return IceCreamMachineFacade::makeIceCream(); &#125; public function makeLatte() &#123; return CoffeeMachineFacade::makeLatte(); &#125;&#125; 這下子，客人終於不用知道太多，便能取得自己想要的餐點了。 [單一職責原則]我們將子類別與接口類別視作兩種不同的職責。 [開放封閉原則]對於客戶端與接口類別來說，並不會因為我們用了新的咖啡機而有所區別。 然而當子類別改動時可能會連帶修改到接口類別。 ʕ •ᴥ•ʔ：在這個例子中，我會覺得是霜淇淋機&#x2F;咖啡機不對，竟然沒有提供簡單的介面！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"外觀模式","slug":"Facade-Pattern","date":"2020-08-15T16:41:49.000Z","updated":"2025-05-30T08:15:23.242Z","comments":true,"path":"2020/08/16/Facade-Pattern/","permalink":"https://yncbearz.github.io/2020/08/16/Facade-Pattern/","excerpt":"Facade-Pattern","text":"Facade Pattern提供一個統一的接口，用來訪問子系統中的一群接口。外觀模式定義了一個高層接口，讓子系統更容易使用。Example: 自助餐餐廳 外觀模式會將類別分為兩類：分別是統一的接口類 (Facade) 與 子系統類 (Subsystem) 。 接口類會提供簡單的接口，供客戶使用。 優點：因為封裝，解除了客戶與子系統間的耦合關係。可以透過接口類，來操作子系統中複雜的功能。 缺點：接口類可能會因為耦合太多子系統，而職責過重。 與其他模式的比較：[轉接頭模式]：轉接頭模式將一個接口轉化成另一個接口。而外觀模式則是提供簡化接口。 兩者的差異不在於包裝了幾個類別，而是在於意圖的不同。 [樣板方法模式]：樣板方法模式的抽象規則類與實體算法類會實現相同接口。外觀模式則無此限制。 ʕ •ᴥ•ʔ：外觀模式是封裝的一種高級應用。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：才藝表演（轉接頭模式）","slug":"Class-Diagram-Talent-Show-Adapter-Pattern","date":"2020-08-10T00:38:26.000Z","updated":"2025-07-30T11:30:13.252Z","comments":true,"path":"2020/08/10/Class-Diagram-Talent-Show-Adapter-Pattern/","permalink":"https://yncbearz.github.io/2020/08/10/Class-Diagram-Talent-Show-Adapter-Pattern/","excerpt":"Class-Diagram-Talent-Show-Adapter-Pattern","text":"Example: 才藝表演 12345678910111213141516171819202122232425262728293031323334353637383940414243@startuml Example-Talent-Show-Adapter-Patterninterface ShowInterface&#123; + show()&#125;class PianoPlayer&#123; + play()&#125;class PianoPlayerAdapter&#123; + __construct(PianoPlayer pianoPlayer) + show()&#125;class JokeTeller&#123; + tell()&#125;class JokeTellerAdapter&#123; + __construct(JokeTeller jokeTeller) + show()&#125;PianoPlayerAdapter --&gt; PianoPlayerShowInterface &lt;|.. PianoPlayerAdapterJokeTellerAdapter --&gt; JokeTellerShowInterface &lt;|.. JokeTellerAdapterclass Program&#123; + run() - preparePerformers()&#125;Program -&gt; ShowInterface@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：才藝表演（轉接頭模式）","slug":"Example-Talent-Show-Adapter-Pattern","date":"2020-08-09T07:34:23.000Z","updated":"2025-05-30T08:15:23.238Z","comments":true,"path":"2020/08/09/Example-Talent-Show-Adapter-Pattern/","permalink":"https://yncbearz.github.io/2020/08/09/Example-Talent-Show-Adapter-Pattern/","excerpt":"Example-Talent-Show-Adapter-Pattern","text":"Pattern: 轉接頭模式 Class Diagram: 才藝表演 情境：以下是某才藝表演 1234567891011121314151617181920212223&lt;?phpnamespace App\\AdapterPattern\\TalentShow;class Program&#123; /** * @return array */ public function run() &#123; $result = []; $pianoPlayer = new PianoPlayer(); $result[] = $pianoPlayer-&gt;play(); $jokeTeller = new JokeTeller(); $result[] = $jokeTeller-&gt;tell(); return $result; &#125;&#125; 主持人覺得需要知道，每位表演者的表演方式，有些麻煩。希望我們定義一個統一的介面，讓他的主持工作能更順利。 需求一：定義表演介面，使得表演項目能夠被管理 隨著項目變多，每個人的表演都不一樣。可能會有彈鋼琴、拉扯鈴、講笑話、演話劇等。 但是這些項目，未必都是為了才藝表演而存在。讓我們以此為基礎，切分兩者的職責。 首先定義表演的介面 12345678&lt;?phpnamespace App\\AdapterPattern\\TalentShow\\Contracts;interface ShowInterface&#123; public function show();&#125; 接著實作鋼琴表演者的轉接頭 123456789101112131415161718192021222324&lt;?phpnamespace App\\AdapterPattern\\TalentShow\\Adapter;use App\\AdapterPattern\\TalentShow\\PianoPlayer;use App\\AdapterPattern\\TalentShow\\Contracts\\ShowInterface;class PianoPlayerAdapter implements ShowInterface&#123; /** * @var PianoPlayer */ protected $pianoPlayer; public function __construct(PianoPlayer $pianoPlayer) &#123; $this-&gt;pianoPlayer = $pianoPlayer; &#125; public function show() &#123; return $this-&gt;pianoPlayer-&gt;play(); &#125;&#125; 透過這個轉接頭，當我們請鋼琴表演者表演時，他就會開始彈鋼琴。 再來是笑話表演者的轉接頭 123456789101112131415161718192021222324&lt;?phpnamespace App\\AdapterPattern\\TalentShow\\Adapter;use App\\AdapterPattern\\TalentShow\\Contracts\\ShowInterface;use App\\AdapterPattern\\TalentShow\\JokeTeller;class JokeTellerAdapter implements ShowInterface&#123; /** * @var JokeTeller */ protected $jokeTeller; public function __construct(JokeTeller $jokeTeller) &#123; $this-&gt;jokeTeller = $jokeTeller; &#125; public function show() &#123; return $this-&gt;jokeTeller-&gt;tell(); &#125;&#125; 透過這個轉接頭，當我們請笑話表演者表演時，他就會開始講笑話。 最後是修改原本的程式 123456789101112131415161718192021222324252627282930313233343536373839&lt;?phpnamespace App\\AdapterPattern\\TalentShow;use App\\AdapterPattern\\TalentShow\\Adapter\\PianoPlayerAdapter;use App\\AdapterPattern\\TalentShow\\Adapter\\JokeTellerAdapter;use App\\AdapterPattern\\TalentShow\\Contracts\\ShowInterface;class Program&#123; /** * @var ShowInterface[] */ protected $performers = []; /** * @return array */ public function run() &#123; $this-&gt;preparePerformers(); $result = []; foreach ($this-&gt;performers as $performer) &#123; $result[] = $performer-&gt;show(); &#125; return $result; &#125; private function preparePerformers() &#123; $pianoPlayer = new PianoPlayer(); $this-&gt;performers[] = new PianoPlayerAdapter($pianoPlayer); $jokeTeller = new JokeTeller(); $this-&gt;performers[] = new JokeTellerAdapter($jokeTeller); &#125;&#125; 透過各種實作表演介面的轉接頭，我們便能更好地管理表演項目了。（比如：進退場的流程、項目的介紹等） [單一職責原則]我們將才藝類別與表演項目類別視作兩種不同的職責。 [開放封閉原則]若我們需要在表演時，增加新的表演者，可以不修改原本才藝類別的程式碼。只需新增一個對應的轉接頭。 [介面隔離原則]才藝類別與表演項目類別實作的是兩個不同的接口。透過轉接頭，讓原本接口不同的類別能夠介接。 [依賴反轉原則]客戶端的程式碼依賴抽象的表演介面。轉接頭實作抽象的表演介面。 ʕ •ᴥ•ʔ：除了上述包裹類別的方式外，轉接頭還能透過多重繼承的方式實現。將來撰寫其他語言範例時，再來補充。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"轉接頭模式","slug":"Adapter-Pattern","date":"2020-08-09T07:31:09.000Z","updated":"2025-05-30T08:15:23.214Z","comments":true,"path":"2020/08/09/Adapter-Pattern/","permalink":"https://yncbearz.github.io/2020/08/09/Adapter-Pattern/","excerpt":"Adapter Pattern","text":"Adapter Pattern將一個類的接口，轉換成客戶期望的另一個接口。轉接頭讓原本接口不兼容的類可以合作無間。Example: 才藝表演 轉接頭模式會將類別分為三類：分別是原有的系統、轉接頭 (Adapter) 與客戶類別。 透過轉接頭類別，讓原有的系統能夠實現客戶類別所需的方法。 優點：可以在不改變原有的程式碼的情況下，製作轉接頭，使其與新的程式碼介接。 缺點：程式碼複雜度提高。 與其他模式的比較：[裝飾者模式]：裝飾者模式透過遞迴的方式，不停地豐富既有行為。而轉接頭模式則是透過改變介面來滿足新的程式碼。 [策略模式]：策略模式是定義出算法族，供不同類別去實作。而轉接頭模式是結合不同介面的算法，讓它們能實現相同的新介面。 ʕ •ᴥ•ʔ：比較常見的翻譯，好像是適配器或轉接器，不過我習慣叫它轉接頭模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"最小知識原則","slug":"Least-Knowledge-Principle","date":"2020-08-05T15:27:54.000Z","updated":"2025-05-30T08:15:23.248Z","comments":true,"path":"2020/08/05/Least-Knowledge-Principle/","permalink":"https://yncbearz.github.io/2020/08/05/Least-Knowledge-Principle/","excerpt":"Least-Knowledge-Principle","text":"Least Knowledge Principle (LKP)Only talk to your immediate friends. 只跟你的密友說話。 客戶不該知道細節，僅需知道接口方法。 客戶不該知道內部生產的演算法、依賴了哪些類別，只需知道接口方法和結果。 其核心精神強調了類別之間的鬆耦合。（隱藏內部的實作，就更容易對其作出改變） 此原則亦被稱作 迪米特法則 (Law of Demeter) 。 ʕ •ᴥ•ʔ：除了類別間的關係，也可以應用在 API 的設計。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"}]},{"title":"類別圖：影片製作大師（樣板方法模式）","slug":"Class-Diagram-Video-Maker-Template-Method-Pattern","date":"2020-08-03T14:24:05.000Z","updated":"2025-07-30T11:30:13.335Z","comments":true,"path":"2020/08/03/Class-Diagram-Video-Maker-Template-Method-Pattern/","permalink":"https://yncbearz.github.io/2020/08/03/Class-Diagram-Video-Maker-Template-Method-Pattern/","excerpt":"Class-Diagram-Video-Maker-Template-Method-Pattern","text":"Example: 影片製作大師 1234567891011121314151617181920212223242526272829303132333435363738394041424344@startuml Example-Video-Maker-Template-Method-Patternabstract class BasicVideo&#123; + make() # shoot() # upload() &#123;abstract&#125; # generateIdeas() &#123;abstract&#125; # editing()&#125;class UnboxVideo&#123; # generateIdeas() # editing()&#125;class TutorialVideo&#123; # generateIdeas() # editing()&#125;class StoryVideo&#123; # generateIdeas() # editing()&#125;BasicVideo &lt;|-- UnboxVideoBasicVideo &lt;|-- TutorialVideoBasicVideo &lt;|-- StoryVideoclass Program&#123; + makeUnboxVideo() + makeTurtorialVideo() + makeStoryVideo()&#125;Program -&gt; BasicVideo@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：影片製作大師（樣板方法模式）","slug":"Example-Video-Maker-Template-Method-Pattern","date":"2020-08-02T15:44:20.000Z","updated":"2025-05-30T08:15:23.240Z","comments":true,"path":"2020/08/02/Example-Video-Maker-Template-Method-Pattern/","permalink":"https://yncbearz.github.io/2020/08/02/Example-Video-Maker-Template-Method-Pattern/","excerpt":"Example-Video-Maker-Template-Method-Pattern","text":"Pattern: 樣板方法模式 Class Diagram: 影片製作大師 情境：以下是某攝影棚的影片製作方式 1234567891011121314151617181920212223&lt;?phpnamespace App\\TemplateMethodPattern\\Video;use App\\TemplateMethodPattern\\Video\\UnboxVideo;class Program&#123; public function makeUnboxVideo() &#123; return &#x27;選擇開箱項目、拍攝、剪輯出個人開箱的風格、上傳影片&#x27;; &#125; public function makeTutorialVideo() &#123; return &#x27;設計教學內容、拍攝、剪輯出個人教學的風格、上傳影片&#x27;; &#125; public function makeStoryVideo() &#123; return &#x27;選擇故事主題、拍攝、剪輯出個人說故事的風格、上傳影片&#x27;; &#125;&#125; 老闆覺得影片製作，有些相同的環節，希望我們開發程式解決，增加影片產生效率。 需求一：找出共同點，寫出樣板供大家使用 研究後發現，無論是哪種類型的影片，製作上大致可以歸類出四個步驟： 主題發想 影片拍攝 剪輯 上傳 由於公司影片大多於攝影棚拍攝，且上傳的平台相同，各個類型影片的差異，主要是在主題發想與剪輯。 我們以此為基礎，設計出樣板 1234567891011121314151617181920212223242526272829&lt;?phpnamespace App\\TemplateMethodPattern\\Video;abstract class BasicVideo&#123; public function make() &#123; return $this-&gt;generateIdeas() . &#x27;、&#x27; . $this-&gt;shoot() . &#x27;、&#x27; . $this-&gt;editing() . &#x27;、&#x27; . $this-&gt;upload(); &#125; protected function shoot() &#123; return &#x27;拍攝&#x27;; &#125; protected function upload() &#123; return &#x27;上傳影片&#x27;; &#125; abstract protected function generateIdeas(); abstract protected function editing();&#125; 在make()方法中，我們定義了一個影片產生的流程。 而拍攝與上傳是每種類型影片的共同行為，我們定義在shoot()方法及upload()方法中。 需求二：替各種類型的影片不同的部分作客製化 首先是開箱型影片 12345678910111213141516171819&lt;?phpnamespace App\\TemplateMethodPattern\\Video;use App\\TemplateMethodPattern\\Video\\BasicVideo;class UnboxVideo extends BasicVideo&#123; protected function generateIdeas() &#123; return &#x27;選擇開箱項目&#x27;; &#125; protected function editing() &#123; return &#x27;剪輯出個人開箱的風格&#x27;; &#125;&#125; 接著是教學型影片 12345678910111213141516171819&lt;?phpnamespace App\\TemplateMethodPattern\\Video;use App\\TemplateMethodPattern\\Video\\BasicVideo;class TutorialVideo extends BasicVideo&#123; protected function generateIdeas() &#123; return &#x27;設計教學內容&#x27;; &#125; protected function editing() &#123; return &#x27;剪輯出個人教學的風格&#x27;; &#125;&#125; 再來是故事型影片 12345678910111213141516171819&lt;?phpnamespace App\\TemplateMethodPattern\\Video;use App\\TemplateMethodPattern\\Video\\BasicVideo;class StoryVideo extends BasicVideo&#123; protected function generateIdeas() &#123; return &#x27;選擇故事主題&#x27;; &#125; protected function editing() &#123; return &#x27;剪輯出個人說故事的風格&#x27;; &#125;&#125; 最後修改原本的程式 123456789101112131415161718192021222324252627&lt;?phpnamespace App\\TemplateMethodPattern\\Video;use App\\TemplateMethodPattern\\Video\\UnboxVideo;class Program&#123; public function makeUnboxVideo() &#123; $unboxVideo = new UnboxVideo(); return $unboxVideo-&gt;make(); &#125; public function makeTutorialVideo() &#123; $tutorialVideo = new TutorialVideo(); return $tutorialVideo-&gt;make(); &#125; public function makeStoryVideo() &#123; $storyVideo = new StoryVideo(); return $storyVideo-&gt;make(); &#125;&#125; [單一職責原則]我們將製作影片的流程與製作影片的方式視作兩種不同的職責。 [開放封閉原則]除了流程之外，不同影片的類型也歸類到不同的子類，未來新增&#x2F;修改影片類型製作方式時，也不會互相影響。 [依賴反轉原則]客戶端的程式碼依賴抽象的父類基本影片。不同類型的影片類別實作抽象的父類基本影片。 ʕ •ᴥ•ʔ：一個簡單易懂的模式，背後隱藏了很多設計模式的原則。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"樣板方法模式","slug":"Template-Method-Pattern","date":"2020-08-02T10:26:46.000Z","updated":"2025-05-30T08:15:23.256Z","comments":true,"path":"2020/08/02/Template-Method-Pattern/","permalink":"https://yncbearz.github.io/2020/08/02/Template-Method-Pattern/","excerpt":"Template-Method-Pattern","text":"Template Method Pattern在一個方法中定義一個算法的骨架，而將一些步驟延遲到子類中。Example: 影片製作大師 樣板方法模式會將類別分為兩類：分別是抽象規則類 (Abstract Class) 與 實體算法類 (Concrete Class) 。 抽象規則類負責定義流程，實體算法類則關心細節如何實現。也可以增加鉤子 (hook)，使子類更加容易客製化。 優點：可以讓主流程中，相同的部分共用，不同的部分產生變化。 缺點：會使子類受限於骨架。 與其他模式的比較：[簡單工廠模式]：簡單工廠模式，是一個迷你的樣板方法模式，它只提出了建造類別這個步驟。 [策略模式]：策略模式，可以是樣板方法模式中的某個步驟。 以上兩個模式都可以與樣板方法模式協作良好。 當需要在同一套流程中，有部分細節需要個別實現時，很可能就是使用樣板方法模式的時機。 ʕ •ᴥ•ʔ：感覺大部分的情境中，樣板方法模式都不會只是單獨出現。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：機器人廚師（命令模式）","slug":"Class-Diagram-Robot-Chef-Command-Pattern","date":"2020-07-28T23:36:04.000Z","updated":"2025-07-30T11:30:13.219Z","comments":true,"path":"2020/07/29/Class-Diagram-Robot-Chef-Command-Pattern/","permalink":"https://yncbearz.github.io/2020/07/29/Class-Diagram-Robot-Chef-Command-Pattern/","excerpt":"Class-Diagram-Robot-Chef-Command-Pattern","text":"Example: 機器人廚師 1234567891011121314151617181920212223242526272829303132333435363738394041424344@startuml Example-Robot-Chef-Command-Patternabstract class Chef&#123; + cookFiletMignon() + cookSirloinSteak()&#125;Chef &lt;|-- RobotChefAChef &lt;|-- RobotChefBinterface Command&#123; + execute()&#125;class CookFiletMignonCommand&#123; # chef + execute()&#125;class CookSirloinSteakCommand&#123; # chef + execute()&#125;Command &lt;|.. CookFiletMignonCommandCommand &lt;|.. CookSirloinSteakCommandChef &lt;--- CookFiletMignonCommandChef &lt;--- CookSirloinSteakCommandClass Program&#123; + makeOrder()&#125;Program -&gt; Command@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：機器人廚師（命令模式）","slug":"Example-Robot-Chef-Command-Pattern","date":"2020-07-21T16:11:24.000Z","updated":"2025-05-30T08:15:23.237Z","comments":true,"path":"2020/07/22/Example-Robot-Chef-Command-Pattern/","permalink":"https://yncbearz.github.io/2020/07/22/Example-Robot-Chef-Command-Pattern/","excerpt":"Example-Robot-Chef-Command-Pattern","text":"Pattern: 命令模式 Class Diagram: 機器人廚師 情境：這是一間牛排館，會根據客戶的訂單出菜 123456789101112131415161718192021222324&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant;class Program&#123; /** * @param array $order * @return array */ public function makeOrder($order) &#123; $result = []; if (in_array(&#x27;Filet Mignon&#x27;, $order)) &#123; $result[] = &#x27;菲力牛排&#x27;; &#125; if (in_array(&#x27;Sirloin Steak&#x27;, $order)) &#123; $result[] = &#x27;沙朗牛排&#x27;; &#125; return $result; &#125;&#125; 隨著生日蒸蒸日上，老闆已經沒辦法同時處理客人點餐與煎牛排了（這是兩種職責）。 決定引進我們販賣的機器人廚師，讓他能專心在記下客人的需求。 需求一：老闆決定到外場服務，透過指令指揮內場的機器人廚師煎牛排 首先是機器人廚師的程式碼 12345678910111213141516171819202122&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant\\Receiver;abstract class Chef&#123; /** * @return string */ public function cookFiletMignon() &#123; return &#x27;菲力牛排&#x27;; &#125; /** * @return string */ public function cookSirloinSteak() &#123; return &#x27;沙朗牛排&#x27;; &#125;&#125; 12345678910&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant\\Receiver;use App\\CommandPattern\\WesternRestaurant\\Receiver\\Chef;class RobotChefA extends Chef&#123;&#125; 12345678910&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant\\Receiver;use App\\CommandPattern\\WesternRestaurant\\Receiver\\Chef;class RobotChefB extends Chef&#123;&#125; 再定義出命令介面 12345678&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant\\Contracts;interface Command&#123; public function execute();&#125; 需要的指令：煎菲力牛排、煎沙朗牛排 123456789101112131415161718192021222324252627&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant;use App\\CommandPattern\\WesternRestaurant\\Contracts\\Command;use App\\CommandPattern\\WesternRestaurant\\Receiver\\Chef;class CookFiletMignonCommand implements Command&#123; /** * @var Chef */ protected $chef; public function __construct(Chef $chef) &#123; $this-&gt;chef = $chef; &#125; /** * @return string */ public function execute() &#123; return $this-&gt;chef-&gt;cookFiletMignon(); &#125;&#125; 123456789101112131415161718192021222324252627&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant;use App\\CommandPattern\\WesternRestaurant\\Contracts\\Command;use App\\CommandPattern\\WesternRestaurant\\Receiver\\Chef;class CookSirloinSteakCommand implements Command&#123; /** * @param Chef */ protected $chef; public function __construct(Chef $chef) &#123; $this-&gt;chef = $chef; &#125; /** * @return string */ public function execute() &#123; return $this-&gt;chef-&gt;cookSirloinSteak(); &#125;&#125; 最後修改原本牛排館的程式 123456789101112131415161718192021222324252627282930313233&lt;?phpnamespace App\\CommandPattern\\WesternRestaurant;use App\\CommandPattern\\WesternRestaurant\\Receiver\\RobotChefA;use App\\CommandPattern\\WesternRestaurant\\Receiver\\RobotChefB;class Program&#123; /** * @param array $order * @return array */ public function makeOrder($order) &#123; $chefA = new RobotChefA(); $chefB = new RobotChefB(); $cookFiletMignonCommand = new cookFiletMignonCommand($chefA); $cookSirloinSteakCommand = new CookSirloinSteakCommand($chefB); $result = []; if (in_array(&#x27;Filet Mignon&#x27;, $order)) &#123; $result[] = $cookFiletMignonCommand-&gt;execute(); &#125; if (in_array(&#x27;Sirloin Steak&#x27;, $order)) &#123; $result[] = $cookSirloinSteakCommand-&gt;execute(); &#125; return $result; &#125;&#125; [角色對應關係]調用者 (Invoker) ：老闆接收者 (Receiver) ：機器人廚師命令 (Command) ：煎牛排指令 [單一職責原則]我們將點餐與煎牛排視作兩種不同的職責。透過命令來聯繫兩者。 [開放封閉原則]當新增&#x2F;修改需求時，不會動到所有程式碼。（比如：外場老闆不會知道烹調方式的改變、機器人不會知道當前餐廳的優惠） [依賴反轉原則]調用者依賴抽象的命令介面。命令實作抽象的命令介面。 此外命令模式還可以留下點餐紀錄，便於將來結帳、重做餐點呢。 ʕ •ᴥ•ʔ：使用命令模式的老闆，也隱含「人力」資源管理的味道。（指定誰做什麼餐點）","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"命令模式","slug":"Command-Pattern","date":"2020-07-20T00:44:01.000Z","updated":"2025-05-30T08:15:23.227Z","comments":true,"path":"2020/07/20/Command-Pattern/","permalink":"https://yncbearz.github.io/2020/07/20/Command-Pattern/","excerpt":"Command-Pattern","text":"Command Pattern將請求封裝成對象，以便使用不同的請求來進行參數化。命令模式也支持隊列、日誌及可撤銷的操作。Example: 機器人廚師 命令模式會將類別分成三類：分別是 調用者 (Invoker) 、 接收者 (Receiver) 及 命令 (Command) 。 優點：容易滿足開放封閉原則（需要時新增命令即可）。若有需要，可將命令記錄至日誌中，便於重做 (redo) 及撤消 (undo)。允許接收者決定是否否決請求。 缺點：會做出許多小類別。 與其他模式的比較：[策略模式]：以四則運算來比喻的話，策略模式像是算法族中，有加減乘除四種算法；而命令模式則像是一段計算過程：加三、減五、乘二。每個運算都是一道命令。 ʕ •ᴥ•ʔ：透過將命令切分成類別，解耦了**調用者（命令請求者）與接收者（命令執行者）**的依賴關係。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：資料庫連線（單例模式）","slug":"Class-Diagram-DB-Connection-Singleton-Pattern","date":"2020-07-19T10:21:04.000Z","updated":"2025-07-30T11:30:13.155Z","comments":true,"path":"2020/07/19/Class-Diagram-DB-Connection-Singleton-Pattern/","permalink":"https://yncbearz.github.io/2020/07/19/Class-Diagram-DB-Connection-Singleton-Pattern/","excerpt":"Class-Diagram-DB-Connection-Singleton-Pattern","text":"Example: 資料庫連線 123456789101112131415161718192021@startuml Example-DB-Connection-Singleton-Patternclass Program&#123; + getDBConnection()&#125;class DBConnection&#123; - instance - __construct() - __clone() - __wakeup() + getInstance()&#125;Program -&gt; DBConnection@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：資料庫連線（單例模式）","slug":"Example-DB-Connection-Singleton-Pattern","date":"2020-07-16T15:07:01.000Z","updated":"2025-05-30T08:15:23.235Z","comments":true,"path":"2020/07/16/Example-DB-Connection-Singleton-Pattern/","permalink":"https://yncbearz.github.io/2020/07/16/Example-DB-Connection-Singleton-Pattern/","excerpt":"Example-DB-Connection-Singleton-Pattern","text":"Pattern: 單例模式 Class Diagram: 資料庫連線 需求一：客戶想要能與資料庫連線的類別 1234567891011&lt;?phpnamespace App\\SingletonPattern\\DBConnection;class DBConnection&#123; public function __construct() &#123; &#125;&#125; 123456789101112131415&lt;?phpnamespace App\\SingletonPattern\\DBConnection;class Program&#123; /** * @return DBConnection */ public function getDBConnection() &#123; return new DBConnection(); &#125;&#125; 需求二：客戶說希望能修改成只建立唯一的連線。 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?phpnamespace App\\SingletonPattern\\DBConnection;class DBConnection&#123; private static $instance = null; /** * 僅有私有的建構函式，讓外界僅能以 getInstance() 呼叫 */ private function __construct() &#123; &#125; /** * 避免克隆後，生成兩個實例 */ private function __clone() &#123; &#125; /** * 避免反序列化後，生成兩個實例 */ private function __wakeup() &#123; &#125; /** * 透過公開的靜態方法取得實例 * * @return DBConnection */ public static function getInstance() &#123; if (static::$instance === null) &#123; static::$instance = new self(); &#125; return self::$instance; &#125;&#125; 123456789101112131415&lt;?phpnamespace App\\SingletonPattern\\DBConnection;class Program&#123; /** * @return DBConnection */ public function getDBConnection() &#123; return DBConnection::getInstance(); &#125;&#125; 在這裡我們一共用了兩個技巧： 透過公開的靜態方法，呼叫私有的建構函式，來保證 DBConnection 的唯一。 在 getInstance() 中，我們會判斷 $instance 是否為 null，才決定是否實例化，為單例模式中Lazy Initialization的形式。 單例模式還有以下其他形式（處理多線程）： Eager Initialization （類別 $instance 一開始就建立，PHP 貌似不支援） Synchronized（同步方法） Double-Checked Locking（雙重檢查加鎖） 在 PHP 中，web 環境的每一個 request 都是獨立的線程，而 cli 環境，則需裝 pthreads 才能實現多線程。 因為 PHP 鮮少使用多線程，算是巧妙地閃躲了單例模式的使用問題。將來有機會會以其他程式語言，再次撰寫相關範例。 ʕ •ᴥ•ʔ：看似簡單，背後卻有許多細節的反模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"單例模式","slug":"Singleton-Pattern","date":"2020-07-15T14:58:04.000Z","updated":"2025-05-30T08:15:23.254Z","comments":true,"path":"2020/07/15/Singleton-Pattern/","permalink":"https://yncbearz.github.io/2020/07/15/Singleton-Pattern/","excerpt":"Singleton-Pattern","text":"Singleton Pattern確保一個類只有一個實例，並提供一個全局訪問點。Example: 資料庫連線 單例模式只會將類別分為一類，即 單例類別 (Singleton) 。 單例類別會管理實例的產生，並提供存取實例的方法。 優點：可以確保類別只有一個實例。可以提供全局訪問點。 缺點：違反單一職責原則。實現單例時，須考慮多線程問題。因其特殊性，單例模式不容易作測試。 與全域變數的比較：單例模式可以嚴格地控制客戶如何存取它及何時使用它，並且具有狀態（可在執行時發生改變）。 ʕ •ᴥ•ʔ：單例模式常被視為一種反模式 (anti-pattern)。很可能是設計模式中，唯一一個違反單一職責原則。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：漢堡點餐系統（裝飾者模式）","slug":"Class-Diagram-Burgers-Ordering-System-Decorator-Pattern","date":"2020-07-13T00:12:02.000Z","updated":"2025-07-30T11:30:13.114Z","comments":true,"path":"2020/07/13/Class-Diagram-Burgers-Ordering-System-Decorator-Pattern/","permalink":"https://yncbearz.github.io/2020/07/13/Class-Diagram-Burgers-Ordering-System-Decorator-Pattern/","excerpt":"Class-Diagram-Burgers-Ordering-System-Decorator-Pattern","text":"Example: 漢堡點餐系統 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748@startuml Example-Burgers-Ordering-System-Decorator-Patterninterface Food&#123; + getDescription()&#125;abstract class Burger&#123; # name + getDescription()&#125;abstract class Ingredient&#123; # name # food + getDescription() + customized() # changeDefaultIfDemanded() - getIngredientName()&#125;class Program&#123; # demand + makeBigMac() - getBurgerDescription() - subLastPunctuation()&#125;Program -&gt; FoodFood &lt;|.. BurgerBurger &lt;|-- BigMacFood &lt;|.. IngredientIngredient o-- FoodIngredient &lt;|-- BreadIngredient &lt;|-- BeefIngredient &lt;|-- CheeseIngredient &lt;|-- LettuceIngredient &lt;|-- PickleIngredient &lt;|-- Salad@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：漢堡點餐系統（裝飾者模式）","slug":"Example-Burgers-Ordering-System-Decorator-Pattern","date":"2020-07-11T16:16:22.000Z","updated":"2025-05-30T08:15:23.232Z","comments":true,"path":"2020/07/12/Example-Burgers-Ordering-System-Decorator-Pattern/","permalink":"https://yncbearz.github.io/2020/07/12/Example-Burgers-Ordering-System-Decorator-Pattern/","excerpt":"Example:Burgers Ordering System (Decorator Pattern)","text":"Pattern: 裝飾者模式 Class Diagram: 漢堡點餐系統 需求一：客戶想要一個漢堡點餐系統 12345678910111213141516&lt;?phpnamespace App\\DecoratorPattern\\Burger;class Program&#123; public function makeBigMac() &#123; return &#x27;大麥克：麵包、牛肉、生菜、沙拉、麵包、牛肉、起司、生菜、沙拉、麵包&#x27;; &#125; public function makeDoubleCheeseBurger() &#123; return &#x27;雙層牛肉吉事堡：麵包、酸菜、起司、牛肉、起司、牛肉、麵包&#x27;; &#125;&#125; 需求二：客戶想要點餐能夠客製化 (比如說：兩倍起司) 我們決定先嘗試實作大麥克的客製化 12345678910111213141516171819202122232425&lt;?phpnamespace App\\DecoratorPattern\\Burger;class Program&#123; protected $cheese = &#x27;normal&#x27;; /** * @param array $demand */ public function customize($demand) &#123; $this-&gt;cheese = $demand[&#x27;cheese&#x27;]; &#125; public function makeBigMac() &#123; if ($this-&gt;cheese == &#x27;double&#x27;) &#123; return &#x27;大麥克：麵包、牛肉、生菜、沙拉、麵包、牛肉、兩倍起司、生菜、沙拉、麵包&#x27;; &#125; return &#x27;大麥克：麵包、牛肉、生菜、沙拉、麵包、牛肉、起司、生菜、沙拉、麵包&#x27;; &#125;&#125; 在完成後，卻發現了一些問題： 每當有配料客製化需求時，我們必須改變大麥克的實作，違反開放封閉原則。 不同的漢堡種類，客製化的過程會違反 DRY 原則。 新增漢堡種類時，我們可能要實作目前所有客製化的選項。 藉由以上幾點，我們知道漢堡的實作與配料客製化是兩個不同的職責。我們試著改用裝飾者模式實作。 首先定義食物介面 12345678&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Contracts;interface Food&#123; public function getDescription();&#125; 接著定義抽象的漢堡類別，並實作食物介面 12345678910111213141516&lt;?phpnamespace App\\DecoratorPattern\\Burger\\ConcreteComponent;use App\\DecoratorPattern\\Burger\\Contracts\\Food;abstract class Burger implements Food&#123; protected $name = &#x27;未知品項&#x27;; public function getDescription() &#123; return $this-&gt;name . &#x27;：&#x27;; &#125;&#125; 實作大麥克漢堡 1234567891011&lt;?phpnamespace App\\DecoratorPattern\\Burger\\ConcreteComponent;use App\\DecoratorPattern\\Burger\\ConcreteComponent\\Burger;class BigMac extends Burger&#123; protected $name = &#x27;大麥克&#x27;;&#125; 漢堡在裝飾者模式中屬於裝飾物件類別，也就是被裝飾者。 接著定義配料的抽象類別，也實作食物介面 1234567891011121314151617181920212223242526&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Contracts\\Food;abstract class Ingredient implements Food&#123; /** * @var Food */ protected $food; protected $name = &#x27;未知配料&#x27;; public function __construct(Food $food) &#123; $this-&gt;food = $food; &#125; public function getDescription() &#123; return $this-&gt;food-&gt;getDescription() . $this-&gt;name . &#x27;、&#x27;; &#125;&#125; 注意：Food包括漢堡類（被裝飾者）和配料類（裝飾者）。 而這邊__construct()與getDescription()方法的實作，晚點會透過它們來實現裝飾。 接著實作各式配料 12345678910&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Bread extends Ingredient&#123; protected $name = &#x27;麵包&#x27;;&#125; 12345678910&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Beef extends Ingredient&#123; protected $name = &#x27;牛肉&#x27;;&#125; 1234567891011&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Lettuce extends Ingredient&#123; protected $name = &#x27;生菜&#x27;;&#125; 12345678910&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Salad extends Ingredient&#123; protected $name = &#x27;沙拉&#x27;;&#125; 12345678910&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Cheese extends Ingredient&#123; protected $name = &#x27;起司&#x27;;&#125; 配料在裝飾者模式中屬於裝飾者類別，也就是裝飾者。 準備工作就緒，讓我們來做一個大麥克吧 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?phpnamespace App\\DecoratorPattern\\Burger;use App\\DecoratorPattern\\Burger\\ConcreteComponent\\BigMac;use App\\DecoratorPattern\\Burger\\Decorator\\Bread;use App\\DecoratorPattern\\Burger\\Decorator\\Beef;use App\\DecoratorPattern\\Burger\\Decorator\\Lettuce;use App\\DecoratorPattern\\Burger\\Decorator\\Cheese;use App\\DecoratorPattern\\Burger\\Decorator\\Salad;use App\\DecoratorPattern\\Burger\\Decorator\\Pickle;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Program&#123; public function makeBigMac() &#123; $bigMac = new BigMac(); $topBread = new Bread($bigMac); $firstBeef = new Beef($topBread); $firstLettuce = new Lettuce($firstBeef); $firstSalad = new Salad($firstLettuce); $middleBread = new Bread($firstSalad); $secondBeef = new Beef($middleBread); $cheese = new Cheese($secondBeef); $secondLettuce = new Lettuce($cheese); $secondSalad = new Salad($secondLettuce); $bottomBread = new Bread($secondSalad); // 大麥克：麵包、牛肉、生菜、沙拉、麵包、牛肉、起司、生菜、沙拉、麵包 return $this-&gt;getBurgerDescription($bottomBread); &#125; /** * @param Ingredient $burger * @return string */ private function getBurgerDescription(Ingredient $burger) &#123; $result = $burger-&gt;getDescription(); return $this-&gt;subLastPunctuation($result); &#125; /** * 去除最後一個標點符號 * * @param string $string * @return string */ private function subLastPunctuation($string) &#123; return mb_substr($string, 0, mb_strlen($string, &#x27;UTF-8&#x27;) - 1, &#x27;UTF-8&#x27;); &#125;&#125; 有用subLastPunctuation方法作文字修飾，可忽略。 透過Ingredient抽象類別的**__construct()包裝先前的類**，當我們使用getDescription()時便能夠一層一層地往內部呼叫，直到所有類別都被呼叫後，才動態產生所需的結果。 讓我們回到需求二：兩倍起司的客製化需求 我們先來改寫Ingredient抽象類別新增customize()與changeDefaultIfDemanded()來作客製化的需求 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Contracts\\Food;use ReflectionClass;abstract class Ingredient implements Food&#123; /** * @var Food */ protected $food; protected $name = &#x27;未知配料&#x27;; public function __construct(Food $food) &#123; $this-&gt;food = $food; &#125; public function getDescription() &#123; return $this-&gt;food-&gt;getDescription() . $this-&gt;name . &#x27;、&#x27;; &#125; /** * 讓最後一個裝飾者客製化自己外，也能客製化先前的裝飾者 * * @param array $demand * @return food */ public function customize($demand) &#123; $this-&gt;changeDefaultIfDemanded($demand); if ($this-&gt;food instanceof Ingredient) &#123; $this-&gt;food-&gt;customize($demand); &#125; return $this; &#125; /** * 我們會利用該配料名稱，當作客製化的設定 * * @param array $demand */ protected function changeDefaultIfDemanded($demand) &#123; $ingredientName = $this-&gt;getIngredientName(); if (isset($demand[$ingredientName])) &#123; $this-&gt;$ingredientName = $demand[$ingredientName]; &#125; &#125; /** * @return string */ private function getIngredientName() &#123; $reflectionClass = new ReflectionClass($this); return strtolower($reflectionClass-&gt;getShortName()); &#125;&#125; 注意：Food包括漢堡類（被裝飾者）和配料類（裝飾者）。customize()方法遇到Food為配料時，會往內部呼叫，直到所有配料都被呼叫。 changeDefaultIfDemanded()，可理解成demand有提到的配料才會作客製化，可忽略。 接著改寫 Cheese 類別 12345678910111213141516171819202122&lt;?phpnamespace App\\DecoratorPattern\\Burger\\Decorator;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Cheese extends Ingredient&#123; protected $name = &#x27;起司&#x27;; protected $cheese = &#x27;normal&#x27;; public function getDescription() &#123; if ($this-&gt;cheese == &#x27;double&#x27;) &#123; return $this-&gt;food-&gt;getDescription() . &#x27;兩倍&#x27; . $this-&gt;name . &#x27;、&#x27;; &#125; return parent::getDescription(); &#125;&#125; 最後改寫 Program 的實作 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;?phpnamespace App\\DecoratorPattern\\Burger;use App\\DecoratorPattern\\Burger\\ConcreteComponent\\BigMac;use App\\DecoratorPattern\\Burger\\Decorator\\Bread;use App\\DecoratorPattern\\Burger\\Decorator\\Beef;use App\\DecoratorPattern\\Burger\\Decorator\\Lettuce;use App\\DecoratorPattern\\Burger\\Decorator\\Cheese;use App\\DecoratorPattern\\Burger\\Decorator\\Salad;use App\\DecoratorPattern\\Burger\\Decorator\\Pickle;use App\\DecoratorPattern\\Burger\\Decorator\\Ingredient;class Program&#123; /** * @var array */ protected $demand = []; /** * @param array $demand */ public function setDemand($demand) &#123; $this-&gt;demand = $demand; &#125; /** * @return string */ public function makeBigMac() &#123; $bigMac = new BigMac(); $topBread = new Bread($bigMac); $firstBeef = new Beef($topBread); $firstLettuce = new Lettuce($firstBeef); $firstSalad = new Salad($firstLettuce); $middleBread = new Bread($firstSalad); $secondBeef = new Beef($middleBread); $cheese = new Cheese($secondBeef); $secondLettuce = new Lettuce($cheese); $secondSalad = new Salad($secondLettuce); $bottomBread = new Bread($secondSalad); return $this-&gt;getBurgerDescription($bottomBread); &#125; /** * 去除最後一個標點符號 * * @param string $string * @return string */ private function subLastPunctuation($string) &#123; return mb_substr($string, 0, mb_strlen($string, &#x27;UTF-8&#x27;) - 1, &#x27;UTF-8&#x27;); &#125; /** * @param Ingredient $ingredient * @return string */ private function getBurgerDescription(Ingredient $ingredient) &#123; $result = $ingredient-&gt;customize($this-&gt;demand)-&gt;getDescription(); return $this-&gt;subLastPunctuation($result); &#125;&#125; \b[單一職責原則]我們將漢堡的實作與配料客製化視作兩種不同的職責。 [開放封閉原則]無論是新增漢堡種類、新增配料或客製化，我們都能夠僅改到小部分的程式碼。 [裡氏替換原則]遇到客製化需求時，我們可能會改寫配料中的getDescription()方法。 [介面隔離原則]食物介面 - 使每個食物能透過getDescription()方法組裝。漢堡抽象類別 - 被裝飾者，主要是為了與配料類（裝飾者）職責切割。配料抽象類別 - 裝飾者，擁有一些客製化的方法。 [依賴反轉原則]許多方法都依賴在食物介面、漢堡抽象類別、配料抽象類別。 ʕ •ᴥ•ʔ：這個Example有作testing ，被我refactor無數次，是目前為止最喜歡的範例！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"裝飾者模式","slug":"Decorator-Pattern","date":"2020-07-11T16:14:24.000Z","updated":"2025-05-30T08:15:23.229Z","comments":true,"path":"2020/07/12/Decorator-Pattern/","permalink":"https://yncbearz.github.io/2020/07/12/Decorator-Pattern/","excerpt":"Decorator-Pattern","text":"Decorator Pattern動態地將責任附加到對象上。若要擴展功能，裝飾者提供了比繼承更有彈性的替代方案。Example: 漢堡點餐系統 裝飾者模式會將類別分為兩類：分別是 裝飾物件類別 (ConcreteComponent) 與 裝飾者類別 (Decorator) 。 其中裝飾物件與裝飾者會實現相同的接口。 在裝飾物件類別不知道裝飾者的情況下，我們會在產生對象時，動態地將其一個個裝飾上去。 一般會透過建構函式來包裝先前的裝飾者。便於理解，裝飾物件即被裝飾者。 優點：當需要動態reuse寫好的類別方法時，裝飾者模式提供了用組合取代繼承的解決方案。（一種wrapping的委託技術） 職責切分明確，裝飾者類別僅需完成自己的方法，由客戶端決定執行順序。 缺點：程式碼複雜度提高。當方法不依賴執行順序時，無法用裝飾者模式實作。 與其他模式的比較：[策略模式]：以卡牌遊戲比喻的話，策略模式是決定要出哪張怪獸卡，而裝飾者模式則是在原有的怪獸卡上，加上裝備卡。 ʕ •ᴥ•ʔ：裝飾者模式專注在對象上，也就更能客製化需求。（動態產生對象，而不是子類）","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：收銀機（策略模式)","slug":"Class-Diagram-Cash-Register-Strategy-Pattern","date":"2020-07-06T14:38:50.000Z","updated":"2025-07-30T11:30:13.149Z","comments":true,"path":"2020/07/06/Class-Diagram-Cash-Register-Strategy-Pattern/","permalink":"https://yncbearz.github.io/2020/07/06/Class-Diagram-Cash-Register-Strategy-Pattern/","excerpt":"Class-Diagram-Cash-Register-Strategy-Pattern","text":"Example: 收銀機 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465@startuml Example-Cash-Register-Strategy-Patternclass Program&#123; - CashContext cashContent + pay() + getReceipt()&#125;class CashContext&#123; - Payable discountMethod - Receiptable receipt - resolveDiscountMethod() - resolveReceiptType() + pay() + getReceipt()&#125;interface Payable&#123; + pay()&#125;class NormalPay&#123; + pay()&#125;class OffPercentPay&#123; + pay()&#125;class FeedBackPay&#123; + pay()&#125;interface Receiptable&#123; + getReceipt()&#125;class ElectronicReceipt&#123; + getReceipt()&#125;class NormalReceipt&#123; + getReceipt()&#125;Payable &lt;|.. NormalPayPayable &lt;|.. OffPercentPayPayable &lt;|.. FeedBackPayReceiptable &lt;|.. ElectronicReceiptReceiptable &lt;|.. NormalReceiptProgram -&gt; CashContextCashContext o-- PayableCashContext o-- Receiptable 注意 Program 跟 CashContext 的方法名只是恰好與 Payable &amp; Receiptable 中相同。 為了易於理解，並未列出所有細節。 ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"範例：收銀機 （策略模式)","slug":"Example-Cash-Register-Strategy-Pattern","date":"2020-07-05T13:22:32.000Z","updated":"2025-05-30T08:15:23.234Z","comments":true,"path":"2020/07/05/Example-Cash-Register-Strategy-Pattern/","permalink":"https://yncbearz.github.io/2020/07/05/Example-Cash-Register-Strategy-Pattern/","excerpt":"Example-Cash-Register-Strategy-Pattern","text":"Pattern: 策略模式 Class Diagram: 收銀機 需求一：客戶想要一台收銀機 12345678910111213141516171819202122&lt;?phpnamespace App\\StrategyPattern\\CashRegister;class Program&#123; /** * @var int */ private $originalPrice; public function __construct($originalPrice) &#123; $this-&gt;originalPrice = $originalPrice; &#125; public function pay() &#123; return $this-&gt;originalPrice; &#125;&#125; 需求二：客戶想要有一個優惠活動 (打8折) 12345678910111213141516171819202122232425262728293031&lt;?phpnamespace App\\StrategyPattern\\CashRegister;class Program&#123; /** * @var int */ private $originalPrice; /** * @var string */ private $promotion; public function __construct($originalPrice, $promotion) &#123; $this-&gt;originalPrice = $originalPrice; $this-&gt;promotion = $promotion; &#125; public function pay() &#123; if ($this-&gt;promotion == &#x27;20% off&#x27;) &#123; return $this-&gt;originalPrice * 0.8; &#125; return $this-&gt;originalPrice; &#125;&#125; 需求三：客戶想要有另一個優惠 (買300回饋100) 身為工程師的我們，二話不說加上了這個功能 12345678910111213141516public function pay()&#123; $originalPrice = $this-&gt;originalPrice; if ($this-&gt;promotion == &#x27;20% off&#x27;) &#123; return $originalPrice * 0.8; &#125; if ($this-&gt;promotion == &#x27;spend_300_feedback_100&#x27;) &#123; if ($originalPrice &gt;= 300) &#123; return $originalPrice - floor($originalPrice / 300) * 100; &#125; &#125; return $originalPrice;&#125; 這時候功能是完成了，但有沒有覺得哪裡怪怪的？欸嘿，我們想到之前學過的簡單工廠模式。 可以實作三個類別，分別是正常付費、8折付費、買300回饋100。讓我們利用簡單工廠改造它。 首先定義付錢介面 12345678&lt;?phpnamespace App\\StrategyPattern\\CashRegister\\Contracts;interface Payable&#123; public function pay();&#125; 實作正常付費類別 1234567891011121314151617181920212223&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\Contracts\\Payable;class NormalPay implements Payable&#123; /** * @var int */ private $originalPrice; public function __construct($originalPrice) &#123; $this-&gt;originalPrice = $originalPrice; &#125; public function pay() &#123; return $this-&gt;originalPrice; &#125;&#125; 實作打折付費類別 1234567891011121314151617181920212223242526272829&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\Contracts\\Payable;class OffPercentPay implements Payable&#123; /** * @var int */ private $originalPrice; /** * @var double */ private $offPercent; public function __construct($originalPrice, $offPercent) &#123; $this-&gt;originalPrice = $originalPrice; $this-&gt;offPercent = $offPercent; &#125; public function pay() &#123; return $this-&gt;originalPrice * (1 - $this-&gt;offPercent); &#125;&#125; 實作買多少回饋多少類別 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\Contracts\\Payable;class FeedbackPay implements Payable&#123; /** * @var int */ private $originalPrice; /** * @var int */ private $priceCondition; /** * @var int */ private $feedback; public function __construct($originalPrice, $priceCondition, $feedback) &#123; $this-&gt;originalPrice = $originalPrice; $this-&gt;priceCondition = $priceCondition; $this-&gt;feedback = $feedback; &#125; public function pay() &#123; $originalPrice = $this-&gt;originalPrice; $priceCondition = $this-&gt;priceCondition; $feedback = $this-&gt;feedback; if ($originalPrice &gt;= $priceCondition) &#123; return $originalPrice - floor($originalPrice / $priceCondition) * $feedback; &#125; return $originalPrice; &#125;&#125; 最後原本程式再搭配工廠即可完成。 (下略) 正當我們洋洋得意的時候，客戶送來第四個需求… 需求四：客戶希望收銀機可以開一般發票或電子發票 不是啊，客戶你要這種發票類型的需求你要先說.. (碎念) 按照簡單工廠模式的思維，我們必須為這個需求做出6個類別，分別是 **（正常付費、打折付費、買多少回饋多少）x（一般發票、電子發票）**的排列組合。 不行不行，假設客戶將來又提出要開統編的需求，我們就要寫8個類別了。 而且這樣也違反開放封閉原則。每次有新需求都會改動所有的程式碼。 在我們研究一下後，發現了一個適合的設計模式：策略模式 我們首先製作一個消費明細類別，它擁有所有的優惠方式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\OffPercentPay;use App\\StrategyPattern\\CashRegister\\FeedbackPay;use App\\StrategyPattern\\CashRegister\\NormalPay;use App\\StrategyPattern\\CashRegister\\Contracts\\Payable;class CashContext&#123; /** * @var Payable */ private $discountMethod; /** * @param int $originalPrice * @param string $discountType */ public function __construct($originalPrice, $discountType) &#123; $this-&gt;resolveDiscountMethod($originalPrice, $discountType); &#125; /** * @param int $originalPrice * @param string $discountType */ private function resolveDiscountMethod($originalPrice, $discountType) &#123; switch ($discountType) &#123; case &#x27;20% off&#x27;: $this-&gt;discountMethod = new OffPercentPay($originalPrice, 0.2); break; case &#x27;spend_300_feedback_100&#x27;: $this-&gt;discountMethod = new FeedbackPay($originalPrice, 300, 100); break; default: $this-&gt;discountMethod = new NormalPay($originalPrice); break; &#125; &#125; public function pay() &#123; return $this-&gt;discountMethod-&gt;pay(); &#125;&#125; 再來修改Program，讓它呼叫消費明細物件 123456789101112131415161718192021222324252627&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\CashContext;class Program&#123; /** * @var CashContext */ private $cashContext; /** * @param int $originalPrice * @param string $discountType */ public function __construct($originalPrice, $discountType) &#123; $this-&gt;cashContext = new CashContext($originalPrice, $discountType); &#125; public function pay() &#123; return $this-&gt;cashContext-&gt;pay(); &#125;&#125; 這樣好像還看不出來有什麼好處，我們繼續實作。 定義發票介面 12345678&lt;?phpnamespace App\\StrategyPattern\\CashRegister\\Contracts;interface Receiptable&#123; public function getReceipt();&#125; 實作一般發票 12345678910111213&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\Contracts\\Receiptable;class NormalReceipt implements Receiptable&#123; public function getReceipt() &#123; return &#x27;一般發票&#x27;; &#125;&#125; 實作電子發票 12345678910111213&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\Contracts\\Receiptable;class ElectronicReceipt implements Receiptable&#123; public function getReceipt() &#123; return &#x27;電子發票&#x27;; &#125;&#125; 修改消費明細類別 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\NormalPay;use App\\StrategyPattern\\CashRegister\\NormalReceipt;use App\\StrategyPattern\\CashRegister\\Contracts\\Payable;use App\\StrategyPattern\\CashRegister\\ElectronicReceipt;use App\\StrategyPattern\\CashRegister\\Contracts\\Receiptable;class CashContext&#123; /** * @var Payable */ private $discountMethod; /** * @var Receiptable */ private $receipt; /** * @param int $originalPrice * @param string $discountType * @param string $receiptType */ public function __construct($originalPrice, $discountType, $receiptType) &#123; $this-&gt;resolveDiscountMethod($originalPrice, $discountType); $this-&gt;resolveReceiptType($receiptType); &#125; /** * @param int $originalPrice * @param string $discountType */ private function resolveDiscountMethod($originalPrice, $discountType) &#123; switch ($discountType) &#123; case &#x27;20% off&#x27;: $this-&gt;discountMethod = new OffPercentPay($originalPrice, 0.2); break; case &#x27;spend_300_feedback_100&#x27;: $this-&gt;discountMethod = new FeedbackPay($originalPrice, 300, 100); break; default: $this-&gt;discountMethod = new NormalPay($originalPrice); break; &#125; &#125; /** * @param string $receiptType */ private function resolveReceiptType($receiptType) &#123; switch ($receiptType) &#123; case &#x27;electronicReceipt&#x27;: $this-&gt;receipt = new ElectronicReceipt(); break; default: $this-&gt;receipt = new NormalReceipt(); break; &#125; &#125; public function pay() &#123; return $this-&gt;discountMethod-&gt;pay(); &#125; public function getReceipt() &#123; return $this-&gt;receipt-&gt;getReceipt(); &#125;&#125; 最後修改原本的Program 12345678910111213141516171819202122232425262728293031323334&lt;?phpnamespace App\\StrategyPattern\\CashRegister;use App\\StrategyPattern\\CashRegister\\CashContext;class Program&#123; /** * @var CashContext */ private $cashContext; /** * @param int $originalPrice * @param string $discountType * @param string $receiptType */ public function __construct($originalPrice, $discountType, $receiptType) &#123; $this-&gt;cashContext = new CashContext($originalPrice, $discountType, $receiptType); &#125; public function pay() &#123; return $this-&gt;cashContext-&gt;pay(); &#125; public function getReceipt() &#123; return $this-&gt;cashContext-&gt;getReceipt(); &#125;&#125; [單一職責原則]將類別本身職責跟算法族的職責分離，就是策略模式的精神！ [開放封閉原則]這下子，我們終於不會在客戶提出一個新需求時，影響到全部的既有程式碼了。 [介面隔離原則]定義出付錢介面與發票介面，讓兩者不會互相影響。可以交由各自的算法族，分別實現。 [依賴反轉原則]消費明細類別依賴抽象的付錢介面與發票介面。不同的算法族，實現對應的抽象介面。 ʕ •ᴥ•ʔ：使用策略模式，我們依然會做出許多小類別（算法族&#x2F;算法），但因為切分的更細，也就更能因應需求去做變化。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"策略模式","slug":"Strategy-Pattern","date":"2020-07-05T13:02:46.000Z","updated":"2025-05-30T08:15:23.255Z","comments":true,"path":"2020/07/05/Strategy-Pattern/","permalink":"https://yncbearz.github.io/2020/07/05/Strategy-Pattern/","excerpt":"Strategy-Pattern","text":"Strategy Pattern定義算法族，分別封裝，讓彼此之間能互相替換，使算法變化獨立。Example: 收銀機 策略模式只會將類別分為一類，即 算法族類別 (Algorithm) 。 同一算法族類別會實作相同介面，便於替換。 優點：將物件本身的職責與算法的職責分離。新增&#x2F;修改算法時，不會影響既有程式碼。具體算法組合交給客戶端，能在執行時才被決定。 缺點：會做出許多小類別。 與其他模式的比較：[簡單工廠模式]：在簡單工廠模式中，各個物件都已定義好其中的方法，而策略模式的精神則是執行時組合不同的演算法。 當需要在不同時間應用不同的業務規則時，很可能就是使用策略模式的時機。 ʕ •ᴥ•ʔ：將職責切分至算法族的層級，就是策略模式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"類別圖：計算機（簡單工廠模式）","slug":"Class-Diagram-Calculator-Simple-Factory-Pattern","date":"2020-06-27T03:44:52.000Z","updated":"2025-07-30T11:30:13.137Z","comments":true,"path":"2020/06/27/Class-Diagram-Calculator-Simple-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/06/27/Class-Diagram-Calculator-Simple-Factory-Pattern/","excerpt":"Class-Diagram-Calculator-Simple-Factory-Pattern","text":"Example: 計算機 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647@startuml Example-Calculator-Simple-Factory-Patternclass Program&#123; + run()&#125;class SimpleOperationFactory&#123; + create() : Operable&#125;interface Operable&#123; + execute()&#125;class AddOperation&#123; + execute()&#125;class MinusOperation&#123; + execute()&#125;class DivideOperation&#123; + execute()&#125;class MultiplyOperation&#123; + execute()&#125;Operable &lt;|.. AddOperationOperable &lt;|.. MinusOperationOperable &lt;|.. DivideOperationOperable &lt;|.. MultiplyOperationProgram -&gt; SimpleOperationFactorySimpleOperationFactory -&gt; Operable@enduml ʕ •ᴥ•ʔ：若不熟悉 UML 類別圖，可參考UML類別圖說明。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"UML類別圖說明","slug":"Class-Diagram-Description","date":"2020-06-26T03:38:55.000Z","updated":"2025-07-30T11:30:13.162Z","comments":true,"path":"2020/06/26/Class-Diagram-Description/","permalink":"https://yncbearz.github.io/2020/06/26/Class-Diagram-Description/","excerpt":"Class-Diagram-Description","text":"Class DiagramClass diagram describes the structure of a system by showing the system’s classes, their attributes, operations (or methods), and the relationships among objects. 類別圖描述了系統的類別集合，類別的屬性和類別之間的關係。 關聯 (Association) ：以實線箭頭表示。關聯關係使一個類別知道另外一個類別的屬性和方法；通常含有「知道」、「瞭解」的含義。 貓咪知道天氣情況 123456789@startuml Associationclass Cat&#123; # Climate climate&#125;class ClimateCat -&gt; Climate@enduml 實作 (Implementation) ：以空心三角形的虛線箭頭表示。實作關係指的是一個 class 類別實現 interface 介面。 飛機實作可飛行介面 12345678910111213@startuml Implementationinterface Flyable&#123; + fly()&#125;Class Plane&#123; + fly()&#125;Flyable &lt;|.. Plane@enduml 聚合 (Aggregation)：以空心菱形的實線表示。聚合關係是整體與部分的「弱」包含關係。部分類別可單獨存在，也可以屬於多個整體物件。 描述has-a的關係 學校包含學生、課堂包含學生 學生可以單獨存在 12345678910111213141516@startuml Aggregationclass Studentclass Course&#123; # Student[] students&#125;class School&#123; # Student[] students&#125;Course o- StudentSchool o-- Student@enduml 組成（Composition）：以實心菱形的實線表示。組成關係是整體與部分的「強」包含關係。部分類別無法單獨存在，其生命週期與整體相同。 描述contains-a的關係 手錶包含時針、時鐘包含時針 時針無法單獨存在 123456789101112131415161718@startuml Compositionclass Watch&#123; # HourHand&#125;class Clock&#123; # HourHand&#125;class HourHandWatch *-- HourHandClock *-- HourHand@enduml 繼承 (Inheritance)：以空心三角形的實線箭頭表示。繼承關係指的是父類別擁有子類別的共有功能。而子類別可以視作父類別的特例。 描述is-a的關係 學生是人的特例、工程師是人的特例 123456@startuml InheritancePerson &lt;|-- StudentPerson &lt;|-- Programmer@enduml ʕ •ᴥ•ʔ：學習Design Pattern的過程中，一定會遇到的圖形！寫完才發現，自己很少描述聚合跟組成的關係。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"KISS 原則","slug":"Keep-It-Simple-Stupid","date":"2020-06-25T08:13:10.000Z","updated":"2025-05-30T08:15:23.246Z","comments":true,"path":"2020/06/25/Keep-It-Simple-Stupid/","permalink":"https://yncbearz.github.io/2020/06/25/Keep-It-Simple-Stupid/","excerpt":"Keep-It-Simple-And-Stupid","text":"Keep It Simple and Stupid (KISS) 保持簡單和愚蠢 讓程式碼保持簡單。 這樣做的優點是，任何人都能理解你的代碼，進而增加其生命週期 (可以被維護及複用)。 看似簡單的精神，卻需要許多努力才能實踐。 程式碼意圖表達性佳 適時的使用設計模式 Coding Style 貼近社群 其最終目的都是，減少程式碼的理解成本。 ʕ •ᴥ•ʔ：Kent Beck 實作模式中的核心精神，算是我第二喜歡的原則！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"}]},{"title":"不要重複你自己","slug":"Dont-Repeat-Yourself","date":"2020-06-23T14:44:45.000Z","updated":"2025-05-30T08:15:23.230Z","comments":true,"path":"2020/06/23/Dont-Repeat-Yourself/","permalink":"https://yncbearz.github.io/2020/06/23/Dont-Repeat-Yourself/","excerpt":"Don't-Repeat-Yourself","text":"Don’t Repeat Yourself (DRY)Every piece of knowledge must have a single, unambiguous, authoritative representation within a system. 系統中的每個部分，都必須要有唯一、明確且權威的代表。 在許多部分，有著重覆的程式碼，會造成將來修改時有所遺漏，透過遵守 DRY ，修改一處程式碼後，其餘地方便會同步改變。 不要用複製貼上編程法。(Copy-and-paste programming) 而違反 DRY 原則，又被戲稱為 WET“Write Every Time”“We Enjoy Typing” ʕ •ᴥ•ʔ：Avoid writing duplicate code !","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"}]},{"title":"範例：計算機 （簡單工廠模式)","slug":"Example-Calculator-Simple-Factory-Pattern","date":"2020-06-21T14:40:20.000Z","updated":"2025-05-30T08:15:23.233Z","comments":true,"path":"2020/06/21/Example-Calculator-Simple-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/06/21/Example-Calculator-Simple-Factory-Pattern/","excerpt":"Example-Calculator-Simple-Factory-Pattern","text":"Pattern: 簡單工廠模式 Class Diagram: 計算機 需求一：客戶想要一個加法計算機 123456789101112131415161718192021222324252627282930313233&lt;?phpnamespace App\\FactoryPattern\\Calculator;class Program&#123; /** * @var int */ private $firstNumber; /** * @var int */ private $secondNumber; /** * @var string */ private $operationString; public function __construct($firstNumber, $secondNumber) &#123; $this-&gt;firstNumber = $firstNumber; $this-&gt;secondNumber = $secondNumber; &#125; public function run() &#123; return $this-&gt;firstNumber + $this-&gt;secondNumber; &#125;&#125; 需求二：客戶想要在既有的計算機上，增加減法功能 我們思路如下： 首先改變建構式，讓參數有運算符號 123456public function __construct($firstNumber, $secondNumber, $operationString)&#123; $this-&gt;firstNumber = $firstNumber; $this-&gt;secondNumber = $secondNumber; $this-&gt;operationString = $operationString;&#125; 由運算符號，執行對應的方法 1234567891011121314public function run()&#123; $operationString = $this-&gt;operationString; switch ($operationString) &#123; case &#x27;+&#x27;: return $this-&gt;firstNumber + $this-&gt;secondNumber; break; case &#x27;-&#x27;: return $this-&gt;firstNumber - $this-&gt;secondNumber; break; &#125;&#125; 需求三：客戶想要除法的功能 於是我們在函式中，再添加一個除法的功能 123456789101112131415161718192021public function run()&#123; $operationString = $this-&gt;operationString; switch ($operationString) &#123; case &#x27;+&#x27;: return $this-&gt;firstNumber + $this-&gt;secondNumber; break; case &#x27;-&#x27;: return $this-&gt;firstNumber - $this-&gt;secondNumber; break; case &quot;/&quot;: if ($this-&gt;secondNumber === 0) &#123; return &#x27;Division by zero&#x27;; &#125; return $this-&gt;firstNumber / $this-&gt;secondNumber; break; &#125;&#125; 這時候功能是完成了，但有沒有覺得哪裡怪怪的？ 除法的case很醜，要額外判斷除數不為0，增加了嵌套層數。 每當客戶要新增&#x2F;修改&#x2F;刪除一種運算時，其餘的運算都會被修改到。違反了開放封閉原則。 讓我們用簡單工廠改造它。 首先定義運算的介面 12345678&lt;?phpnamespace App\\FactoryPattern\\Calculator\\Contracts;interface Operable&#123; public function execute();&#125; 實作加法運算 12345678910111213141516&lt;?phpnamespace App\\FactoryPattern\\Calculator\\Operation;use App\\FactoryPattern\\Calculator\\Contracts\\Operable;class AddOperation implements Operable&#123; public $firstNumber; public $secondNumber; public function execute() &#123; return $this-&gt;firstNumber + $this-&gt;secondNumber; &#125;&#125; 實作減法運算 12345678910111213141516&lt;?phpnamespace App\\FactoryPattern\\Calculator\\Operation;use App\\FactoryPattern\\Calculator\\Contracts\\Operable;class MinusOperation implements Operable&#123; public $firstNumber; public $secondNumber; public function execute() &#123; return $this-&gt;firstNumber - $this-&gt;secondNumber; &#125;&#125; 實作除法運算 12345678910111213141516171819&lt;?phpnamespace App\\FactoryPattern\\Calculator\\Operation;use App\\FactoryPattern\\Calculator\\Contracts\\Operable;class DivideOperation implements Operable&#123; public $firstNumber; public $secondNumber; public function execute() &#123; if ($this-&gt;secondNumber === 0) &#123; return &#x27;Division by zero&#x27;; &#125; return $this-&gt;firstNumber / $this-&gt;secondNumber; &#125;&#125; 最後做一個創造運算的工廠 1234567891011121314151617181920212223242526272829303132&lt;?phpnamespace App\\FactoryPattern\\Calculator;use App\\FactoryPattern\\Calculator\\Contracts\\Operable;use App\\FactoryPattern\\Calculator\\Operation\\AddOperation;use App\\FactoryPattern\\Calculator\\Operation\\MinusOperation;use App\\FactoryPattern\\Calculator\\Operation\\DivideOperation;class SimpleOperationFactory&#123; /** * @param string $operationString * @return Operable */ public function create($operationString): Operable &#123; switch ($operationString) &#123; case &#x27;+&#x27;: return new AddOperation(); break; case &#x27;-&#x27;: return new MinusOperation(); break; case &#x27;/&#x27;: return new DivideOperation(); break; &#125; &#125;&#125; 修改原本的產品程式碼，讓運算由工廠產生 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;?phpnamespace App\\FactoryPattern\\Calculator;use App\\FactoryPattern\\Calculator\\Contracts\\Operable;use App\\FactoryPattern\\Calculator\\SimpleOperationFactory;class Program&#123; /** * @var int */ private $firstNumber; /** * @var int */ private $secondNumber; /** * @var string */ private $operationString; /** * @var Operable */ private $operation; public function __construct($firstNumber, $secondNumber, $operationString) &#123; $this-&gt;firstNumber = $firstNumber; $this-&gt;secondNumber = $secondNumber; $this-&gt;operationString = $operationString; &#125; public function run() &#123; $simpleOperationFactory = new SimpleOperationFactory(); $this-&gt;operation = $simpleOperationFactory-&gt;create($this-&gt;operationString); return $this-&gt;execute(); &#125; /** * @return int|string */ private function execute() &#123; $this-&gt;operation-&gt;firstNumber = $this-&gt;firstNumber; $this-&gt;operation-&gt;secondNumber = $this-&gt;secondNumber; return $this-&gt;operation-&gt;execute(); &#125;&#125; 需求四：客戶想要乘法的功能 實作乘法運算 12345678910111213141516&lt;?phpnamespace App\\FactoryPattern\\Calculator\\Operation;use App\\FactoryPattern\\Calculator\\Contracts\\Operable;class MultiplyOperation implements Operable&#123; public $firstNumber; public $secondNumber; public function execute() &#123; return $this-&gt;firstNumber * $this-&gt;secondNumber; &#125;&#125; 修改運算工廠 123456789101112131415161718192021222324/** * @param string $operationString * @return Operable */public function create($operationString): Operable&#123; switch ($operationString) &#123; case &#x27;+&#x27;: return new AddOperation(); break; case &#x27;-&#x27;: return new MinusOperation(); break; case &#x27;/&#x27;: return new DivideOperation(); break; case &#x27;*&#x27;: return new MultiplyOperation(); break; &#125;&#125; [單一職責原則]將創造運算的職責跟運算本身的職責分離，就是工廠模式的精神！ [開放封閉原則]這下子，我們終於不會每次新增&#x2F;修改&#x2F;刪除一個運算時，影響到其餘所有運算了。 ʕ •ᴥ•ʔ：函式出現switch時，很可能就是使用工廠模式的時機。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"}]},{"title":"簡單工廠模式","slug":"Simple-Factory-Pattern","date":"2020-06-21T12:39:30.000Z","updated":"2025-05-30T08:15:23.253Z","comments":true,"path":"2020/06/21/Simple-Factory-Pattern/","permalink":"https://yncbearz.github.io/2020/06/21/Simple-Factory-Pattern/","excerpt":"Simple Factory Pattern","text":"Simple Factory Pattern又稱為靜態工廠，傳入不同的參數以取得不同的類別物件。Example: 計算機、運輸系統、世紀帝國 簡單工廠模式會將類別分為兩類：分別是工廠類別 (Creator) 與 產品類別 (Product) 。 在簡單工廠模式中，通常只會有一個工廠，負責一種產品的創建。 優點：將創建物件的邏輯與物件本身的邏輯分離，符合單一職責原則。 缺點：因工廠負責產品族中所有產品的創建，當新增&#x2F;修改產品時，無法遵守開放封閉原則。 簡單工廠模式適用於創建物件時，沒有複雜邏輯的情況。 ʕ •ᴥ•ʔ：創造物件就是工廠模式唯一的職責。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"}]},{"title":"設計模式目錄","slug":"Design-Pattern-Menu","date":"2020-06-21T12:21:04.000Z","updated":"2025-05-30T08:15:23.230Z","comments":true,"path":"2020/06/21/Design-Pattern-Menu/","permalink":"https://yncbearz.github.io/2020/06/21/Design-Pattern-Menu/","excerpt":"Design-Pattern-Menu","text":"Design Pattern Menu 模式 範例 簡單工廠模式 (Simple Factory Pattern) 計算機、運輸系統、世紀帝國 工廠方法模式 (Factory Method Pattern) 運輸系統、世紀帝國 抽象工廠模式 (Abstract Factory Pattern) 運輸系統、世紀帝國 策略模式 (Strategy Pattern) 收銀機 裝飾者模式 (Decorator Pattern) 漢堡點餐系統 單例模式 (Singleton Pattern) 資料庫連線 命令模式 (Command Pattern) 機器人廚師 樣板方法模式 (Template Method Pattern) 影片製作大師 轉接頭模式 (Adapter Pattern) 才藝表演 外觀模式 (Facade Pattern) 自助餐餐廳 狀態模式 (State Pattern) 會員制、光的三原色 觀察者模式 (Observer Pattern) Line群組通知 迭代器模式 (Iterator Pattern) 歌曲排行 代理模式 (Proxy Pattern) 快取代理 原型模式 (Prototype Pattern) 三隻小豬 建造者模式 (Builder Pattern) 假期規劃 備忘錄模式 (Memento Pattern) 仿真Git 蠅量模式 (Flyweight Pattern) 文字積木 解譯器模式 (Interpreter Pattern) 摩斯電碼 組合模式 (Composite Pattern) 生物分類學 橋接模式 (Bridge Pattern) 十二生肖 職責鏈模式 (Chain Of Responsibility Pattern) 新產品開發 中介者模式 (Mediator Pattern) 打招呼 訪問者模式 (Visitor Pattern) 各國婚禮、動物園管理員 ʕ •ᴥ•ʔ：會在這裡陸續更新！","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"},{"name":"Menu","slug":"Menu","permalink":"https://yncbearz.github.io/tags/Menu/"}]},{"title":"依賴反轉原則","slug":"Dependency-Inversion-Principle","date":"2020-06-08T01:56:53.000Z","updated":"2025-05-30T08:15:23.230Z","comments":true,"path":"2020/06/08/Dependency-Inversion-Principle/","permalink":"https://yncbearz.github.io/2020/06/08/Dependency-Inversion-Principle/","excerpt":"Dependency-Inversion-Principle","text":"Dependency Inversion Principle (DIP)High-level modules should not depend on low-level modules. Both should depend on abstractions 高階模組不應該依賴低階模組。它們都應該依賴抽象。 Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions. 抽象不應該依賴細節。細節應該依賴抽象。 Example: 電力系統 目的是把高階模組對低階模組的依賴解耦，改為高階模組依賴定義出的抽象介面，而由低階模組去實現介面。 其中的依賴關係被顛倒，使得低階模組依賴於高階的抽象介面。 Def. 發電：泛指從其它種類的能源轉換為電力的過程。 最初我們有一個電力系統，發電系統採用火力發電，之後再由輸電系統，配給各個用戶。 今天我們想要抽換發電系統，改為風力發電。卻發現原本的電力系統強耦合於火力發電，不易抽換。 透過定義出抽象的發電介面，我們可以讓電力系統依賴於發電介面，並讓火力發電、風力發電去實作發電介面。 因為依賴抽象化，未來就更容易抽換發電系統了。 ʕ •ᴥ•ʔ：重讀一次DIP發現重點在於，如何定義出足夠抽象的介面。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"},{"name":"S.O.L.I.D","slug":"S-O-L-I-D","permalink":"https://yncbearz.github.io/tags/S-O-L-I-D/"}]},{"title":"介面隔離原則","slug":"Interface-Segregation-Principle","date":"2020-06-03T15:08:50.000Z","updated":"2025-05-30T08:15:23.246Z","comments":true,"path":"2020/06/03/Interface-Segregation-Principle/","permalink":"https://yncbearz.github.io/2020/06/03/Interface-Segregation-Principle/","excerpt":"Interface-Segregation-Principle","text":"Interface Segregation Principle (ISP)No client should be forced to depend on methods it does not use. 客戶不應該依賴他們不使用的方法。 Example: 咖啡機 透過將龐大的介面，拆分成一個個的小介面，解開耦合，進而容易重構、修改及部署。 前陣子Johnny提出ISP的目的，是為了多型的實作，也是不錯的觀點。（註：小介面比較易於實作） Def. 全自動咖啡機：會自己磨粉、沖煮的咖啡機。 假使我們實作一個咖啡機介面，內有兩種方法，分別是磨粉及沖煮。 隨著對咖啡的興趣增加，我們可能會想玩摩卡壺。（註：摩卡壺為一種沖煮咖啡的器具） 這時會發現，原本咖啡機介面職責有點多。摩卡壺沒辦法實作咖啡機介面（不會磨粉）。 透過將介面拆分成：磨粉介面、沖煮介面，我們可以讓原本的全自動咖啡機改成實作這兩種介面。 而摩卡壺實作沖煮介面。 這下原本的煮咖啡程式，就可以寫好不修改了。 ʕ •ᴥ•ʔ：ISP不就是介面版本的單一職責原則嗎?（笑）","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"},{"name":"S.O.L.I.D","slug":"S-O-L-I-D","permalink":"https://yncbearz.github.io/tags/S-O-L-I-D/"}]},{"title":"裡氏替換原則","slug":"Liskov-Substitution-Principle","date":"2020-05-31T05:18:05.000Z","updated":"2025-05-30T08:15:23.249Z","comments":true,"path":"2020/05/31/Liskov-Substitution-Principle/","permalink":"https://yncbearz.github.io/2020/05/31/Liskov-Substitution-Principle/","excerpt":"Liskov-Substitution-Principle","text":"Liskov Substitution Principle (LSP)Subtypes must be substitutable for their base types. 子類別必須要能替代它的父類別。 Example: 老爸餐廳 目前是以集合關係的角度來理解 LSP。 實作上大致有兩個概念： 子類別的Input型態可以比父類別更寬鬆。 子類別的Output型態則需比父類別更為嚴謹。 這樣子類別才有取代父類別的可能。（既有行為正常） Def. 餐廳：顧客可以用金流換取餐點的地方。 舉個實際例子，假設你要繼承老爸的餐廳： [Input篇]原本顧客習慣的付款方式是現金，你可以另外提供信用卡來付款。這樣原本使用現金的顧客，依然能在你的店消費。 [Output篇]而顧客來到餐廳的目的是餐點，你可以提供漢堡、炸牛排、陽春麵等等。但必須要是餐點。 (Reference.) SOLID 之 里氏替換原則 (Liskov substitution principle) ʕ •ᴥ•ʔ：LSP背後就是集合論啊，數學系對這個原則備感親切。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"},{"name":"S.O.L.I.D","slug":"S-O-L-I-D","permalink":"https://yncbearz.github.io/tags/S-O-L-I-D/"}]},{"title":"開放封閉原則","slug":"Open-Close-Principle","date":"2020-05-30T06:44:40.000Z","updated":"2025-05-30T08:15:23.252Z","comments":true,"path":"2020/05/30/Open-Close-Principle/","permalink":"https://yncbearz.github.io/2020/05/30/Open-Close-Principle/","excerpt":"Open-Close-Principle","text":"Open-Close Principle (OCP)A software artifact should be open for extension but closed for modification. 一個軟體製品應該對於擴展是開放的，但對於修改是封閉的。 OCP是系統架構背後的推動力之一。目標是使系統易於擴展而不會因修改而產生較大的影響。 問：遵守單一職責原則會有什麼好處？答：你就可以遵守開放封閉原則囉（笑） 職責拆分與抽象化，便是這個原則的核心精神。其影響力無遠弗屆，從模組、類別到方法都能見其身影。 當你因為需求變更而修改到既有程式碼時，很有可能就會違反 OCP。（比違反SRP容易察覺） 這是之前，在讀S.O.L.I.D時比較困惑的原則，實務情境不知道該如何遵守 OCP。 目前理解的流程： 先清楚各個程式碼區塊，所負責的任務是什麼。 接著拆分職責，定義抽象的介面。 最後考慮架構，理解何時可以修改既有程式碼、何時應該新增程式碼。 SRP 跟 OCP 是我心中最重要的兩個原則，相比之下，其他原則都像是他倆的補充說明。 ʕ •ᴥ•ʔ：定義好各個程式碼區塊的職責，然後遵守它。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"},{"name":"S.O.L.I.D","slug":"S-O-L-I-D","permalink":"https://yncbearz.github.io/tags/S-O-L-I-D/"}]},{"title":"單一職責原則","slug":"Single-Responsibility-Principle","date":"2020-05-27T16:00:33.000Z","updated":"2025-05-30T08:15:23.253Z","comments":true,"path":"2020/05/28/Single-Responsibility-Principle/","permalink":"https://yncbearz.github.io/2020/05/28/Single-Responsibility-Principle/","excerpt":"Single-Responsibility-Principle","text":"Single Responsibility Principle (SRP)A module should have one, and only one, reason to change. 一個模組應當有一個，且只有一個會改變的理由。 如果不好理解其定義的話，在Clean Architecture中有提到其最終版為，一個模組應當只對唯一的一個角色負責。 其影響力無遠弗屆，從模組、類別到方法都能見其身影。 討論code的時候，需要先建立彼此的共識。理解對方對code職責的定義，往往是很有幫助的。 這段Code的職責在你的定義下是做什麼的？用來解決什麼問題？它的服務對象是誰？任務目標是什麼？ 最近讀Refactoring時，討論到變數命名時，應只被設定一次。Kyo 提出，這不就是變數的單一職責原則嗎？ ʕ •ᴥ•ʔ：所有Clean Code的原點，也是我最喜歡的原則。跟 91 coaching 討論時，有提到需求改變時，只需要改變一個地方，也是另一種檢驗的方式。","categories":[{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"}],"tags":[{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"},{"name":"S.O.L.I.D","slug":"S-O-L-I-D","permalink":"https://yncbearz.github.io/tags/S-O-L-I-D/"}]}],"categories":[{"name":"Other","slug":"Other","permalink":"https://yncbearz.github.io/categories/Other/"},{"name":"Programming","slug":"Programming","permalink":"https://yncbearz.github.io/categories/Programming/"},{"name":"Clean Code","slug":"Clean-Code","permalink":"https://yncbearz.github.io/categories/Clean-Code/"},{"name":"Life","slug":"Life","permalink":"https://yncbearz.github.io/categories/Life/"}],"tags":[{"name":"Study Group","slug":"Study-Group","permalink":"https://yncbearz.github.io/tags/Study-Group/"},{"name":"Note","slug":"Note","permalink":"https://yncbearz.github.io/tags/Note/"},{"name":"Design Pattern","slug":"Design-Pattern","permalink":"https://yncbearz.github.io/tags/Design-Pattern/"},{"name":"Example","slug":"Example","permalink":"https://yncbearz.github.io/tags/Example/"},{"name":"Principle","slug":"Principle","permalink":"https://yncbearz.github.io/tags/Principle/"},{"name":"Private Note","slug":"Private-Note","permalink":"https://yncbearz.github.io/tags/Private-Note/"},{"name":"SQL","slug":"SQL","permalink":"https://yncbearz.github.io/tags/SQL/"},{"name":"With TM","slug":"With-TM","permalink":"https://yncbearz.github.io/tags/With-TM/"},{"name":"Settings","slug":"Settings","permalink":"https://yncbearz.github.io/tags/Settings/"},{"name":"Movie","slug":"Movie","permalink":"https://yncbearz.github.io/tags/Movie/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://yncbearz.github.io/tags/LeetCode/"},{"name":"Menu","slug":"Menu","permalink":"https://yncbearz.github.io/tags/Menu/"},{"name":"S.O.L.I.D","slug":"S-O-L-I-D","permalink":"https://yncbearz.github.io/tags/S-O-L-I-D/"}]}